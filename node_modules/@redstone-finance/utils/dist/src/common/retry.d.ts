export type RetryConfig<P extends unknown[] = [], R extends Promise<unknown> = Promise<unknown>> = {
    fn: (...args: P) => R;
    fnName?: string;
    maxRetries: number;
    waitBetweenMs?: number;
    logger?: (message: string) => void;
    backOff?: {
        backOffBase: number;
    };
};
export declare class UnrecoverableError extends Error {
    unrecoverable?: boolean;
}
export declare const isErrorUnrecoverable: (err: Error) => err is UnrecoverableError;
export declare class UnrecoverableAggregateError extends AggregateError {
    unrecoverable?: boolean;
}
export declare function retry<P extends unknown[], R extends Promise<unknown>>(config: RetryConfig<P, R>): (...args: P) => Promise<Awaited<R>>;
export declare const waitForSuccess: (cond: (iterationIndex?: number) => Promise<boolean>, count: number, errorMessage: string, sleepTimeMs?: number, description?: string) => Promise<void>;
//# sourceMappingURL=retry.d.ts.map