"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForBlockNumber = waitForBlockNumber;
const logger_1 = require("../logger");
const retry_1 = require("./retry");
const DEFAULT_MAX_ITERATION_COUNT = 120;
const DEFAULT_WAITING_INTERVAL_MS = 500;
const logger = (0, logger_1.loggerFactory)("waitForBlockNumber");
async function waitForBlockNumber(getBlockNumber, blockNumberToWaitFor, description = "", waitingIntervalMs = DEFAULT_WAITING_INTERVAL_MS, maxIterationCount = DEFAULT_MAX_ITERATION_COUNT) {
    if (!blockNumberToWaitFor) {
        return;
    }
    await (0, retry_1.waitForSuccess)((iterationIndex) => getBlockNumberWithLog(getBlockNumber, blockNumberToWaitFor, description, iterationIndex), maxIterationCount, `[${description}] Didn't achieve block number ${blockNumberToWaitFor} in ${(maxIterationCount * waitingIntervalMs) / 1000} [s]`, waitingIntervalMs, description);
}
async function getBlockNumberWithLog(getBlockNumber, blockNumberToWaitFor, description = "", iterationIndex) {
    const currentBlockNumber = await getBlockNumber();
    const isConditionFulfilled = currentBlockNumber >= blockNumberToWaitFor;
    (iterationIndex ? logger.info : logger.debug)(`[${description}] Iteration #${iterationIndex} Current block number: ${currentBlockNumber}` +
        (!isConditionFulfilled
            ? ` (missing: ${blockNumberToWaitFor - currentBlockNumber})`
            : ""));
    return isConditionFulfilled;
}
//# sourceMappingURL=wait-for-block-number.js.map