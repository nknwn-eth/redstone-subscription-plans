type MemoizeArgs<F extends (...args: unknown[]) => Promise<unknown>> = {
    functionToMemoize: F;
    ttl: number;
    cleanEveryNIteration?: number;
    cacheKeyBuilder?: (...args: Parameters<F>) => string | Promise<string>;
    cacheReporter?: (isMiss: boolean) => void;
};
export declare function memoize<F extends (...args: any[]) => Promise<unknown>, R = ReturnType<F>>({ functionToMemoize, ttl, cacheKeyBuilder, cacheReporter, cleanEveryNIteration, }: MemoizeArgs<F>): F;
export {};
//# sourceMappingURL=memoize.d.ts.map