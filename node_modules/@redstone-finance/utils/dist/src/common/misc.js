"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.roundToSignificantDigits = roundToSignificantDigits;
exports.getFilenameWithoutExtension = getFilenameWithoutExtension;
exports.getS = getS;
exports.toOrdinal = toOrdinal;
exports.stringify = stringify;
const lodash_1 = __importDefault(require("lodash"));
function roundToSignificantDigits(num, number = 2) {
    if (num === 0) {
        return 0;
    }
    const d = Math.ceil(Math.log10(num < 0 ? -num : num));
    const power = number - d;
    const magnitude = Math.pow(10, power);
    const shifted = Math.round(num * magnitude);
    return shifted / magnitude;
}
function getFilenameWithoutExtension(url) {
    const filenameWithExtension = url.substring(url.lastIndexOf("/") + 1);
    return filenameWithExtension.split(".").slice(0, -1).join(".");
}
function getS(value, s = "s") {
    return value !== 1 ? s : "";
}
function toOrdinal(n) {
    const lastDigit = n % 10;
    const rem100 = n % 100;
    if (lastDigit === 1 && rem100 !== 11) {
        return `${n}st`;
    }
    else if (lastDigit === 2 && rem100 !== 12) {
        return `${n}nd`;
    }
    else if (lastDigit === 3 && rem100 !== 13) {
        return `${n}rd`;
    }
    else {
        return `${n}th`;
    }
}
function stringify(result) {
    if (typeof result === "string") {
        return result;
    }
    if (result === undefined || result === null) {
        return String(result);
    }
    try {
        if (typeof result === "number" ||
            typeof result === "boolean" ||
            typeof result === "bigint" ||
            typeof result === "symbol") {
            return String(result);
        }
        return unescapeString(JSON.stringify(result));
    }
    catch (_e) {
        if (typeof result.toString === "function" &&
            result.toString !== Object.prototype.toString) {
            return unescapeString(result.toString());
        }
        if (typeof result === "object") {
            try {
                const properties = Object.entries(result).map(([key, value]) => {
                    if (typeof value === "object" && value !== null) {
                        value = stringify(value);
                    }
                    else if (typeof value === "function") {
                        value = "[Function]";
                    }
                    return `${key}: ${value}`;
                });
                return `{${properties.join(", ")}}`;
            }
            catch {
                return "[Complex Object]";
            }
        }
        return "[Unable to stringify value]";
    }
}
function unescapeString(s) {
    return lodash_1.default.unescape(s).replace(/\\"/g, '"').replace(/\\\\/g, "\\");
}
//# sourceMappingURL=misc.js.map