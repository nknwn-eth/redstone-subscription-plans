type TimeoutCallback<T> = (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: unknown) => void) => void;
export declare const timeoutOrResult: <T>(prom: Promise<T>, timeoutMS?: number, customErrorMessage?: string, timeoutCallback?: TimeoutCallback<T>) => Promise<T>;
export declare const timeout: <T>(prom: Promise<T>, timeoutMS: number, customErrorMessage?: string, timeoutCallback?: TimeoutCallback<T>) => Promise<T>;
export declare const sleep: (ms: number) => Promise<unknown>;
export declare const msToMin: (ms: number) => number;
export declare const minToMs: (min: number) => number;
export declare const hourToMs: (hours: number) => number;
export declare const msToHours: (ms: number) => number;
export declare const intervalMsToCronFormat: (intervalMs: number) => string;
export {};
//# sourceMappingURL=time.d.ts.map