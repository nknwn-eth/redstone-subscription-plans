type AnyFunction = (...arguments_: readonly any[]) => unknown;
export type ThrottledFunction<F extends AnyFunction> = F & {
    isEnabled: boolean;
    readonly queueSize: number;
    abort(): void;
};
export type Options = {
    readonly limit: number;
    readonly interval: number;
    readonly strict?: boolean;
    readonly onDelay?: () => void;
};
export declare const pThrottle: ({ limit, interval, strict, onDelay, }: Options) => (<F extends AnyFunction>(function_: F) => ThrottledFunction<F>);
export declare function withRateLimiter<T extends AnyFunction>(fn: T, pThrottleOpts: Options): T;
export {};
//# sourceMappingURL=p-throttle.d.ts.map