export declare function mergeObjects<T = unknown>(objects: T[]): T;
export declare function getRequiredPropValue<T = unknown>(obj: {
    [x: string]: unknown;
}, prop: string): T;
export declare function isEmpty<T>(value: T): value is NonNullable<T>;
export declare function useDefaultIfEmpty<T>(value: T | null | undefined, defaultValue: T): T;
export declare function fetchDefaultIfEmpty<T>(value: T | null | undefined, defaultValueFetcher: () => Promise<T>): Promise<T>;
export declare function isDefined<T>(value: T): value is NonNullable<T>;
export declare function isTruthy<T>(value: T): value is NonNullable<T>;
export declare const ensureInitialized: <T>(o: Partial<Record<string, T>>, key: string, initializer: () => T) => o is Record<string, T>;
export declare const createEmptySet: <T>() => Set<T>;
//# sourceMappingURL=objects.d.ts.map