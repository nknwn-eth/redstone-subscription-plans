"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkIdSchema = exports.ChainTypeEnum = exports.NonEvmChainTypeEnum = void 0;
exports.isEvmNetworkId = isEvmNetworkId;
exports.isEvmChainType = isEvmChainType;
exports.isNonEvmNetworkId = isNonEvmNetworkId;
exports.isNonEvmChainType = isNonEvmChainType;
exports.conformsToChainType = conformsToChainType;
exports.deconstructNetworkId = deconstructNetworkId;
exports.constructNetworkId = constructNetworkId;
const zod_1 = require("zod");
exports.NonEvmChainTypeEnum = zod_1.z.enum([
    "sui",
    "movement",
    "radix",
    "solana",
    "fuel",
    "aptos",
    "stellar",
]);
exports.ChainTypeEnum = zod_1.z.enum(["evm", ...exports.NonEvmChainTypeEnum.options]);
const networkNumberSchema = zod_1.z.coerce.number().int().positive();
exports.NetworkIdSchema = zod_1.z.union([
    networkNumberSchema,
    zod_1.z
        .string()
        .transform((s) => s.split("/"))
        .pipe(zod_1.z.tuple([exports.NonEvmChainTypeEnum, networkNumberSchema]))
        .transform(([str, num]) => `${str}/${num}`),
]);
function isEvmNetworkId(networkId) {
    return typeof networkId === "number";
}
function isEvmChainType(chainType) {
    return !chainType || chainType === exports.ChainTypeEnum.Enum.evm;
}
function isNonEvmNetworkId(networkId) {
    return !isEvmNetworkId(networkId);
}
function isNonEvmChainType(chainType) {
    return !isEvmChainType(chainType);
}
function conformsToChainType(left, right) {
    return (left ?? exports.ChainTypeEnum.Enum.evm) === (right ?? exports.ChainTypeEnum.Enum.evm);
}
function deconstructNetworkId(networkId) {
    if (typeof networkId === "number") {
        return {
            chainType: exports.ChainTypeEnum.Enum.evm,
            chainId: networkId,
        };
    }
    const [chainTypeStr, chainIdStr] = networkId.split("/");
    const chainType = exports.NonEvmChainTypeEnum.parse(chainTypeStr);
    const chainId = Number(chainIdStr);
    if (Number.isNaN(chainId) || chainId < 1) {
        throw new Error(`Invalid chainId in networkId: ${chainIdStr}`);
    }
    return { chainType, chainId };
}
function constructNetworkId(chainId, chainType) {
    if (!chainType || chainType === exports.ChainTypeEnum.Enum.evm) {
        return chainId;
    }
    return `${chainType}/${chainId}`;
}
//# sourceMappingURL=NetworkId.js.map