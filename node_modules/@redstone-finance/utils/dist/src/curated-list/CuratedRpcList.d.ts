import { z } from "zod";
import { RedstoneLogger } from "../logger";
import { NetworkId } from "../NetworkId";
type Score = {
    callsCount: number;
    errorsCount: number;
    inQuarantine: boolean;
    quarantineCounter: number;
};
type ScoreReport = {
    error: boolean;
};
declare const CuratedRpcListConfigSchema: z.ZodObject<{
    resetQuarantineInterval: z.ZodDefault<z.ZodNumber>;
    evaluationInterval: z.ZodDefault<z.ZodNumber>;
    maxErrorRate: z.ZodDefault<z.ZodNumber>;
    extendedLogs: z.ZodDefault<z.ZodBoolean>;
    rpcIdentifiers: z.ZodArray<z.ZodString, "many">;
    minimalProvidersCount: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    resetQuarantineInterval: number;
    evaluationInterval: number;
    maxErrorRate: number;
    extendedLogs: boolean;
    rpcIdentifiers: string[];
    minimalProvidersCount: number;
}, {
    rpcIdentifiers: string[];
    minimalProvidersCount: number;
    resetQuarantineInterval?: number | undefined;
    evaluationInterval?: number | undefined;
    maxErrorRate?: number | undefined;
    extendedLogs?: boolean | undefined;
}>;
export type CuratedRpcListConfig = z.input<typeof CuratedRpcListConfigSchema>;
export type RpcIdentifier = string;
export declare class CuratedRpcList {
    config: Required<CuratedRpcListConfig>;
    state: {
        [rpcIdentifier: RpcIdentifier]: Score;
    };
    logger: RedstoneLogger;
    freeFromQuarantineTimer?: NodeJS.Timeout;
    evaluationTimer?: NodeJS.Timeout;
    constructor(config: CuratedRpcListConfig, networkId: NetworkId);
    private updateFreeFromQuarantineTimer;
    private updateEvaluationTimer;
    scoreRpc(rpc: RpcIdentifier, score: ScoreReport): void;
    evaluateRpcScore(rpc: RpcIdentifier): void;
    getBestProviders(): RpcIdentifier[];
    freeOneRpcFromQuarantine(): void;
    private getProvidersInQuarantine;
    private getCalledProviders;
}
export {};
//# sourceMappingURL=CuratedRpcList.d.ts.map