"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationQueue = void 0;
const logger_1 = require("../logger");
class OperationQueue {
    logger;
    queue = [];
    isProcessing = false;
    activeOperations = new Set();
    constructor(logger = (0, logger_1.loggerFactory)("operation-queue")) {
        this.logger = logger;
    }
    enqueue(id, operation) {
        const existingOperationIndex = this.queue.findIndex((op) => op.id === id);
        if (existingOperationIndex !== -1) {
            this.queue[existingOperationIndex].operation = operation;
            this.logger.debug(`Replaced operation for [${id}] in the queue.`);
            return true;
        }
        else if (this.activeOperations.has(id)) {
            this.logger.debug(`Operation for [${id}] is currently processing and cannot be replaced.`);
            return false;
        }
        else {
            this.queue.push({ id, operation });
            this.logger.debug(`Added operation for [${id}] to the queue.`);
            this.processQueue();
            return true;
        }
    }
    async processQueue() {
        if (this.isProcessing)
            return;
        this.isProcessing = true;
        while (this.queue.length > 0) {
            const { id, operation } = this.queue.shift();
            this.activeOperations.add(id);
            try {
                this.logger.debug(`Running for [${id}]`);
                await operation();
            }
            catch (error) {
                this.logger.error(`Operation for [${id}] failed:`, error);
            }
            finally {
                this.activeOperations.delete(id);
            }
        }
        this.isProcessing = false;
    }
}
exports.OperationQueue = OperationQueue;
//# sourceMappingURL=OperationQueue.js.map