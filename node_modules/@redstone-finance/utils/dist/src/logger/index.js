"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLogLevel = exports.loggerFactory = void 0;
exports.createSanitizedLogger = createSanitizedLogger;
exports.sanitizeValue = sanitizeValue;
exports.sanitizeLogMessage = sanitizeLogMessage;
const consola_1 = __importStar(require("consola"));
const zod_1 = require("zod");
const env_1 = require("../common/env");
const runtime_1 = require("../common/runtime");
const DEFAULT_ENABLE_JSON_LOGS = true;
const DEFAULT_LOG_LEVEL = consola_1.LogLevel.Info;
const MAX_DEPTH = 5;
const LogTypeToLevel = {
    Fatal: consola_1.LogLevel.Fatal,
    Error: consola_1.LogLevel.Error,
    Warn: consola_1.LogLevel.Warn,
    Log: consola_1.LogLevel.Log,
    Info: consola_1.LogLevel.Info,
    Success: consola_1.LogLevel.Success,
    Debug: consola_1.LogLevel.Debug,
    Trace: consola_1.LogLevel.Trace,
    Silent: consola_1.LogLevel.Silent,
    Verbose: consola_1.LogLevel.Verbose,
};
let customLogLevels = undefined;
const loggerFactory = (moduleName) => {
    if ((0, runtime_1.isNodeRuntime)()) {
        if (customLogLevels === undefined) {
            customLogLevels = parseLogLevels();
        }
        const enableJsonLogs = (0, env_1.getFromEnv)("REDSTONE_FINANCE_ENABLE_JSON_LOGS", zod_1.z.boolean().default(DEFAULT_ENABLE_JSON_LOGS));
        const defaultLogLevel = (0, exports.getLogLevel)();
        const logLevel = customLogLevels
            ? getCustomLogLevel(moduleName, customLogLevels, defaultLogLevel)
            : defaultLogLevel;
        const mainReporter = enableJsonLogs
            ? new consola_1.JSONReporter()
            : new consola_1.FancyReporter();
        const logger = consola_1.default
            .create({
            reporters: [mainReporter],
            level: logLevel,
        })
            .withTag(moduleName);
        return createSanitizedLogger(logger);
    }
    else {
        return console;
    }
};
exports.loggerFactory = loggerFactory;
const getLogLevel = () => {
    return (0, env_1.getFromEnv)("REDSTONE_FINANCE_LOG_LEVEL", zod_1.z.nativeEnum(consola_1.LogLevel).default(DEFAULT_LOG_LEVEL));
};
exports.getLogLevel = getLogLevel;
function createSanitizedLogger(logger) {
    const methods = ["log", "info", "warn", "error", "debug"];
    const sanitizedLogger = { ...logger };
    methods.forEach((method) => {
        if (typeof logger[method] === "function") {
            const original = logger[method].bind(logger);
            sanitizedLogger[method] = (...args) => {
                const sanitizedArgs = args.map((arg) => sanitizeValue(arg));
                original.apply(logger, sanitizedArgs);
            };
        }
    });
    return sanitizedLogger;
}
function getCustomLogLevel(moduleName, logLevels, defaultLogLevel) {
    if (logLevels[moduleName]) {
        return logLevels[moduleName];
    }
    if (logLevels["*"]) {
        return logLevels["*"];
    }
    return defaultLogLevel;
}
function sanitize(val, seen, depth = 0) {
    if (depth >= MAX_DEPTH) {
        return "[Max Depth Reached]";
    }
    if (typeof val === "string") {
        return sanitizeLogMessage(val);
    }
    else if (Array.isArray(val)) {
        if (seen.has(val)) {
            return "[Circular]";
        }
        seen.add(val);
        return val.map((item) => sanitize(item, seen, depth + 1));
    }
    else if (val !== null && typeof val === "object") {
        if (seen.has(val)) {
            return "[Circular]";
        }
        seen.add(val);
        const result = {};
        for (const [key, item] of Object.entries(val)) {
            result[key] = sanitize(item, seen, depth + 1);
        }
        return result;
    }
    return val;
}
function sanitizeValue(value) {
    const seen = new WeakSet();
    return sanitize(value, seen);
}
function sanitizePathComponent(value) {
    return value.length > 4 ? `...${value.slice(-4)}` : value;
}
function sanitizeLogMessage(message) {
    const urlRegex = /(https?|wss):\/\/[A-Za-z0-9\-._~:/?#[\]@!$&'()*+,;=%]+/g;
    return message.replace(urlRegex, (match) => {
        try {
            const parsedUrl = new URL(match);
            parsedUrl.password = "";
            parsedUrl.username = "";
            parsedUrl.pathname = parsedUrl.search
                ? sanitizePathComponent(parsedUrl.search)
                : sanitizePathComponent(parsedUrl.pathname);
            parsedUrl.search = "";
            return parsedUrl.toString().replace(/\/+$/, "");
        }
        catch (_err) {
            return match;
        }
    });
}
function parseLogLevels() {
    const levels = {};
    const env = (0, env_1.getFromEnv)("NODE_ENV", zod_1.z.string().optional());
    if (env !== "test") {
        return null;
    }
    const customLogLevels = (0, env_1.getFromEnv)("CUSTOM_LOG_LEVELS", zod_1.z.string().optional());
    if (!customLogLevels) {
        return null;
    }
    customLogLevels.split(",").forEach((item) => {
        const [module, level] = item.split(":");
        if (!Object.hasOwn(LogTypeToLevel, level)) {
            throw new Error(`Unknown log level ${level} for ${module}`);
        }
        levels[module] = LogTypeToLevel[level];
    });
    return levels;
}
//# sourceMappingURL=index.js.map