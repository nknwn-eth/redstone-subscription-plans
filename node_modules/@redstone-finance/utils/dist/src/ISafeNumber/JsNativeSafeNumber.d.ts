import { ISafeNumber, NumberArg } from "./ISafeNumber";
export declare enum NumberValidationResult {
    isOk = 0,
    isNaN = 1,
    isNotFinite = 2,
    isOverflow = 3,
    isUnderflow = 4
}
export type NumberValidationError = Exclude<NumberValidationResult, NumberValidationResult.isOk>;
export declare const JsNativeSafeNumberConfig: {
    MAX_NUMBER: number;
    MIN_NUMBER: number;
    MAX_DECIMALS: number;
    DIGIT_REGEXP: RegExp;
    ON_NUMBER_VALIDATION_ERROR: Record<NumberValidationError, (msg: string) => unknown>;
    EPSILON: number;
};
export declare class JsNativeSafeNumber implements ISafeNumber {
    static from(numberLike: NumberArg): JsNativeSafeNumber;
    private _value;
    private constructor();
    decimals(): number;
    toString(): string;
    isSafeNumber(): boolean;
    abs(): JsNativeSafeNumber;
    log2(): JsNativeSafeNumber;
    mod(divisor: NumberArg): JsNativeSafeNumber;
    round(): JsNativeSafeNumber;
    add(numberLike: NumberArg): JsNativeSafeNumber;
    sub(numberLike: NumberArg): JsNativeSafeNumber;
    div(numberLike: NumberArg): JsNativeSafeNumber;
    mul(numberLike: NumberArg): JsNativeSafeNumber;
    assertNonNegative(): void;
    assertPositive(): void;
    unsafeToNumber(): number;
    eq(numberArg: NumberArg): boolean;
    lt(numberArg: NumberArg): boolean;
    lte(numberArg: NumberArg): boolean;
    gt(numberArg: NumberArg): boolean;
    gte(numberArg: NumberArg): boolean;
    toJSON(): number;
    private produceNewSafeNumber;
    private assertValidAndRound;
}
//# sourceMappingURL=JsNativeSafeNumber.d.ts.map