"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateDeviationPercent = exports.calculateAverageValue = exports.calculateSum = void 0;
exports.getMedian = getMedian;
const ISafeNumberFactory_1 = require("./ISafeNumberFactory");
const calculateSum = (numbers) => numbers.reduce((prev, curr) => prev.add(curr), ISafeNumberFactory_1.SafeZero);
exports.calculateSum = calculateSum;
const calculateAverageValue = (numbers) => {
    if (numbers.length === 0) {
        throw new Error("Can not calculate an average value for an empty array");
    }
    const result = (0, exports.calculateSum)(numbers).div(numbers.length);
    return result;
};
exports.calculateAverageValue = calculateAverageValue;
const calculateDeviationPercent = (args) => {
    const { baseValue, deviatedValue } = args;
    if (baseValue.eq(0)) {
        return (0, ISafeNumberFactory_1.createSafeNumber)(Number.MAX_SAFE_INTEGER);
    }
    const result = deviatedValue.sub(baseValue).div(baseValue).abs().mul(100);
    return result;
};
exports.calculateDeviationPercent = calculateDeviationPercent;
function getMedian(numbers) {
    if (numbers.length === 0) {
        throw new Error("Cannot get median value of an empty array");
    }
    if (numbers.length === 1) {
        return numbers[0];
    }
    numbers =
        numbers.length === 2 ? numbers : numbers.sort((a, b) => (a.lt(b) ? -1 : 1));
    const middle = Math.floor(numbers.length / 2);
    if (numbers.length % 2 === 0) {
        return numbers[middle].div(2).add(numbers[middle - 1].div(2));
    }
    else {
        return numbers[middle];
    }
}
//# sourceMappingURL=ISafeNumberMath.js.map