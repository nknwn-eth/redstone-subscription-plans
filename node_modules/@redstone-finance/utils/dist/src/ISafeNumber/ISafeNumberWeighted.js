"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeWeightedValues = exports.logarithmicWeighting = exports.getWeightedMedian = void 0;
const ISafeNumberFactory_1 = require("./ISafeNumberFactory");
const ISafeNumberMath_1 = require("./ISafeNumberMath");
const getWeightedMedian = (weightedValues) => {
    if (weightedValues.length === 0) {
        throw new Error("Cannot get weighted median value of an empty array");
    }
    const sortedValues = [...weightedValues].sort((a, b) => a.value.lt(b.value) ? -1 : 1);
    const halfTotalWeight = (0, ISafeNumberMath_1.calculateSum)(sortedValues.map((wv) => wv.weight)).div(2);
    let cumulativeWeight = ISafeNumberFactory_1.SafeZero;
    for (let i = 0; i < sortedValues.length; i++) {
        const weightedValue = sortedValues[i];
        cumulativeWeight = cumulativeWeight.add(weightedValue.weight);
        if (cumulativeWeight.gt(halfTotalWeight)) {
            return weightedValue.value;
        }
        else if (cumulativeWeight.eq(halfTotalWeight)) {
            return weightedValue.value.add(sortedValues[i + 1].value).div(2);
        }
    }
    throw new Error("This should not happen: the accumulated weight did not exceed half of the sum of the weights");
};
exports.getWeightedMedian = getWeightedMedian;
const logarithmicWeighting = (weightedValues) => {
    const medianWeight = (0, ISafeNumberMath_1.getMedian)(weightedValues.map((v) => v.weight));
    return weightedValues.map((weightedValue) => ({
        value: weightedValue.value,
        weight: weightedValue.weight.div(medianWeight).add(1).log2(),
    }));
};
exports.logarithmicWeighting = logarithmicWeighting;
const normalizeWeightedValues = (weightedValues) => {
    const sum = (0, ISafeNumberMath_1.calculateSum)(weightedValues.map((value) => value.weight));
    return weightedValues.map((weightedValue) => ({
        value: weightedValue.value,
        weight: weightedValue.weight.div(sum),
    }));
};
exports.normalizeWeightedValues = normalizeWeightedValues;
//# sourceMappingURL=ISafeNumberWeighted.js.map