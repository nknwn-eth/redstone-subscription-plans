"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Executor = void 0;
const common_1 = require("../common");
const logger_1 = require("../logger");
const logger = (0, logger_1.loggerFactory)("executor");
class Executor {
    logger = logger;
    static getPromises(functions, timeoutMs) {
        const result = functions
            .filter((func) => !func.delegate?.isQuarantined?.(func))
            .map((func) => this.execFn(func, timeoutMs));
        if (!result.length) {
            throw new Error("All functions are quarantined. Cannot execute them!");
        }
        return result;
    }
    static async execFn(func, timeoutMs) {
        const { prefix, message, suffix } = this.makeLogData(func);
        if (func.delegate?.isQuarantined?.(func)) {
            throw new Error(`${prefix} tried to execute quarantined function... ${suffix}`);
        }
        try {
            const result = await (0, common_1.timeoutOrResult)(func.fn(), timeoutMs, "timed out");
            logger.debug(`${message("returns")}: ${(0, common_1.stringify)(result)}${suffix}`);
            func.delegate?.didSucceed?.(func, result);
            return result;
        }
        catch (error) {
            logger.warn(`${message("failed")}: ${(0, common_1.stringifyError)(error)}${suffix}`, error);
            func.delegate?.didFail?.(func, error);
            throw error;
        }
    }
    static makeLogData(func) {
        const date = Date.now();
        const prefix = `[${func.name}] Promise #${func.index}`;
        const message = (result) => `${prefix} ${result} in ${Date.now() - date} [ms]`;
        const suffix = func.description ? ` (${func.description})` : "";
        return { prefix, message, suffix };
    }
}
exports.Executor = Executor;
//# sourceMappingURL=Executor.js.map