import { Executor } from "./Executor";
import { FnDelegate } from "./FnBox";
export declare enum ExecutionMode {
    RACE = "race",
    FALLBACK = "fallback",
    CONSENSUS_MEDIAN = "consensus_median",
    CONSENSUS_ALL_EQUAL = "consensus_all_equal",
    AGREEMENT = "agreement",
    MULTI_AGREEMENT = "multi_agreement"
}
export type NestedMethodConfig<T> = {
    [K in keyof T]?: NestedMethodConfig<T[K]> | (T[K] extends unknown[] ? ExecutionMode : Exclude<ExecutionMode, ExecutionMode.MULTI_AGREEMENT>) | Executor<unknown>;
};
export type MultiExecutorConfig = {
    consensusQuorumRatio: number;
    agreementQuorumNumber: number;
    defaultMode: ExecutionMode;
    singleExecutionTimeoutMs?: number;
    allExecutionsTimeoutMs?: number;
    multiAgreementShouldResolveUnagreedToUndefined: boolean;
} & FnDelegateConfig;
export type FnDelegateConfig = {
    descriptions?: (string | undefined)[];
    delegate?: FnDelegate;
};
export declare const DEFAULT_CONFIG: MultiExecutorConfig;
export declare function makeBaseConfig(fnDelegateConfig: FnDelegateConfig, otherConfig: Partial<MultiExecutorConfig>): MultiExecutorConfig;
//# sourceMappingURL=config.d.ts.map