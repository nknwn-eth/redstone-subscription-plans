"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuarantinedListFnDelegate = void 0;
const curated_list_1 = require("../curated-list");
const MIN_PROVIDER_COUNT = 1;
const MIN_REFRESH_TIME_INTERVAL_MS = 5;
class QuarantinedListFnDelegate {
    curatedList;
    lastListUpdateTimestamp;
    healthyIdentifiers;
    static configCache = {};
    static getCachedConfig(rpcUrls, networkId) {
        const key = [networkId, ...rpcUrls].join("|");
        this.configCache[key] ??= {
            descriptions: rpcUrls,
            delegate: new QuarantinedListFnDelegate(rpcUrls, networkId),
        };
        return this.configCache[key];
    }
    constructor(identifiers, networkId, minimalProvidersCount = MIN_PROVIDER_COUNT) {
        this.lastListUpdateTimestamp = 0;
        this.healthyIdentifiers = identifiers;
        this.curatedList = new curated_list_1.CuratedRpcList({
            rpcIdentifiers: identifiers,
            minimalProvidersCount,
            extendedLogs: true,
        }, networkId);
    }
    didFail(fnBox) {
        if (!fnBox.description) {
            return;
        }
        this.curatedList.scoreRpc(fnBox.description, { error: true });
    }
    didSucceed(fnBox) {
        if (!fnBox.description) {
            return;
        }
        this.curatedList.scoreRpc(fnBox.description, { error: false });
    }
    isQuarantined(fnBox) {
        if (!fnBox.description) {
            return false;
        }
        const healthyIdentifiers = this.getHealthyIdentifiers();
        return !healthyIdentifiers.includes(fnBox.description);
    }
    getHealthyIdentifiers() {
        const now = Date.now();
        if (this.lastListUpdateTimestamp + MIN_REFRESH_TIME_INTERVAL_MS < now) {
            this.healthyIdentifiers = this.curatedList.getBestProviders();
            this.lastListUpdateTimestamp = now;
        }
        return this.healthyIdentifiers;
    }
}
exports.QuarantinedListFnDelegate = QuarantinedListFnDelegate;
//# sourceMappingURL=QuarantinedListFnDelegate.js.map