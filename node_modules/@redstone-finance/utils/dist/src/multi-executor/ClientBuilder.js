"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientBuilder = exports.BLOCK_NUMBER_EXECUTION_TIMEOUT_MS = exports.ALL_EXECUTIONS_TIMEOUT_MS = exports.SINGLE_EXECUTION_TIMEOUT_MS = void 0;
const common_1 = require("../common");
const NetworkId_1 = require("../NetworkId");
const CeilMedianConsensusExecutor_1 = require("./CeilMedianConsensusExecutor");
const config_1 = require("./config");
const create_1 = require("./create");
const QuarantinedListFnDelegate_1 = require("./QuarantinedListFnDelegate");
exports.SINGLE_EXECUTION_TIMEOUT_MS = 7_000;
exports.ALL_EXECUTIONS_TIMEOUT_MS = 30_000;
exports.BLOCK_NUMBER_EXECUTION_TIMEOUT_MS = 1_500;
class ClientBuilder {
    urls = [];
    chainId;
    isQuarantineEnabled = false;
    static blockNumberConsensusExecutor = new CeilMedianConsensusExecutor_1.CeilMedianConsensusExecutor(config_1.DEFAULT_CONFIG.consensusQuorumRatio, exports.BLOCK_NUMBER_EXECUTION_TIMEOUT_MS);
    withNetworkId(networkId) {
        const { chainType, chainId } = (0, NetworkId_1.deconstructNetworkId)(networkId);
        if (chainType !== this.chainType) {
            throw new Error(`Non-${this.chainType} networkId ${networkId} passed to ClientBuilder`);
        }
        return this.withChainId(chainId);
    }
    withChainId(chainId) {
        this.chainId = chainId;
        return this;
    }
    withRpcUrl(url) {
        this.urls.push(url);
        return this;
    }
    withRpcUrls(urls) {
        this.urls.push(...urls);
        return this;
    }
    withQuarantineEnabled(isQuarantineEnabled = true) {
        this.isQuarantineEnabled = isQuarantineEnabled;
        return this;
    }
    makeMultiExecutor(creator, methodConfig, config = {
        singleExecutionTimeoutMs: exports.SINGLE_EXECUTION_TIMEOUT_MS,
        allExecutionsTimeoutMs: exports.ALL_EXECUTIONS_TIMEOUT_MS,
    }) {
        return (0, create_1.create)(this.urls.map(creator), methodConfig, (0, config_1.makeBaseConfig)(this.isQuarantineEnabled && this.chainId
            ? QuarantinedListFnDelegate_1.QuarantinedListFnDelegate.getCachedConfig(this.urls.filter(common_1.isDefined), (0, NetworkId_1.constructNetworkId)(this.chainId, this.chainType))
            : {}, config));
    }
}
exports.ClientBuilder = ClientBuilder;
//# sourceMappingURL=ClientBuilder.js.map