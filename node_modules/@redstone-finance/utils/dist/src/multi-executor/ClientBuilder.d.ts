import { ChainType, NetworkId } from "../NetworkId";
import { CeilMedianConsensusExecutor } from "./CeilMedianConsensusExecutor";
import { NestedMethodConfig } from "./config";
export declare const SINGLE_EXECUTION_TIMEOUT_MS = 7000;
export declare const ALL_EXECUTIONS_TIMEOUT_MS = 30000;
export declare const BLOCK_NUMBER_EXECUTION_TIMEOUT_MS = 1500;
export declare abstract class ClientBuilder<C, URL extends string | undefined = string> {
    protected abstract chainType: ChainType;
    protected urls: URL[];
    protected chainId?: number;
    protected isQuarantineEnabled: boolean;
    static blockNumberConsensusExecutor: CeilMedianConsensusExecutor<number>;
    abstract build(): C;
    withNetworkId(networkId: NetworkId): this;
    withChainId(chainId: number): this;
    withRpcUrl(url: URL): this;
    withRpcUrls(urls: URL[]): this;
    withQuarantineEnabled(isQuarantineEnabled?: boolean): this;
    protected makeMultiExecutor<T extends object>(creator: (url: URL) => T, methodConfig: NestedMethodConfig<T>, config?: {
        singleExecutionTimeoutMs: number;
        allExecutionsTimeoutMs: number;
    }): T;
}
//# sourceMappingURL=ClientBuilder.d.ts.map