"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgreementExecutor = void 0;
const common_1 = require("../common");
const ParallelExecutor_1 = require("./ParallelExecutor");
class AgreementExecutor extends ParallelExecutor_1.ParallelExecutor {
    quorumNumber;
    shouldResolveUnagreedToUndefined;
    constructor(quorumNumber, timeoutMs, shouldResolveUnagreedToUndefined = false) {
        super(timeoutMs);
        this.quorumNumber = quorumNumber;
        this.shouldResolveUnagreedToUndefined = shouldResolveUnagreedToUndefined;
    }
    aggregate(results) {
        const modes = ParallelExecutor_1.ParallelExecutor.getModes(results);
        this.logger.debug(`Found modes: ${(0, common_1.stringify)(modes)}`);
        if (!modes) {
            throw new Error(`That should've never happened but still...: ${(0, common_1.stringify)(modes)}`);
        }
        if (modes.length !== 1) {
            (this.shouldResolveUnagreedToUndefined
                ? this.logger.info
                : this.logger.warn)(`Multiple modes found (shouldResolveUnagreedToUndefined = ${this.shouldResolveUnagreedToUndefined}; were the returning promises sync?): ${(0, common_1.stringify)(modes)}`);
            if (this.shouldResolveUnagreedToUndefined) {
                return undefined;
            }
        }
        return modes[0].item;
    }
    verifySettlements(successfulResults, errorResults, totalLength) {
        const modes = ParallelExecutor_1.ParallelExecutor.getModes(successfulResults);
        const quorum = this.getQuorum(totalLength);
        const maxCount = modes?.[0]?.count ?? 0;
        const isEnough = maxCount >= quorum;
        if (isEnough) {
            return true;
        }
        if (successfulResults.length + errorResults.length < totalLength) {
            this.logger.debug(`Returning, still doesn't have enough of ${quorum} results: ${successfulResults.length} successes + ${errorResults.length} errors`);
            return false;
        }
        this.logger.debug("Successful results:", successfulResults);
        const failedCount = errorResults.length;
        if (this.shouldResolveUnagreedToUndefined) {
            return true;
        }
        throw new Error(`Agreement failed: got max ${maxCount} equal result${(0, common_1.getS)(maxCount)}, ` +
            `needed at least ${quorum}` +
            (failedCount > 0
                ? `; ${(0, common_1.stringifyError)(new AggregateError(errorResults, `${failedCount} fail${(0, common_1.getS)(failedCount)}`))})`
                : ""));
    }
    getQuorum(totalLength) {
        return totalLength <= this.quorumNumber
            ? Math.min(1, this.quorumNumber)
            : this.quorumNumber;
    }
}
exports.AgreementExecutor = AgreementExecutor;
//# sourceMappingURL=AgreementExecutor.js.map