"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sumBy = exports.weightedRandom = exports.filterOutliers = exports.PrecisionScaler = exports.getMedianOfBigNumbers = exports.getMedian = exports.calculateDeviationPercent = exports.calculateSum = exports.castToISafeNumber = void 0;
const decimal_js_1 = __importDefault(require("decimal.js"));
const ethers_1 = require("ethers");
const ISafeNumberMath = __importStar(require("../ISafeNumber"));
const ISafeNumber_1 = require("../ISafeNumber");
const common_1 = require("../common");
__exportStar(require("./monotonic-cubic-spline"), exports);
const castToISafeNumber = (numberLike) => {
    if (typeof numberLike === "string" || typeof numberLike === "number") {
        return (0, ISafeNumber_1.createSafeNumber)(numberLike.toString());
    }
    else if (numberLike instanceof decimal_js_1.default) {
        return (0, ISafeNumber_1.createSafeNumber)(numberLike.toString());
    }
    else if (numberLike instanceof ethers_1.BigNumber) {
        return (0, ISafeNumber_1.createSafeNumber)((0, common_1.bignumberishToDecimal)(numberLike).toString());
    }
    else if (numberLike.isSafeNumber()) {
        return numberLike;
    }
    else {
        throw new Error(`Can not cast ${String(numberLike)} to ISafeNumber`);
    }
};
exports.castToISafeNumber = castToISafeNumber;
const calculateSum = (numbers) => ISafeNumberMath.calculateSum(numbers.map(exports.castToISafeNumber)).unsafeToNumber();
exports.calculateSum = calculateSum;
const calculateDeviationPercent = (args) => ISafeNumberMath.calculateDeviationPercent({
    baseValue: (0, exports.castToISafeNumber)(args.baseValue),
    deviatedValue: (0, exports.castToISafeNumber)(args.deviatedValue),
}).unsafeToNumber();
exports.calculateDeviationPercent = calculateDeviationPercent;
const getMedian = (numbers) => ISafeNumberMath.getMedian(numbers.map(exports.castToISafeNumber)).unsafeToNumber();
exports.getMedian = getMedian;
const getMedianOfBigNumbers = (numbers) => ISafeNumberMath.getMedian(numbers.map(ethers_1.BigNumber.from).map(exports.castToISafeNumber)).unsafeToNumber();
exports.getMedianOfBigNumbers = getMedianOfBigNumbers;
class PrecisionScaler {
    tokenDecimals;
    tokenDecimalsScaler;
    constructor(tokenDecimals) {
        this.tokenDecimals = tokenDecimals;
        this.tokenDecimalsScaler = new decimal_js_1.default(10).pow(tokenDecimals);
    }
    toSolidityValue(floatNumber) {
        return new decimal_js_1.default(floatNumber).mul(this.tokenDecimalsScaler).toString();
    }
    fromSolidityValue(contractValue) {
        return (0, common_1.bignumberishToDecimal)(contractValue).div(this.tokenDecimalsScaler);
    }
}
exports.PrecisionScaler = PrecisionScaler;
const filterOutliers = (numbers, maxDiscrepancy) => {
    if (numbers.length <= 2) {
        return { representativeGroup: [...numbers], outliers: [] };
    }
    const sortedNumbers = [...numbers];
    sortedNumbers.sort((a, b) => a - b);
    let bestGroup = { startIndex: 0, endIndex: 0 };
    for (let startIndex = bestGroup.startIndex; startIndex < sortedNumbers.length; startIndex++) {
        for (let endIndex = sortedNumbers.length; startIndex < endIndex; endIndex--) {
            const firstElementValue = sortedNumbers[startIndex];
            const lastElementValue = sortedNumbers[endIndex - 1];
            if (lastElementValue - firstElementValue < maxDiscrepancy) {
                if (endIndex - startIndex > bestGroup.endIndex - bestGroup.startIndex) {
                    bestGroup = { startIndex, endIndex };
                }
            }
        }
    }
    return {
        representativeGroup: sortedNumbers.slice(bestGroup.startIndex, bestGroup.endIndex),
        outliers: [
            ...sortedNumbers.slice(0, bestGroup.startIndex),
            ...sortedNumbers.slice(bestGroup.endIndex, sortedNumbers.length),
        ],
    };
};
exports.filterOutliers = filterOutliers;
const weightedRandom = (weights) => {
    let totalWeight = 0;
    for (const weight of weights) {
        totalWeight += weight;
    }
    let random = Math.random() * totalWeight;
    for (let i = 0; i < weights.length; i++) {
        random -= weights[i];
        if (random < 0) {
            return i;
        }
    }
    return weights.length - 1;
};
exports.weightedRandom = weightedRandom;
const sumBy = (array, extract) => {
    const numbers = array.map(extract);
    if (numbers.some((number) => typeof number !== "number")) {
        throw new Error("Can't sumBy because after extraction at least one of elements is not number");
    }
    return numbers.reduce((acc, curr) => acc + curr, 0);
};
exports.sumBy = sumBy;
//# sourceMappingURL=index.js.map