import Decimal from "decimal.js";
import { BigNumber, BigNumberish } from "ethers";
import { ISafeNumber } from "../ISafeNumber";
export * from "./monotonic-cubic-spline";
export type ConvertibleToISafeNumber = number | string | Decimal | ISafeNumber | BigNumber;
export declare const castToISafeNumber: (numberLike: ConvertibleToISafeNumber) => ISafeNumber;
export declare const calculateSum: (numbers: ConvertibleToISafeNumber[]) => number;
export declare const calculateDeviationPercent: (args: {
    baseValue: ConvertibleToISafeNumber;
    deviatedValue: ConvertibleToISafeNumber;
}) => number;
export declare const getMedian: (numbers: ConvertibleToISafeNumber[]) => number;
export declare const getMedianOfBigNumbers: (numbers: BigNumberish[]) => number;
export declare class PrecisionScaler {
    readonly tokenDecimals: number;
    readonly tokenDecimalsScaler: Decimal;
    constructor(tokenDecimals: number);
    toSolidityValue(floatNumber: Decimal.Value): string;
    fromSolidityValue(contractValue: BigNumberish): Decimal;
}
export declare const filterOutliers: (numbers: number[], maxDiscrepancy: number) => {
    representativeGroup: number[];
    outliers: number[];
};
export declare const weightedRandom: (weights: number[]) => number;
export declare const sumBy: <T>(array: T[], extract: (item: T) => number) => number;
//# sourceMappingURL=index.d.ts.map