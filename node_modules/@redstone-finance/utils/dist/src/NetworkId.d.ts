import { z } from "zod";
export declare const NonEvmChainTypeEnum: z.ZodEnum<["sui", "movement", "radix", "solana", "fuel", "aptos", "stellar"]>;
export type NonEvmChainType = z.infer<typeof NonEvmChainTypeEnum>;
export declare const ChainTypeEnum: z.ZodEnum<["evm", "sui", "movement", "radix", "solana", "fuel", "aptos", "stellar"]>;
export type ChainType = z.infer<typeof ChainTypeEnum>;
export declare const NetworkIdSchema: z.ZodUnion<[z.ZodNumber, z.ZodEffects<z.ZodPipeline<z.ZodEffects<z.ZodString, string[], string>, z.ZodTuple<[z.ZodEnum<["sui", "movement", "radix", "solana", "fuel", "aptos", "stellar"]>, z.ZodNumber], null>>, `sui/${number}` | `movement/${number}` | `radix/${number}` | `solana/${number}` | `fuel/${number}` | `aptos/${number}` | `stellar/${number}`, string>]>;
export type NetworkId = z.infer<typeof NetworkIdSchema>;
export declare function isEvmNetworkId(networkId: NetworkId): networkId is number;
export declare function isEvmChainType(chainType?: string): chainType is Exclude<ChainType, NonEvmChainType>;
export declare function isNonEvmNetworkId(networkId: NetworkId): networkId is `${NonEvmChainType}/${number}`;
export declare function isNonEvmChainType(chainType?: string): chainType is NonEvmChainType;
export declare function conformsToChainType(left?: ChainType, right?: ChainType): boolean;
export declare function deconstructNetworkId(networkId: NetworkId): {
    chainId: number;
    chainType: ChainType;
};
export declare function constructNetworkId(chainId: number, chainType?: ChainType): NetworkId;
//# sourceMappingURL=NetworkId.d.ts.map