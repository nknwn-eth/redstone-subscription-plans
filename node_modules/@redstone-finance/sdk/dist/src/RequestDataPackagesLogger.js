"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestDataPackagesLogger = void 0;
const utils_1 = require("@redstone-finance/utils");
const request_data_packages_1 = require("./request-data-packages");
class RequestDataPackagesLogger {
    isHistorical;
    logger;
    initialDate;
    particularResponses;
    particularErrors;
    particularTimes;
    constructor(requestsLength, isHistorical, logger = (0, utils_1.loggerFactory)("request-data-packages")) {
        this.isHistorical = isHistorical;
        this.logger = logger;
        this.initialDate = Date.now();
        this.particularResponses = Array.from({ length: requestsLength });
        this.particularErrors = Array.from({ length: requestsLength });
        this.particularTimes = Array.from({ length: requestsLength });
    }
    static filterOutUndefined(array) {
        return array.filter((item) => item !== undefined);
    }
    didReceiveError(error, index) {
        this.particularErrors[index] = error;
        this.particularTimes[index] = Date.now() - this.initialDate;
    }
    didReceiveResponse(response, index) {
        this.particularResponses[index] = response;
        this.particularTimes[index] = Date.now() - this.initialDate;
    }
    willCheckState(timeout, didResolveOrReject) {
        const collectedResponses = RequestDataPackagesLogger.filterOutUndefined(this.particularResponses);
        const particularTimestamps = this.particularTimestamps();
        const collectedErrors = RequestDataPackagesLogger.filterOutUndefined(this.particularErrors);
        (timeout ? this.logger.info : this.logger.debug)(`${timeout ? "Timed out with" : "Checking"} ${collectedResponses.length} response(s) / ${collectedErrors.length} error(s) ` +
            `, didResolveOrReject before: ${didResolveOrReject}`, {
            particularTimestamps,
            particularTimes: this.particularTimes,
            particularErrors: this.particularErrors.map((e) => utils_1.RedstoneCommon.stringifyError(e)),
            collectedResponsesLength: collectedResponses.length,
            collectedErrorsLength: collectedErrors.length,
        });
    }
    willResolve(dataPackagesResponse) {
        const timestampDelta = Date.now() - (0, request_data_packages_1.getResponseTimestamp)(dataPackagesResponse);
        const collectedResponses = RequestDataPackagesLogger.filterOutUndefined(this.particularResponses);
        const particularTimestamps = this.particularTimestamps();
        this.logger.log(`Resolving with the ${this.isHistorical ? "historical" : "newest"} package timestamp: ${(0, request_data_packages_1.getResponseTimestamp)(dataPackagesResponse)} of ${collectedResponses.length} response(s)` +
            `, ${timestampDelta / 1000} [s] ago`, {
            responseTimestamps: particularTimestamps,
            timestampDelta,
            collectedResponsesLength: collectedResponses.length,
            particularTimes: this.particularTimes,
        });
    }
    willReject() {
        this.logger.error("Rejecting...", {
            particularErrors: this.particularErrors.map((e) => utils_1.RedstoneCommon.stringifyError(e)),
        });
    }
    feedIsMissing(message) {
        this.logger.info(message);
    }
    particularTimestamps() {
        return this.particularResponses.map((response) => response ? (0, request_data_packages_1.getResponseTimestamp)(response) : undefined);
    }
}
exports.RequestDataPackagesLogger = RequestDataPackagesLogger;
//# sourceMappingURL=RequestDataPackagesLogger.js.map