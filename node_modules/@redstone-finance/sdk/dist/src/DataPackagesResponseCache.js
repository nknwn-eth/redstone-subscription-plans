"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataPackagesResponseCache = void 0;
exports.isConforming = isConforming;
exports.isSubsetOf = isSubsetOf;
const utils_1 = require("@redstone-finance/utils");
const lodash_1 = __importDefault(require("lodash"));
class DataPackagesResponseCache {
    logger = (0, utils_1.loggerFactory)("data-packages-response-cache");
    response;
    requestParams;
    update(dataPackagesResponse, requestParams) {
        this.response = dataPackagesResponse;
        this.requestParams = requestParams;
        return this;
    }
    isEmpty() {
        return !this.response;
    }
    invalidate() {
        this.response = undefined;
        this.requestParams = undefined;
    }
    get(requestParams, shouldReportMissingResponse = true) {
        if (!this.requestParams || !this.response) {
            if (shouldReportMissingResponse) {
                this.logger.debug("Trying to use cache when there doesn't exist a cached value", {
                    requestParams,
                    cachedRequestParams: this.requestParams,
                    cachedResponse: this.response,
                });
            }
            return undefined;
        }
        const isRequestConformingToTheCachedValue = isConforming(this.requestParams, requestParams, Object.keys(this.response));
        if (!isRequestConformingToTheCachedValue) {
            this.logger.debug("The request params are not conforming to the cached value", {
                requestParams,
                cachedRequestParams: this.requestParams,
                cachedResponse: this.response,
            });
            return undefined;
        }
        return filterDataPackages(this.response, requestParams.dataPackagesIds);
    }
}
exports.DataPackagesResponseCache = DataPackagesResponseCache;
function isConforming(thisRequestParams, otherRequestParams, currentResponseDataPackageIds) {
    const thisComparableRequestParams = makeComparableRequestParams(thisRequestParams);
    const otherComparableRequestParams = makeComparableRequestParams(otherRequestParams);
    if (!lodash_1.default.isEqual(thisComparableRequestParams, otherComparableRequestParams)) {
        return false;
    }
    if (otherRequestParams.ignoreMissingFeed) {
        return true;
    }
    return isSubsetOf(new Set(currentResponseDataPackageIds), new Set(otherRequestParams.dataPackagesIds));
}
function makeComparableRequestParams(requestParams) {
    const { dataServiceId, uniqueSignersCount, authorizedSigners, maxTimestampDeviationMS, historicalTimestamp, ignoreMissingFeed, } = requestParams;
    return {
        dataServiceId,
        uniqueSignersCount,
        authorizedSigners,
        maxTimestampDeviationMS,
        historicalTimestamp,
        ignoreMissingFeed,
    };
}
function filterDataPackages(currentResponse, dataPackageIdsToInclude) {
    if (isSubsetOf(new Set(dataPackageIdsToInclude), new Set(Object.keys(currentResponse)))) {
        return currentResponse;
    }
    return lodash_1.default.pick(currentResponse, dataPackageIdsToInclude);
}
function isSubsetOf(superset, subset) {
    for (const elem of subset) {
        if (!superset.has(elem)) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=DataPackagesResponseCache.js.map