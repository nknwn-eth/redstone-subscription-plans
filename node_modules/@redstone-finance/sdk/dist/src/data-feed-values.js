"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aggregateValues = exports.getDataFeedValues = void 0;
const utils_1 = require("@redstone-finance/utils");
const data_services_urls_1 = require("./data-services-urls");
const oracle_registry_1 = require("./oracle-registry");
const request_data_packages_1 = require("./request-data-packages");
const DEFAULT_DATA_SERVICE_ID = "redstone-main-demo";
const DEFAULT_AGGREGATION_ALGORITHM = "median";
const getDataFeedValues = async (args = {}) => {
    const dataServiceId = args.dataServiceId ?? DEFAULT_DATA_SERVICE_ID;
    const aggregationAlgorithm = args.aggregationAlgorithm ?? DEFAULT_AGGREGATION_ALGORITHM;
    const gatewayUrls = args.gatewayUrls ?? (0, data_services_urls_1.resolveDataServiceUrls)(dataServiceId);
    const packages = await (0, request_data_packages_1.requestDataPackages)({
        dataServiceId,
        uniqueSignersCount: 1,
        authorizedSigners: (0, oracle_registry_1.getSignersForDataServiceId)(dataServiceId),
        urls: gatewayUrls,
        returnAllPackages: true,
        skipSignatureVerification: true,
    });
    const result = {};
    for (const [dataPackageId, dataPackages] of Object.entries(packages)) {
        if (isMultiPointDataPackageId(dataPackageId)) {
            continue;
        }
        const dataFeedId = dataPackageId;
        const plainValues = dataPackages.map((dp) => Number(dp.dataPackage.dataPoints[0].toObj().value));
        result[dataFeedId] = (0, exports.aggregateValues)(plainValues, aggregationAlgorithm);
    }
    return result;
};
exports.getDataFeedValues = getDataFeedValues;
const isMultiPointDataPackageId = (dataPackageId) => dataPackageId.startsWith("__") && dataPackageId.endsWith("__");
const aggregateValues = (plainValues, aggregationAlgorithm) => {
    switch (aggregationAlgorithm) {
        case "max":
            return Math.max(...plainValues);
        case "min":
            return Math.min(...plainValues);
        case "median":
            return utils_1.MathUtils.getMedian(plainValues);
        default:
            return utils_1.RedstoneCommon.throwUnsupportedParamError(aggregationAlgorithm);
    }
};
exports.aggregateValues = aggregateValues;
//# sourceMappingURL=data-feed-values.js.map