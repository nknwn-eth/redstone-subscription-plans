"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractParamsProviderMock = void 0;
const protocol_1 = require("@redstone-finance/protocol");
const lodash_1 = __importDefault(require("lodash"));
const ContractParamsProvider_1 = require("./ContractParamsProvider");
class ContractParamsProviderMock extends ContractParamsProvider_1.ContractParamsProvider {
    filePath;
    fileReader;
    overriddenFeedIds;
    constructor(dataFeeds, filePath, fileReader, uniqueSignersCount = 0) {
        super({
            uniqueSignersCount,
            dataServiceId: "",
            dataPackagesIds: dataFeeds,
            authorizedSigners: [],
        });
        this.filePath = filePath;
        this.fileReader = fileReader;
    }
    copyForFeedIds(dataFeeds) {
        return new ContractParamsProviderMock(dataFeeds, this.filePath, this.fileReader, this.requestParams.uniqueSignersCount);
    }
    copyWithOverriddenFeedIds(dataFeeds) {
        return new ContractParamsProviderMock(dataFeeds, this.filePath, this.fileReader, this.requestParams.uniqueSignersCount);
    }
    requestPayload() {
        return Promise.resolve(this.fileReader(this.filePath).toString());
    }
    getDataFeedIds() {
        return this.overriddenFeedIds ?? super.getDataFeedIds();
    }
    async requestDataPackages(_canUpdateCache) {
        const parsedPayload = new protocol_1.RedstonePayloadParser(Buffer.from(await this.requestPayload(), "hex")).parse();
        return lodash_1.default.groupBy(parsedPayload.signedDataPackages, (sdp) => sdp.dataPackage.dataPackageId);
    }
}
exports.ContractParamsProviderMock = ContractParamsProviderMock;
//# sourceMappingURL=ContractParamsProviderMock.js.map