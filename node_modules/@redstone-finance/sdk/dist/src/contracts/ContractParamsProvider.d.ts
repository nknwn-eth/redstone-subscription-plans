import { BytesLike } from "@ethersproject/bytes";
import { RedstoneLogger } from "@redstone-finance/utils";
import { DataPackagesRequestParams, DataPackagesResponseCache } from "../index";
export declare const DEFAULT_COMPONENT_NAME = "data-packages-wrapper";
export type SplitPayloads<T> = {
    [p: string]: T;
};
type UnsignedMetadataArgs = {
    withUnsignedMetadata: boolean;
    metadataTimestamp?: number;
    componentName?: string;
};
export declare class ContractParamsProvider {
    readonly requestParams: DataPackagesRequestParams;
    private readonly cache?;
    private readonly overrideRequestParamsPackagesIds?;
    constructor(requestParams: DataPackagesRequestParams, cache?: DataPackagesResponseCache | undefined, overrideRequestParamsPackagesIds?: string[] | undefined);
    copyForFeedId(feedId: string): ContractParamsProvider;
    copyWithOverriddenFeedIds(feedIds: string[]): ContractParamsProvider;
    copyForFeedIds(feedIds: string[]): ContractParamsProvider;
    static hexlifyFeedIds(feedIds: string[], allowMissingPrefix?: boolean, padRightSize?: number): string[];
    static unhexlifyFeedId(hexlifiedFeedId: BytesLike): string;
    getPayloadHex(withPrefix?: boolean, unsignedMetadataArgs?: UnsignedMetadataArgs): Promise<string>;
    getPayloadData(unsignedMetadataArgs?: UnsignedMetadataArgs): Promise<number[]>;
    getHexlifiedFeedIds(allowMissingPrefix?: boolean, padRightSize?: number): string[];
    getDataFeedIds(): string[];
    requestDataPackages(canUpdateCache?: boolean): Promise<import("../request-data-packages").DataPackagesResponse>;
    protected performRequestingDataPackages(): Promise<import("../request-data-packages").DataPackagesResponse>;
    protected requestPayload(unsignedMetadataArgs?: UnsignedMetadataArgs): Promise<string>;
    prepareSplitPayloads(unsignedMetadataArgs?: UnsignedMetadataArgs): Promise<SplitPayloads<string | undefined>>;
    static extractMissingValues<K>(payloads: SplitPayloads<K | undefined>, logger?: RedstoneLogger): {
        missingFeedIds: string[];
        payloads: SplitPayloads<K>;
    };
    static getUnsignedMetadata(args?: UnsignedMetadataArgs): string | undefined;
}
export {};
//# sourceMappingURL=ContractParamsProvider.d.ts.map