"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.redstoneOraclesInitialState = exports.requestRedstonePayload = exports.convertDataPackagesResponse = exports.getDecimalsForDataFeedId = void 0;
const protocol_1 = require("@redstone-finance/protocol");
const initial_state_json_1 = __importDefault(require("./registry/initial-state.json"));
Object.defineProperty(exports, "redstoneOraclesInitialState", { enumerable: true, get: function () { return initial_state_json_1.default; } });
const request_data_packages_1 = require("./request-data-packages");
const getDecimalsForDataFeedId = (dataPackages) => {
    const firstDecimal = dataPackages[0].dataPoints[0]
        .decimals;
    const areAllDecimalsEqual = dataPackages.every((dataPackage) => dataPackage.dataPoints.every((dataPoint) => dataPoint.decimals === firstDecimal));
    if (!areAllDecimalsEqual) {
        throw new Error("Decimals from data points in data packages are not equal");
    }
    return firstDecimal;
};
exports.getDecimalsForDataFeedId = getDecimalsForDataFeedId;
const convertDataPackagesResponse = (signedDataPackagesResponse, format = "hex", unsignedMetadataMsg) => {
    const signedDataPackages = Object.values(signedDataPackagesResponse).flat();
    const payload = new protocol_1.RedstonePayload(signedDataPackages, unsignedMetadataMsg ?? "");
    switch (format) {
        case "json":
            return JSON.stringify(payload.toObj(), null, 2);
        case "bytes":
            return JSON.stringify(Array.from(payload.toBytes()));
        default:
            return payload.toBytesHexWithout0xPrefix();
    }
};
exports.convertDataPackagesResponse = convertDataPackagesResponse;
const requestRedstonePayload = async (reqParams, format = "hex", unsignedMetadataMsg) => {
    const signedDataPackagesResponse = await (0, request_data_packages_1.requestDataPackages)(reqParams);
    return (0, exports.convertDataPackagesResponse)(signedDataPackagesResponse, format, unsignedMetadataMsg);
};
exports.requestRedstonePayload = requestRedstonePayload;
__exportStar(require("./contracts/ContractData"), exports);
__exportStar(require("./contracts/ContractParamsProvider"), exports);
__exportStar(require("./contracts/ContractParamsProviderMock"), exports);
__exportStar(require("./contracts/IContractConnector"), exports);
__exportStar(require("./contracts/prices/IPriceFeedContractAdapter"), exports);
__exportStar(require("./contracts/prices/IPricesContractAdapter"), exports);
__exportStar(require("./contracts/prices/sample-run"), exports);
__exportStar(require("./data-feed-values"), exports);
__exportStar(require("./data-services-urls"), exports);
__exportStar(require("./DataPackagesResponseCache"), exports);
__exportStar(require("./oracle-registry"), exports);
__exportStar(require("./pick-closest-to-median"), exports);
__exportStar(require("./request-data-packages"), exports);
//# sourceMappingURL=index.js.map