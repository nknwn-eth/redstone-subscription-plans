import { SignedDataPackage } from "@redstone-finance/protocol";
import { z } from "zod";
export declare const HISTORICAL_DATA_PACKAGES_DENOMINATOR_MS = 10000;
type DataPackagesRequestParamsInternal = {
    dataServiceId: string;
    dataPackagesIds?: string[];
    returnAllPackages?: boolean;
    uniqueSignersCount: number;
    waitForAllGatewaysTimeMs?: number;
    maxTimestampDeviationMS?: number;
    authorizedSigners: string[];
    skipSignatureVerification?: boolean;
    urls?: string[];
    historicalTimestamp?: number;
    ignoreMissingFeed?: boolean;
    enableEnhancedLogs?: boolean;
    disableMedianSelection?: boolean;
    hideMetadata?: boolean;
    aggregateErrors?: boolean;
};
type DataPackagesQuery = {
    dataPackagesIds: string[];
    returnAllPackages?: false;
} | {
    dataPackagesIds?: never;
    returnAllPackages: true;
};
export type DataPackagesRequestParams = DataPackagesRequestParamsInternal & DataPackagesQuery;
export interface DataPackagesResponse {
    [dataPackageId: string]: SignedDataPackage[] | undefined;
}
export interface ValuesForDataFeeds {
    [dataFeedId: string]: bigint | undefined;
}
export declare enum DataFeedPackageErrorType {
    MissingDataFeed = "MissingDataFeed",
    NoDataPackages = "NoDataPackages",
    TooFewSigners = "TooFewSigners"
}
export declare class DataFeedPackageError extends Error {
    dataFeedId: string;
    errorType: DataFeedPackageErrorType;
    constructor(message: string, dataFeedId: string, errorType: DataFeedPackageErrorType);
}
export declare const SignedDataPackageSchema: z.ZodObject<{
    dataPoints: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        dataFeedId: z.ZodString;
        value: z.ZodNumber;
        decimals: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        dataFeedId: string;
        value: number;
        decimals?: number | undefined;
    }, {
        dataFeedId: string;
        value: number;
        decimals?: number | undefined;
    }>, z.ZodObject<{
        dataFeedId: z.ZodString;
        value: z.ZodString;
        decimals: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        dataFeedId: string;
        value: string;
        decimals?: number | undefined;
    }, {
        dataFeedId: string;
        value: string;
        decimals?: number | undefined;
    }>]>, "many">;
    timestampMilliseconds: z.ZodNumber;
    signature: z.ZodString;
    signerAddress: z.ZodOptional<z.ZodString>;
    dataPackageId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    dataPoints: ({
        dataFeedId: string;
        value: number;
        decimals?: number | undefined;
    } | {
        dataFeedId: string;
        value: string;
        decimals?: number | undefined;
    })[];
    timestampMilliseconds: number;
    signature: string;
    dataPackageId: string;
    signerAddress?: string | undefined;
}, {
    dataPoints: ({
        dataFeedId: string;
        value: number;
        decimals?: number | undefined;
    } | {
        dataFeedId: string;
        value: string;
        decimals?: number | undefined;
    })[];
    timestampMilliseconds: number;
    signature: string;
    dataPackageId: string;
    signerAddress?: string | undefined;
}>;
declare const GwResponseSchema: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
    dataPoints: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        dataFeedId: z.ZodString;
        value: z.ZodNumber;
        decimals: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        dataFeedId: string;
        value: number;
        decimals?: number | undefined;
    }, {
        dataFeedId: string;
        value: number;
        decimals?: number | undefined;
    }>, z.ZodObject<{
        dataFeedId: z.ZodString;
        value: z.ZodString;
        decimals: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        dataFeedId: string;
        value: string;
        decimals?: number | undefined;
    }, {
        dataFeedId: string;
        value: string;
        decimals?: number | undefined;
    }>]>, "many">;
    timestampMilliseconds: z.ZodNumber;
    signature: z.ZodString;
    signerAddress: z.ZodOptional<z.ZodString>;
    dataPackageId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    dataPoints: ({
        dataFeedId: string;
        value: number;
        decimals?: number | undefined;
    } | {
        dataFeedId: string;
        value: string;
        decimals?: number | undefined;
    })[];
    timestampMilliseconds: number;
    signature: string;
    dataPackageId: string;
    signerAddress?: string | undefined;
}, {
    dataPoints: ({
        dataFeedId: string;
        value: number;
        decimals?: number | undefined;
    } | {
        dataFeedId: string;
        value: string;
        decimals?: number | undefined;
    })[];
    timestampMilliseconds: number;
    signature: string;
    dataPackageId: string;
    signerAddress?: string | undefined;
}>, "many">>;
export type GwResponse = Partial<z.infer<typeof GwResponseSchema>>;
export declare const calculateHistoricalPackagesTimestamp: (deviationCheckOffsetInMilliseconds: number, baseTimestamp?: number, denominator?: number) => number | undefined;
export declare const requestDataPackages: (reqParams: DataPackagesRequestParams) => Promise<DataPackagesResponse>;
export declare const getResponseTimestamp: (response: DataPackagesResponse) => number;
export declare const getDataPackagesTimestamp: (dataPackages: DataPackagesResponse, dataFeedId?: string) => number;
export declare const checkAndGetSameTimestamp: (dataPackages: SignedDataPackage[]) => number;
export declare const extractSignedDataPackagesForFeedId: (dataPackages: DataPackagesResponse, dataFeedId?: string) => SignedDataPackage[];
export declare function convertToHistoricalDataPackagesRequestParams(requestParams: DataPackagesRequestParams, config: {
    fallbackOffsetInMilliseconds: number;
    historicalPackagesGateways?: string[];
}, latestDataPackagesTimestamp?: number, baseTimestamp?: number): {
    historicalTimestamp: number;
    urls: string[];
    dataServiceId: string;
    dataPackagesIds: string[];
    returnAllPackages?: false | undefined;
    uniqueSignersCount: number;
    waitForAllGatewaysTimeMs?: number;
    maxTimestampDeviationMS?: number;
    authorizedSigners: string[];
    skipSignatureVerification?: boolean;
    ignoreMissingFeed?: boolean;
    enableEnhancedLogs?: boolean;
    disableMedianSelection?: boolean;
    hideMetadata?: boolean;
    aggregateErrors?: boolean;
} | {
    historicalTimestamp: number;
    urls: string[];
    dataServiceId: string;
    dataPackagesIds?: undefined;
    returnAllPackages: true;
    uniqueSignersCount: number;
    waitForAllGatewaysTimeMs?: number;
    maxTimestampDeviationMS?: number;
    authorizedSigners: string[];
    skipSignatureVerification?: boolean;
    ignoreMissingFeed?: boolean;
    enableEnhancedLogs?: boolean;
    disableMedianSelection?: boolean;
    hideMetadata?: boolean;
    aggregateErrors?: boolean;
};
export {};
//# sourceMappingURL=request-data-packages.d.ts.map