"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDataServiceIdForSigner = exports.getOracleRegistryStateSync = exports.getOracleRegistryState = exports.EXTERNAL_SIGNERS_CUTOFF_DATE = void 0;
exports.getSignersForDataServiceId = getSignersForDataServiceId;
const initial_state_json_1 = __importDefault(require("./registry/initial-state.json"));
exports.EXTERNAL_SIGNERS_CUTOFF_DATE = new Date("2024-01-02").getTime();
const getOracleRegistryState = async () => {
    return await Promise.resolve(initial_state_json_1.default);
};
exports.getOracleRegistryState = getOracleRegistryState;
const getOracleRegistryStateSync = () => initial_state_json_1.default;
exports.getOracleRegistryStateSync = getOracleRegistryStateSync;
const getDataServiceIdForSigner = (oracleState, signerAddress) => {
    for (const nodeDetails of Object.values(oracleState.nodes)) {
        if (nodeDetails.evmAddress.toLowerCase() === signerAddress.toLowerCase()) {
            return nodeDetails.dataServiceId;
        }
    }
    throw new Error(`Data service not found for ${signerAddress}`);
};
exports.getDataServiceIdForSigner = getDataServiceIdForSigner;
const preloadedSigners = new Map();
Object.keys(initial_state_json_1.default.dataServices).forEach((dataServiceId) => {
    const internalSigners = Object.values(initial_state_json_1.default.nodes)
        .filter((node) => node.dataServiceId === dataServiceId &&
        new Date(node.dateAdded).getTime() < exports.EXTERNAL_SIGNERS_CUTOFF_DATE)
        .map((node) => node.evmAddress);
    const allSigners = Object.values(initial_state_json_1.default.nodes)
        .filter((node) => node.dataServiceId === dataServiceId)
        .map((node) => node.evmAddress);
    preloadedSigners.set(dataServiceId, {
        internal: internalSigners,
        all: allSigners,
    });
});
function getSignersForDataServiceId(dataServiceId, allowExternalSigners = false) {
    const cached = preloadedSigners.get(dataServiceId);
    if (!cached) {
        throw new Error(`No signers found for data service id: ${dataServiceId}`);
    }
    const signers = allowExternalSigners ? cached.all : cached.internal;
    if (signers.length === 0) {
        throw new Error(`No ${allowExternalSigners ? "" : "internal"} signers found for: ${dataServiceId}`);
    }
    return signers;
}
//# sourceMappingURL=oracle-registry.js.map