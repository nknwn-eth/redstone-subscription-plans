"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pickDataFeedPackagesClosestToMedian = void 0;
const protocol_1 = require("@redstone-finance/protocol");
const utils_1 = require("@redstone-finance/utils");
const lodash_1 = __importDefault(require("lodash"));
const pickDataFeedPackagesClosestToMedian = (dataFeedPackages, count) => {
    const allValues = getAllValues(dataFeedPackages);
    const allMedians = lodash_1.default.mapValues(allValues, utils_1.MathUtils.getMedian);
    return sortByDistanceFromMedian(dataFeedPackages, allMedians)
        .map((diff) => protocol_1.SignedDataPackage.fromObj(diff.dp))
        .slice(0, count);
};
exports.pickDataFeedPackagesClosestToMedian = pickDataFeedPackagesClosestToMedian;
const getMaxDistanceFromMedian = (dataPackage, medians) => {
    let maxDistanceFromMedian = 0;
    for (const dataPoint of dataPackage.dataPoints) {
        maxDistanceFromMedian = Math.max(maxDistanceFromMedian, utils_1.SafeNumber.createSafeNumber(dataPoint.value)
            .sub(medians[dataPoint.dataFeedId])
            .abs()
            .div(medians[dataPoint.dataFeedId])
            .unsafeToNumber());
    }
    return maxDistanceFromMedian;
};
function sortByDistanceFromMedian(dataFeedPackages, medians) {
    return dataFeedPackages
        .map((dp) => ({
        dp,
        diff: getMaxDistanceFromMedian(dp, medians),
    }))
        .sort((first, second) => first.diff - second.diff);
}
const getAllValues = (dataPackages) => {
    const allValues = {};
    for (const dataPackage of dataPackages) {
        for (const dataPoint of dataPackage.dataPoints) {
            allValues[dataPoint.dataFeedId] ??= [];
            allValues[dataPoint.dataFeedId].push(Number(dataPoint.value));
        }
    }
    return allValues;
};
//# sourceMappingURL=pick-closest-to-median.js.map