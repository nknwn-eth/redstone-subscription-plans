"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataServiceWrapper = void 0;
const sdk_1 = require("@redstone-finance/sdk");
const utils_1 = require("@redstone-finance/utils");
const package_json_1 = require("../../package.json");
const BaseWrapper_1 = require("./BaseWrapper");
class DataServiceWrapper extends BaseWrapper_1.BaseWrapper {
    dataPackagesRequestParams;
    constructor(dataPackagesRequestParams) {
        super();
        this.dataPackagesRequestParams = dataPackagesRequestParams;
    }
    getUnsignedMetadata() {
        return `${this.getMetadataTimestamp()}#${package_json_1.version}#${this.dataPackagesRequestParams.dataServiceId}`;
    }
    async getDataPackagesForPayload() {
        const dataPackagesRequestParams = await this.resolveDataPackagesRequestParams();
        const dpResponse = await (0, sdk_1.requestDataPackages)(dataPackagesRequestParams);
        return Object.values(dpResponse).flat();
    }
    async resolveDataPackagesRequestParams() {
        const fetchedParams = {
            ...this.dataPackagesRequestParams,
        };
        if (!this.dataPackagesRequestParams.uniqueSignersCount) {
            fetchedParams.uniqueSignersCount =
                await this.getUniqueSignersThresholdFromContract();
        }
        if (!this.dataPackagesRequestParams.dataServiceId) {
            fetchedParams.dataServiceId = await this.getDataServiceIdFromContract();
        }
        if (!this.dataPackagesRequestParams.urls) {
            fetchedParams.urls = (0, sdk_1.resolveDataServiceUrls)(fetchedParams.dataServiceId ??
                this.dataPackagesRequestParams.dataServiceId);
        }
        return fetchedParams;
    }
    async getDataServiceIdFromContract() {
        try {
            const dataServiceId = (await this.contract.getDataServiceId());
            return dataServiceId;
        }
        catch (e) {
            throw new Error(`DataServiceId not provided and failed to get it from underlying contract. Error: ` +
                utils_1.RedstoneCommon.stringifyError(e));
        }
    }
    async getUniqueSignersThresholdFromContract() {
        try {
            return (await this.contract.getUniqueSignersThreshold());
        }
        catch (e) {
            throw new Error(`UniqueSignersCount not provided and failed to get it from underlying contract. Error: ` +
                utils_1.RedstoneCommon.stringifyError(e));
        }
    }
}
exports.DataServiceWrapper = DataServiceWrapper;
//# sourceMappingURL=DataServiceWrapper.js.map