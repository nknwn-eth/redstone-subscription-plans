import { SignedDataPackage } from "@redstone-finance/protocol";
import { DataPackagesRequestParams } from "@redstone-finance/sdk";
import { Contract } from "ethers";
import { BaseWrapper } from "./BaseWrapper";
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
export type DataPackagesRequestInput = WithRequired<Partial<DataPackagesRequestParams>, "dataPackagesIds" | "authorizedSigners">;
export declare class DataServiceWrapper<T extends Contract> extends BaseWrapper<T> {
    private readonly dataPackagesRequestParams;
    constructor(dataPackagesRequestParams: DataPackagesRequestInput);
    getUnsignedMetadata(): string;
    getDataPackagesForPayload(): Promise<SignedDataPackage[]>;
    private resolveDataPackagesRequestParams;
    private getDataServiceIdFromContract;
    private getUniqueSignersThresholdFromContract;
}
export {};
//# sourceMappingURL=DataServiceWrapper.d.ts.map