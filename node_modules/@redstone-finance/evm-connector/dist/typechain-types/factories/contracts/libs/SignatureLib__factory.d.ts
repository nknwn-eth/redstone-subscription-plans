import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SignatureLib, SignatureLibInterface } from "../../../contracts/libs/SignatureLib";
type SignatureLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SignatureLib__factory extends ContractFactory {
    constructor(...args: SignatureLibConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SignatureLib>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SignatureLib;
    connect(signer: Signer): SignatureLib__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209a5d986b517d4da83a92e022cfeeff2b3c3096bdf404077166200d48a4e028e264736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "signedHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidSignature";
        readonly type: "error";
    }];
    static createInterface(): SignatureLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SignatureLib;
}
export {};
//# sourceMappingURL=SignatureLib__factory.d.ts.map