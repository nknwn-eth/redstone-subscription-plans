import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { RedstoneConsumerBytesMock, RedstoneConsumerBytesMockInterface } from "../../../contracts/mocks/RedstoneConsumerBytesMock";
type RedstoneConsumerBytesMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class RedstoneConsumerBytesMock__factory extends ContractFactory {
    constructor(...args: RedstoneConsumerBytesMockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<RedstoneConsumerBytesMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): RedstoneConsumerBytesMock;
    connect(signer: Signer): RedstoneConsumerBytesMock__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610fb2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063b24ebfcc11610076578063d22158fa1161005b578063d22158fa14610168578063f50b2efe1461017b578063f90c49241461019057600080fd5b8063b24ebfcc1461014d578063c274583a1461016057600080fd5b8063429989f0116100a7578063429989f01461011157806355a547d51461012457806395262d9f1461013a57600080fd5b806313bc58db146100c35780633ce142f5146100ec575b600080fd5b6100d66100d1366004610cf7565b610197565b6040516100e39190610e37565b60405180910390f35b6100ff6100fa366004610e4a565b6102e9565b60405160ff90911681526020016100e3565b6100ff61011f366004610e4a565b6102fa565b61012c6107bf565b6040519081526020016100e3565b6100ff610148366004610e4a565b610918565b61012c61015b366004610cf7565b610923565b6100d6610936565b6100ff610176366004610e4a565b61096a565b61018e610189366004610e80565b6109f0565b005b60036100ff565b606060008251116101d4576040517f6c2325dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3660006101fa846000815181106101ed576101ed610e99565b6020026020010151610a33565b9150915060008282604051610210929190610ec8565b604051908190039020905060015b85518110156102a85736600061023f8884815181106101ed576101ed610e99565b91509150838282604051610254929190610ec8565b604051809103902014610293576040517fece458ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505080806102a090610f07565b91505061021e565b5082828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509298975050505050505050565b60006102f482610918565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821673f39fd6e51aad88f6f4ce6ab8827279cfffb922660361033557506000919050565b73ffffffffffffffffffffffffffffffffffffffff82167370997970c51812dc3a010c7d01b50e0d17dc79c80361036e57506001919050565b73ffffffffffffffffffffffffffffffffffffffff8216733c44cdddb6a900fa2b585dd299e03d12fa4293bc036103a757506002919050565b73ffffffffffffffffffffffffffffffffffffffff82167390f79bf6eb2c4f870365e785982e1f101e93b906036103e057506003919050565b73ffffffffffffffffffffffffffffffffffffffff82167315d34aaf54267db7d7c367839aaf71a00a2c6a650361041957506004919050565b73ffffffffffffffffffffffffffffffffffffffff8216739965507d1a55bcc2695c58ba16fb37d819b0a4dc0361045257506005919050565b73ffffffffffffffffffffffffffffffffffffffff821673976ea74026e726554db657fa54763abd0c3a0aa90361048b57506006919050565b73ffffffffffffffffffffffffffffffffffffffff82167314dc79964da2c08b23698b3d3cc7ca32193d9955036104c457506007919050565b73ffffffffffffffffffffffffffffffffffffffff82167323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f036104fd57506008919050565b73ffffffffffffffffffffffffffffffffffffffff821673a0ee7a142d267c1f36714e4a8f75612f20a797200361053657506009919050565b73ffffffffffffffffffffffffffffffffffffffff821673bcd4042de499d14e55001ccbb24a551f3b9540960361056f5750600a919050565b73ffffffffffffffffffffffffffffffffffffffff82167371be63f3384f5fb98995898a86b02fb2426c5788036105a85750600b919050565b73ffffffffffffffffffffffffffffffffffffffff821673fabb0ac9d68b0b445fb7357272ff202c5651694a036105e15750600c919050565b73ffffffffffffffffffffffffffffffffffffffff8216731cbd3b2770909d4e10f157cabc84c7264073c9ec0361061a5750600d919050565b73ffffffffffffffffffffffffffffffffffffffff821673df3e18d64bc6a983f673ab319ccae4f1a57c7097036106535750600e919050565b73ffffffffffffffffffffffffffffffffffffffff821673cd3b766ccdd6ae721141f452c550ca635964ce710361068c5750600f919050565b73ffffffffffffffffffffffffffffffffffffffff8216732546bcd3c84621e976d8185a91a922ae77ecec30036106c557506010919050565b73ffffffffffffffffffffffffffffffffffffffff821673bda5747bfd65f08deb54cb465eb87d40e51b197e036106fe57506011919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd2fd4581271e230360230f9337d5c0430bf44c00361073757506012919050565b73ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c11990361077057506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806107ca610aa3565b905060006107d782610bd1565b925061ffff169050600081900361081a576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561091257600061083084610c39565b9050600080610840606887610f3f565b9050600061084e8236610f52565b9050803592508265ffffffffffff16600003610896576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876000036108ae578265ffffffffffff1697506108ef565b878365ffffffffffff16146108ef576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108f98488610f3f565b965050505050808061090a90610f07565b91505061081d565b50505090565b60006102f48261096a565b60008061092f83610197565b9392505050565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c1199036109e7576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016107b6565b6102f4826102fa565b6501812f2590c0811015610a30576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b36600080610a418460801c90565b90506fffffffffffffffffffffffffffffffff841636610a618284610f3f565b1115610a99576040517fb0e86e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9094909350915050565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610b0b576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610b48576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610b81600362ffffff8516610f3f565b610b8b9190610f3f565b905036610b99600283610f3f565b111561092f576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080610be0602085610f3f565b905036811115610c1c576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3681900335925082610c2f600286610f3f565b9250925050915091565b6000806000610c4784610c75565b9092509050604e610c59826020610f3f565b610c639084610f65565b610c6d9190610f3f565b949350505050565b6000808080806020610c88604188610f3f565b610c929190610f3f565b610c9c9036610f52565b803593509050610cad600382610f52565b62ffffff9390931696923563ffffffff169550919350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020808385031215610d0a57600080fd5b823567ffffffffffffffff80821115610d2257600080fd5b818501915085601f830112610d3657600080fd5b813581811115610d4857610d48610cc8565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610d8b57610d8b610cc8565b604052918252848201925083810185019188831115610da957600080fd5b938501935b82851015610dc757843584529385019392850192610dae565b98975050505050505050565b6000815180845260005b81811015610df957602081850181015186830182015201610ddd565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061092f6020830184610dd3565b600060208284031215610e5c57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461092f57600080fd5b600060208284031215610e9257600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f3857610f38610ed8565b5060010190565b808201808211156102f4576102f4610ed8565b818103818111156102f4576102f4610ed8565b80820281158282048414176102f4576102f4610ed856fea2646970667358221220e8506352a00142b8bd1b1806a7ca3d8a1240f16155377b597b5d1c0138188bac64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataTimestampCannotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampIsNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "valueByteSize";
            readonly type: "uint256";
        }];
        readonly name: "TooLargeValueByteSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersForValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateByteValues";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersToValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "pointerToResultBytesInMemory";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockExceptLastOneAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedMockSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): RedstoneConsumerBytesMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): RedstoneConsumerBytesMock;
}
export {};
//# sourceMappingURL=RedstoneConsumerBytesMock__factory.d.ts.map