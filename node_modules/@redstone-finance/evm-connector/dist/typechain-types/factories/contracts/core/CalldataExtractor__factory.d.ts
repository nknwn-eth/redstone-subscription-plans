import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { CalldataExtractor, CalldataExtractorInterface } from "../../../contracts/core/CalldataExtractor";
type CalldataExtractorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class CalldataExtractor__factory extends ContractFactory {
    constructor(...args: CalldataExtractorConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<CalldataExtractor>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): CalldataExtractor;
    connect(signer: Signer): CalldataExtractor__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506104af806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806355a547d514610030575b600080fd5b61003861004a565b60405190815260200160405180910390f35b6000806100556101a3565b90506000610062826102d8565b925061ffff16905060008190036100a5576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561019d5760006100bb84610340565b90506000806100cb6068876103fe565b905060006100d98236610417565b9050803592508265ffffffffffff16600003610121576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87600003610139578265ffffffffffff16975061017a565b878365ffffffffffff161461017a576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61018484886103fe565b96505050505080806101959061042a565b9150506100a8565b50505090565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601358116148061020b576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610248576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610281600362ffffff85166103fe565b61028b91906103fe565b9050366102996002836103fe565b11156102d1576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b600080806102e76020856103fe565b905036811115610323576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36819003359250826103366002866103fe565b9250925050915091565b600080600061034e8461037c565b9092509050604e6103608260206103fe565b61036a9084610462565b61037491906103fe565b949350505050565b600080808080602061038f6041886103fe565b61039991906103fe565b6103a39036610417565b8035935090506103b4600382610417565b62ffffff9390931696923563ffffffff169550919350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610411576104116103cf565b92915050565b81810381811115610411576104116103cf565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361045b5761045b6103cf565b5060010190565b8082028115828204841417610411576104116103cf56fea26469706673582212206f1b7a28779c1422ef8c33a661aebbda65ffff8dc7cbdf5d80a3ae717cc5d8f264736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataTimestampCannotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "valueByteSize";
            readonly type: "uint256";
        }];
        readonly name: "TooLargeValueByteSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): CalldataExtractorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): CalldataExtractor;
}
export {};
//# sourceMappingURL=CalldataExtractor__factory.d.ts.map