import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SampleRedstoneConsumerNumericMockManyDataFeeds, SampleRedstoneConsumerNumericMockManyDataFeedsInterface } from "../../../contracts/samples/SampleRedstoneConsumerNumericMockManyDataFeeds";
type SampleRedstoneConsumerNumericMockManyDataFeedsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SampleRedstoneConsumerNumericMockManyDataFeeds__factory extends ContractFactory {
    constructor(...args: SampleRedstoneConsumerNumericMockManyDataFeedsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SampleRedstoneConsumerNumericMockManyDataFeeds>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SampleRedstoneConsumerNumericMockManyDataFeeds;
    connect(signer: Signer): SampleRedstoneConsumerNumericMockManyDataFeeds__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50611ad2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806395262d9f11610097578063d22158fa11610066578063d22158fa146101cb578063f4afad24146101de578063f50b2efe146101f1578063f90c49241461020457600080fd5b806395262d9f1461017d578063b24ebfcc14610190578063c274583a146101a3578063c7f32d88146101b857600080fd5b806355a547d5116100d357806355a547d51461014e5780637a45ddfe146101565780637a7a28811461015f5780637b94ce291461017457600080fd5b80632cfed611146100fa5780633ce142f514610116578063429989f01461013b575b600080fd5b61010360015481565b6040519081526020015b60405180910390f35b610129610124366004611687565b61020b565b60405160ff909116815260200161010d565b610129610149366004611687565b61021c565b6101036106e1565b61010360025481565b61017261016d366004611709565b61083a565b005b61010360005481565b61012961018b366004611687565b6108c1565b61010361019e36600461177a565b6108cc565b6101ab6108d7565b60405161010d9190611856565b6101726101c6366004611709565b61090b565b6101296101d9366004611687565b610998565b6101726101ec3660046118c2565b610a1e565b6101726101ff366004611959565b610a2e565b600a610129565b6000610216826108c1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821673f39fd6e51aad88f6f4ce6ab8827279cfffb922660361025757506000919050565b73ffffffffffffffffffffffffffffffffffffffff82167370997970c51812dc3a010c7d01b50e0d17dc79c80361029057506001919050565b73ffffffffffffffffffffffffffffffffffffffff8216733c44cdddb6a900fa2b585dd299e03d12fa4293bc036102c957506002919050565b73ffffffffffffffffffffffffffffffffffffffff82167390f79bf6eb2c4f870365e785982e1f101e93b9060361030257506003919050565b73ffffffffffffffffffffffffffffffffffffffff82167315d34aaf54267db7d7c367839aaf71a00a2c6a650361033b57506004919050565b73ffffffffffffffffffffffffffffffffffffffff8216739965507d1a55bcc2695c58ba16fb37d819b0a4dc0361037457506005919050565b73ffffffffffffffffffffffffffffffffffffffff821673976ea74026e726554db657fa54763abd0c3a0aa9036103ad57506006919050565b73ffffffffffffffffffffffffffffffffffffffff82167314dc79964da2c08b23698b3d3cc7ca32193d9955036103e657506007919050565b73ffffffffffffffffffffffffffffffffffffffff82167323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f0361041f57506008919050565b73ffffffffffffffffffffffffffffffffffffffff821673a0ee7a142d267c1f36714e4a8f75612f20a797200361045857506009919050565b73ffffffffffffffffffffffffffffffffffffffff821673bcd4042de499d14e55001ccbb24a551f3b954096036104915750600a919050565b73ffffffffffffffffffffffffffffffffffffffff82167371be63f3384f5fb98995898a86b02fb2426c5788036104ca5750600b919050565b73ffffffffffffffffffffffffffffffffffffffff821673fabb0ac9d68b0b445fb7357272ff202c5651694a036105035750600c919050565b73ffffffffffffffffffffffffffffffffffffffff8216731cbd3b2770909d4e10f157cabc84c7264073c9ec0361053c5750600d919050565b73ffffffffffffffffffffffffffffffffffffffff821673df3e18d64bc6a983f673ab319ccae4f1a57c7097036105755750600e919050565b73ffffffffffffffffffffffffffffffffffffffff821673cd3b766ccdd6ae721141f452c550ca635964ce71036105ae5750600f919050565b73ffffffffffffffffffffffffffffffffffffffff8216732546bcd3c84621e976d8185a91a922ae77ecec30036105e757506010919050565b73ffffffffffffffffffffffffffffffffffffffff821673bda5747bfd65f08deb54cb465eb87d40e51b197e0361062057506011919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd2fd4581271e230360230f9337d5c0430bf44c00361065957506012919050565b73ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c11990361069257506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806106ec610a71565b905060006106f982610ba6565b925061ffff169050600081900361073c576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561083457600061075284610c0e565b90506000806107626068876119a1565b9050600061077082366119b4565b9050803592508265ffffffffffff166000036107b8576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876000036107d0578265ffffffffffff169750610811565b878365ffffffffffff1614610811576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61081b84886119a1565b965050505050808061082c906119c7565b91505061073f565b50505090565b6000610878838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610c4a92505050565b90508060008151811061088d5761088d6119ff565b6020026020010151600081905550806001815181106108ae576108ae6119ff565b6020026020010151600181905550505050565b600061021682610998565b600061021682610c6c565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061094a848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610c7792505050565b9150915081600081518110610961576109616119ff565b602002602001015160008190555081600181518110610982576109826119ff565b6020908102919091010151600155600255505050565b600073ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c119903610a15576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016106d8565b6102168261021c565b610a28848461083a565b50505050565b6501812f2590c0811015610a6e576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610ad9576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610b16576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610b4f600362ffffff85166119a1565b610b5991906119a1565b905036610b676002836119a1565b1115610b9f576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b60008080610bb56020856119a1565b905036811115610bf1576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3681900335925082610c046002866119a1565b9250925050915091565b6000806000610c1c84610c8d565b9092509050604e610c2e8260206119a1565b610c389084611a2e565b610c4291906119a1565b949350505050565b6060600080610c5884610ce0565b91509150610c6581610a2e565b5092915050565b600061021682610f2d565b60606000610c8483610ce0565b91509150915091565b6000808080806020610ca06041886119a1565b610caa91906119a1565b610cb490366119b4565b803593509050610cc56003826119b4565b62ffffff9390931696923563ffffffff169550919350505050565b6060600080835167ffffffffffffffff811115610cff57610cff61174b565b604051908082528060200260200182016040528015610d28578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610d4757610d4761174b565b604051908082528060200260200182016040528015610d70578160200160208202803683370190505b5090506000855167ffffffffffffffff811115610d8f57610d8f61174b565b604051908082528060200260200182016040528015610dc257816020015b6060815260200190600190039081610dad5790505b509050600a60005b8751811015610e3b578167ffffffffffffffff811115610dec57610dec61174b565b604051908082528060200260200182016040528015610e15578160200160208202803683370190505b50838281518110610e2857610e286119ff565b6020908102919091010152600101610dca565b506000610e46610a71565b90506000610e5382610ba6565b60405190935061ffff909116915060005b82811015610f14576000610e7b8c8a8a8a8961106a565b90955090506000819003610ebb576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b898114610f045789600003610ed257809950610f04565b6040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060208201604052600101610e64565b50610f1f8588611313565b985050505050505050915091565b60008151600203610f8457600282600181518110610f4d57610f4d6119ff565b602002602001015183600081518110610f6857610f686119ff565b6020026020010151610f7a91906119a1565b6102169190611a74565b8151600003610fbf576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fc88261143b565b600060028351610fd89190611a74565b905060028351610fe89190611a88565b600003611048576000838281518110611003576110036119ff565b60200260200101518460018461101991906119b4565b81518110611029576110296119ff565b602002602001015161103b91906119a1565b9050610c42600282611a74565b82818151811061105a5761105a6119ff565b6020026020010151915050919050565b600080600080600061107b86610c8d565b909250905060008060608180600d6110946020886119a1565b61109e9089611a2e565b6110a891906119a1565b915060006110b760688d6119a1565b6110c190366119b4565b90506000836110d160418f6119a1565b6110db91906119a1565b6110e590366119b4565b90506110f18482611104565b9450836020860120955081359250611146565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b8265ffffffffffff169a506111678660418f61116291906119a1565b611483565b96506111728761020b565b60ff16995050505050505050604e8661118b91906119a1565b955060008060005b848110156113005760206111a7858b6119a1565b6111b191906119a1565b98506111bd898561161b565b909350915060005b8d518110156112f7578d81815181106111e0576111e06119ff565b602002602001015184036112ef5760008c8281518110611202576112026119ff565b6020026020010151905061121b81896001901b16151590565b1580156112445750600a60ff168e838151811061123a5761123a6119ff565b6020026020010151105b156112e957838c838151811061125c5761125c6119ff565b60200260200101518f8481518110611276576112766119ff565b60200260200101518151811061128e5761128e6119ff565b6020026020010181815250508d82815181106112ac576112ac6119ff565b6020026020010180518091906112c1906119c7565b9052506001881b81178d83815181106112dc576112dc6119ff565b6020026020010181815250505b506112f7565b6001016111c5565b50600101611193565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff8111156113315761133161174b565b60405190808252806020026020018201604052801561135a578160200160208202803683370190505b509050600a60005b8551811015611431578185828151811061137e5761137e6119ff565b602002602001015110156113e45784818151811061139e5761139e6119ff565b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016106d8929190918252602082015260400190565b60006114088783815181106113fb576113fb6119ff565b60200260200101516108cc565b90508084838151811061141d5761141d6119ff565b602090810291909101015250600101611362565b5090949350505050565b8051602082016020820281019150805b82811015610a2857815b8181101561147a578151815180821015611470578084528183525b5050602001611455565b5060200161144b565b60003682900380359060208101359060400135831a601b81148015906114ad575060ff8116601c14155b156114e7576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016106d8565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611544576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016106d8565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015611597573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015194505073ffffffffffffffffffffffffffffffffffffffff8416611612576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016106d8565b50505092915050565b6000808061162985366119b4565b9050803592506020810135915060218410611673576040517fc000fc42000000000000000000000000000000000000000000000000000000008152600481018590526024016106d8565b8360200360080282901c9150509250929050565b60006020828403121561169957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b9f57600080fd5b60008083601f8401126116cf57600080fd5b50813567ffffffffffffffff8111156116e757600080fd5b6020830191508360208260051b850101111561170257600080fd5b9250929050565b6000806020838503121561171c57600080fd5b823567ffffffffffffffff81111561173357600080fd5b61173f858286016116bd565b90969095509350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561178d57600080fd5b823567ffffffffffffffff808211156117a557600080fd5b818501915085601f8301126117b957600080fd5b8135818111156117cb576117cb61174b565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561180e5761180e61174b565b60405291825284820192508381018501918883111561182c57600080fd5b938501935b8285101561184a57843584529385019392850192611831565b98975050505050505050565b600060208083528351808285015260005b8181101561188357858101830151858201604001528201611867565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600080600080604085870312156118d857600080fd5b843567ffffffffffffffff808211156118f057600080fd5b6118fc888389016116bd565b9096509450602087013591508082111561191557600080fd5b818701915087601f83011261192957600080fd5b81358181111561193857600080fd5b88602082850101111561194a57600080fd5b95989497505060200194505050565b60006020828403121561196b57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561021657610216611972565b8181038181111561021657610216611972565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119f8576119f8611972565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761021657610216611972565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611a8357611a83611a45565b500490565b600082611a9757611a97611a45565b50069056fea2646970667358221220313905c42ed9ca1d2d24f70c1c196ddb41e206543a42669a78e5fc92ac8d042c64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CanNotPickMedianOfEmptyArray";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataTimestampCannotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "signedHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampIsNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "valueByteSize";
            readonly type: "uint256";
        }];
        readonly name: "TooLargeValueByteSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "firstValue";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockExceptLastOneAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedMockSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "save2ValuesAndTimestampInStorage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "save2ValuesInStorage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "save2ValuesInStorageWithManualPayload";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "secondValue";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "timestampFromData";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): SampleRedstoneConsumerNumericMockManyDataFeedsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SampleRedstoneConsumerNumericMockManyDataFeeds;
}
export {};
//# sourceMappingURL=SampleRedstoneConsumerNumericMockManyDataFeeds__factory.d.ts.map