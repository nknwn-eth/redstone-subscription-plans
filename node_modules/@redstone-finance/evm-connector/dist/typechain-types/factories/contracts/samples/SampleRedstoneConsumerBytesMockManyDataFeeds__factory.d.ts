import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SampleRedstoneConsumerBytesMockManyDataFeeds, SampleRedstoneConsumerBytesMockManyDataFeedsInterface } from "../../../contracts/samples/SampleRedstoneConsumerBytesMockManyDataFeeds";
type SampleRedstoneConsumerBytesMockManyDataFeedsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SampleRedstoneConsumerBytesMockManyDataFeeds__factory extends ContractFactory {
    constructor(...args: SampleRedstoneConsumerBytesMockManyDataFeedsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SampleRedstoneConsumerBytesMockManyDataFeeds>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SampleRedstoneConsumerBytesMockManyDataFeeds;
    connect(signer: Signer): SampleRedstoneConsumerBytesMockManyDataFeeds__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50611aa3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80637b94ce291161008c578063c274583a11610066578063c274583a146101a6578063d22158fa146101ae578063f50b2efe146101c1578063f90c4924146101d457600080fd5b80637b94ce291461017857806395262d9f14610180578063b24ebfcc1461019357600080fd5b8063429989f0116100bd578063429989f01461013a57806355a547d51461014d5780637a7a28811461016357600080fd5b806313bc58db146100e45780632cfed6111461010d5780633ce142f514610115575b600080fd5b6100f76100f2366004611611565b6101db565b6040516101049190611715565b60405180910390f35b6100f761032d565b610128610123366004611728565b6103bb565b60405160ff9091168152602001610104565b610128610148366004611728565b6103cc565b610155610891565b604051908152602001610104565b61017661017136600461175e565b6109ea565b005b6100f7610a83565b61012861018e366004611728565b610a90565b6101556101a1366004611611565b610a9b565b6100f7610aae565b6101286101bc366004611728565b610ae2565b6101766101cf3660046117d3565b610b68565b6003610128565b60606000825111610218576040517f6c2325dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36600061023e84600081518110610231576102316117ec565b6020026020010151610bab565b915091506000828260405161025492919061181b565b604051908190039020905060015b85518110156102ec57366000610283888481518110610231576102316117ec565b9150915083828260405161029892919061181b565b6040518091039020146102d7576040517fece458ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505080806102e49061185a565b915050610262565b5082828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509298975050505050505050565b6001805461033a90611892565b80601f016020809104026020016040519081016040528092919081815260200182805461036690611892565b80156103b35780601f10610388576101008083540402835291602001916103b3565b820191906000526020600020905b81548152906001019060200180831161039657829003601f168201915b505050505081565b60006103c682610a90565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821673f39fd6e51aad88f6f4ce6ab8827279cfffb922660361040757506000919050565b73ffffffffffffffffffffffffffffffffffffffff82167370997970c51812dc3a010c7d01b50e0d17dc79c80361044057506001919050565b73ffffffffffffffffffffffffffffffffffffffff8216733c44cdddb6a900fa2b585dd299e03d12fa4293bc0361047957506002919050565b73ffffffffffffffffffffffffffffffffffffffff82167390f79bf6eb2c4f870365e785982e1f101e93b906036104b257506003919050565b73ffffffffffffffffffffffffffffffffffffffff82167315d34aaf54267db7d7c367839aaf71a00a2c6a65036104eb57506004919050565b73ffffffffffffffffffffffffffffffffffffffff8216739965507d1a55bcc2695c58ba16fb37d819b0a4dc0361052457506005919050565b73ffffffffffffffffffffffffffffffffffffffff821673976ea74026e726554db657fa54763abd0c3a0aa90361055d57506006919050565b73ffffffffffffffffffffffffffffffffffffffff82167314dc79964da2c08b23698b3d3cc7ca32193d99550361059657506007919050565b73ffffffffffffffffffffffffffffffffffffffff82167323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f036105cf57506008919050565b73ffffffffffffffffffffffffffffffffffffffff821673a0ee7a142d267c1f36714e4a8f75612f20a797200361060857506009919050565b73ffffffffffffffffffffffffffffffffffffffff821673bcd4042de499d14e55001ccbb24a551f3b954096036106415750600a919050565b73ffffffffffffffffffffffffffffffffffffffff82167371be63f3384f5fb98995898a86b02fb2426c57880361067a5750600b919050565b73ffffffffffffffffffffffffffffffffffffffff821673fabb0ac9d68b0b445fb7357272ff202c5651694a036106b35750600c919050565b73ffffffffffffffffffffffffffffffffffffffff8216731cbd3b2770909d4e10f157cabc84c7264073c9ec036106ec5750600d919050565b73ffffffffffffffffffffffffffffffffffffffff821673df3e18d64bc6a983f673ab319ccae4f1a57c7097036107255750600e919050565b73ffffffffffffffffffffffffffffffffffffffff821673cd3b766ccdd6ae721141f452c550ca635964ce710361075e5750600f919050565b73ffffffffffffffffffffffffffffffffffffffff8216732546bcd3c84621e976d8185a91a922ae77ecec300361079757506010919050565b73ffffffffffffffffffffffffffffffffffffffff821673bda5747bfd65f08deb54cb465eb87d40e51b197e036107d057506011919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd2fd4581271e230360230f9337d5c0430bf44c00361080957506012919050565b73ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c11990361084257506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b60008061089c610c1b565b905060006108a982610d2b565b925061ffff16905060008190036108ec576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156109e457600061090284610d93565b90506000806109126068876118e5565b9050600061092082366118f8565b9050803592508265ffffffffffff16600003610968576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87600003610980578265ffffffffffff1697506109c1565b878365ffffffffffff16146109c1576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109cb84886118e5565b96505050505080806109dc9061185a565b9150506108ef565b50505090565b6000610a28838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610dcf92505050565b905080600081518110610a3d57610a3d6117ec565b602002602001015160009081610a53919061195a565b5080600181518110610a6757610a676117ec565b602002602001015160019081610a7d919061195a565b50505050565b6000805461033a90611892565b60006103c682610ae2565b600080610aa7836101db565b9392505050565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c119903610b5f576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610888565b6103c6826103cc565b6501812f2590c0811015610ba8576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b36600080610bb98460801c90565b90506fffffffffffffffffffffffffffffffff841636610bd982846118e5565b1115610c11576040517fb0e86e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9094909350915050565b60006602ed57011e0000601f1936013581161480610c65576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610ca2576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610cdb600362ffffff85166118e5565b610ce591906118e5565b905036610cf36002836118e5565b1115610aa7576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080610d3a6020856118e5565b905036811115610d76576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3681900335925082610d896002866118e5565b9250925050915091565b6000806000610da184610df1565b9092509050604e610db38260206118e5565b610dbd9084611a56565b610dc791906118e5565b949350505050565b6060600080610ddd84610e44565b91509150610dea81610b68565b5092915050565b6000808080806020610e046041886118e5565b610e0e91906118e5565b610e1890366118f8565b803593509050610e296003826118f8565b62ffffff9390931696923563ffffffff169550919350505050565b6060600080835167ffffffffffffffff811115610e6357610e636115e2565b604051908082528060200260200182016040528015610e8c578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610eab57610eab6115e2565b604051908082528060200260200182016040528015610ed4578160200160208202803683370190505b5090506000855167ffffffffffffffff811115610ef357610ef36115e2565b604051908082528060200260200182016040528015610f2657816020015b6060815260200190600190039081610f115790505b509050600360005b8751811015610f9f578167ffffffffffffffff811115610f5057610f506115e2565b604051908082528060200260200182016040528015610f79578160200160208202803683370190505b50838281518110610f8c57610f8c6117ec565b6020908102919091010152600101610f2e565b506000610faa610c1b565b90506000610fb782610d2b565b60405190935061ffff909116915060005b82811015611078576000610fdf8c8a8a8a89611091565b9095509050600081900361101f576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b898114611068578960000361103657809950611068565b6040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060208201604052600101610fc8565b50611083858861131c565b985050505050505050915091565b60008060008060006110a286610df1565b909250905060008060608180600d6110bb6020886118e5565b6110c59089611a56565b6110cf91906118e5565b915060006110de60688d6118e5565b6110e890366118f8565b90506000836110f860418f6118e5565b61110291906118e5565b61110c90366118f8565b9050611118848261112b565b945083602086012095508135925061114f565b60408051838152602081850181019092526000910183838237601f19019392505050565b8265ffffffffffff169a506111708660418f61116b91906118e5565b611444565b965061117b876103bb565b60ff16995050505050505050604e8661119491906118e5565b955060008060005b848110156113095760206111b0858b6118e5565b6111ba91906118e5565b98506111c689856115be565b909350915060005b8d51811015611300578d81815181106111e9576111e96117ec565b602002602001015184036112f85760008c828151811061120b5761120b6117ec565b6020026020010151905061122481896001901b16151590565b15801561124d5750600360ff168e8381518110611243576112436117ec565b6020026020010151105b156112f257838c8381518110611265576112656117ec565b60200260200101518f848151811061127f5761127f6117ec565b602002602001015181518110611297576112976117ec565b6020026020010181815250508d82815181106112b5576112b56117ec565b6020026020010180518091906112ca9061185a565b9052506001881b81178d83815181106112e5576112e56117ec565b6020026020010181815250505b50611300565b6001016111ce565b5060010161119c565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff81111561133a5761133a6115e2565b604051908082528060200260200182016040528015611363578160200160208202803683370190505b509050600360005b855181101561143a5781858281518110611387576113876117ec565b602002602001015110156113ed578481815181106113a7576113a76117ec565b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401610888929190918252602082015260400190565b6000611411878381518110611404576114046117ec565b6020026020010151610a9b565b905080848381518110611426576114266117ec565b60209081029190910101525060010161136b565b5090949350505050565b60003682900380359060208101359060400135831a601b811480159061146e575060ff8116601c14155b156114a8576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610888565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611505576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610888565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015611558573d6000803e3d6000fd5b5050604051601f19015194505073ffffffffffffffffffffffffffffffffffffffff84166115b5576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610888565b50505092915050565b600080806115cc85366118f8565b803596602090910160801b949094179450505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561162457600080fd5b823567ffffffffffffffff8082111561163c57600080fd5b818501915085601f83011261165057600080fd5b813581811115611662576116626115e2565b8060051b604051601f19603f83011681018181108582111715611687576116876115e2565b6040529182528482019250838101850191888311156116a557600080fd5b938501935b828510156116c3578435845293850193928501926116aa565b98975050505050505050565b6000815180845260005b818110156116f5576020818501810151868301820152016116d9565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610aa760208301846116cf565b60006020828403121561173a57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610aa757600080fd5b6000806020838503121561177157600080fd5b823567ffffffffffffffff8082111561178957600080fd5b818501915085601f83011261179d57600080fd5b8135818111156117ac57600080fd5b8660208260051b85010111156117c157600080fd5b60209290920196919550909350505050565b6000602082840312156117e557600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361188b5761188b61182b565b5060010190565b600181811c908216806118a657607f821691505b6020821081036118df577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b808201808211156103c6576103c661182b565b818103818111156103c6576103c661182b565b601f82111561195557600081815260208120601f850160051c810160208610156119325750805b601f850160051c820191505b818110156119515782815560010161193e565b5050505b505050565b815167ffffffffffffffff811115611974576119746115e2565b611988816119828454611892565b8461190b565b602080601f8311600181146119db57600084156119a55750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555611951565b600085815260208120601f198616915b82811015611a0a578886015182559484019460019091019084016119eb565b5085821015611a4657878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b80820281158282048414176103c6576103c661182b56fea2646970667358221220263fa84bfaccb2db165e29c7fb7b897be92f528a61c6cc997b6d90bed5f099f564736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataTimestampCannotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "signedHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampIsNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "valueByteSize";
            readonly type: "uint256";
        }];
        readonly name: "TooLargeValueByteSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersForValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateByteValues";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersToValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "pointerToResultBytesInMemory";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "firstValue";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockExceptLastOneAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedMockSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "save2ValuesInStorage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "secondValue";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): SampleRedstoneConsumerBytesMockManyDataFeedsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SampleRedstoneConsumerBytesMockManyDataFeeds;
}
export {};
//# sourceMappingURL=SampleRedstoneConsumerBytesMockManyDataFeeds__factory.d.ts.map