import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SampleRedstoneConsumerBytesMock, SampleRedstoneConsumerBytesMockInterface } from "../../../contracts/samples/SampleRedstoneConsumerBytesMock";
type SampleRedstoneConsumerBytesMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SampleRedstoneConsumerBytesMock__factory extends ContractFactory {
    constructor(...args: SampleRedstoneConsumerBytesMockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SampleRedstoneConsumerBytesMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SampleRedstoneConsumerBytesMock;
    connect(signer: Signer): SampleRedstoneConsumerBytesMock__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061198a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806395262d9f1161008c578063c3e5b9c811610066578063c3e5b9c8146101a7578063d22158fa146101ba578063f50b2efe146101cd578063f90c4924146101e057600080fd5b806395262d9f14610179578063b24ebfcc1461018c578063c274583a1461019f57600080fd5b8063429989f0116100bd578063429989f01461014757806355a547d51461015a5780635ddf81ba1461017057600080fd5b806313bc58db146100e45780633ce142f51461010d5780633d60fee314610132575b600080fd5b6100f76100f23660046116c4565b6101e7565b60405161010491906117c8565b60405180910390f35b61012061011b3660046117db565b6102e1565b60405160ff9091168152602001610104565b610145610140366004611811565b6102f2565b005b6101206101553660046117db565b610316565b6101626107db565b604051908152602001610104565b61016260005481565b6101206101873660046117db565b610934565b61016261019a3660046116c4565b61093f565b6100f7610952565b6101626101b5366004611811565b610986565b6101206101c83660046117db565b6109a9565b6101456101db366004611811565b610a2f565b6003610120565b60606000825167ffffffffffffffff81111561020557610205611695565b60405190808252806020026020018201604052801561022e578160200160208202803683370190505b50905060005b83518110156102a5573660006102628684815181106102555761025561182a565b6020026020010151610a72565b9092509050813560088202610100031c8484815181106102845761028461182a565b6020026020010181815250505050808061029d90611888565b915050610234565b5060006102b182610ae2565b90506000816040516020016102c891815260200190565b60408051601f1981840301815291905295945050505050565b60006102ec82610934565b92915050565b60006102fd82610c27565b80516020820151919250600802610100031c6000555050565b600073ffffffffffffffffffffffffffffffffffffffff821673f39fd6e51aad88f6f4ce6ab8827279cfffb922660361035157506000919050565b73ffffffffffffffffffffffffffffffffffffffff82167370997970c51812dc3a010c7d01b50e0d17dc79c80361038a57506001919050565b73ffffffffffffffffffffffffffffffffffffffff8216733c44cdddb6a900fa2b585dd299e03d12fa4293bc036103c357506002919050565b73ffffffffffffffffffffffffffffffffffffffff82167390f79bf6eb2c4f870365e785982e1f101e93b906036103fc57506003919050565b73ffffffffffffffffffffffffffffffffffffffff82167315d34aaf54267db7d7c367839aaf71a00a2c6a650361043557506004919050565b73ffffffffffffffffffffffffffffffffffffffff8216739965507d1a55bcc2695c58ba16fb37d819b0a4dc0361046e57506005919050565b73ffffffffffffffffffffffffffffffffffffffff821673976ea74026e726554db657fa54763abd0c3a0aa9036104a757506006919050565b73ffffffffffffffffffffffffffffffffffffffff82167314dc79964da2c08b23698b3d3cc7ca32193d9955036104e057506007919050565b73ffffffffffffffffffffffffffffffffffffffff82167323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f0361051957506008919050565b73ffffffffffffffffffffffffffffffffffffffff821673a0ee7a142d267c1f36714e4a8f75612f20a797200361055257506009919050565b73ffffffffffffffffffffffffffffffffffffffff821673bcd4042de499d14e55001ccbb24a551f3b9540960361058b5750600a919050565b73ffffffffffffffffffffffffffffffffffffffff82167371be63f3384f5fb98995898a86b02fb2426c5788036105c45750600b919050565b73ffffffffffffffffffffffffffffffffffffffff821673fabb0ac9d68b0b445fb7357272ff202c5651694a036105fd5750600c919050565b73ffffffffffffffffffffffffffffffffffffffff8216731cbd3b2770909d4e10f157cabc84c7264073c9ec036106365750600d919050565b73ffffffffffffffffffffffffffffffffffffffff821673df3e18d64bc6a983f673ab319ccae4f1a57c70970361066f5750600e919050565b73ffffffffffffffffffffffffffffffffffffffff821673cd3b766ccdd6ae721141f452c550ca635964ce71036106a85750600f919050565b73ffffffffffffffffffffffffffffffffffffffff8216732546bcd3c84621e976d8185a91a922ae77ecec30036106e157506010919050565b73ffffffffffffffffffffffffffffffffffffffff821673bda5747bfd65f08deb54cb465eb87d40e51b197e0361071a57506011919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd2fd4581271e230360230f9337d5c0430bf44c00361075357506012919050565b73ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c11990361078c57506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806107e6610c88565b905060006107f382610d98565b925061ffff1690506000819003610836576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561092e57600061084c84610e00565b905060008061085c6068876118c0565b9050600061086a82366118d3565b9050803592508265ffffffffffff166000036108b2576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876000036108ca578265ffffffffffff16975061090b565b878365ffffffffffff161461090b576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61091584886118c0565b965050505050808061092690611888565b915050610839565b50505090565b60006102ec826109a9565b60008061094b836101e7565b9392505050565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061099283610c27565b80516020820151919250600802610100031c61094b565b600073ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c119903610a26576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016107d2565b6102ec82610316565b6501812f2590c0811015610a6f576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b36600080610a808460801c90565b90506fffffffffffffffffffffffffffffffff841636610aa082846118c0565b1115610ad8576040517fb0e86e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9094909350915050565b60008151600203610b3957600282600181518110610b0257610b0261182a565b602002602001015183600081518110610b1d57610b1d61182a565b6020026020010151610b2f91906118c0565b6102ec9190611915565b8151600003610b74576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b7d82610e34565b600060028351610b8d9190611915565b905060028351610b9d9190611929565b600003610c05576000838281518110610bb857610bb861182a565b602002602001015184600184610bce91906118d3565b81518110610bde57610bde61182a565b6020026020010151610bf091906118c0565b9050610bfd600282611915565b949350505050565b828181518110610c1757610c1761182a565b6020026020010151915050919050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610c6157610c6161182a565b602002602001018181525050610c7681610e82565b600081518110610c1757610c1761182a565b60006602ed57011e0000601f1936013581161480610cd2576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610d0f576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610d48600362ffffff85166118c0565b610d5291906118c0565b905036610d606002836118c0565b111561094b576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080610da76020856118c0565b905036811115610de3576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3681900335925082610df66002866118c0565b9250925050915091565b6000806000610e0e84610ea4565b9092509050604e610e208260206118c0565b610e2a908461193d565b610bfd91906118c0565b8051602082016020820281019150805b82811015610e7c57815b81811015610e73578151815180821015610e69578084528183525b5050602001610e4e565b50602001610e44565b50505050565b6060600080610e9084610ef7565b91509150610e9d81610a2f565b5092915050565b6000808080806020610eb76041886118c0565b610ec191906118c0565b610ecb90366118d3565b803593509050610edc6003826118d3565b62ffffff9390931696923563ffffffff169550919350505050565b6060600080835167ffffffffffffffff811115610f1657610f16611695565b604051908082528060200260200182016040528015610f3f578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610f5e57610f5e611695565b604051908082528060200260200182016040528015610f87578160200160208202803683370190505b5090506000855167ffffffffffffffff811115610fa657610fa6611695565b604051908082528060200260200182016040528015610fd957816020015b6060815260200190600190039081610fc45790505b509050600360005b8751811015611052578167ffffffffffffffff81111561100357611003611695565b60405190808252806020026020018201604052801561102c578160200160208202803683370190505b5083828151811061103f5761103f61182a565b6020908102919091010152600101610fe1565b50600061105d610c88565b9050600061106a82610d98565b60405190935061ffff909116915060005b8281101561112b5760006110928c8a8a8a89611144565b909550905060008190036110d2576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b89811461111b57896000036110e95780995061111b565b6040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506020820160405260010161107b565b5061113685886113cf565b985050505050505050915091565b600080600080600061115586610ea4565b909250905060008060608180600d61116e6020886118c0565b611178908961193d565b61118291906118c0565b9150600061119160688d6118c0565b61119b90366118d3565b90506000836111ab60418f6118c0565b6111b591906118c0565b6111bf90366118d3565b90506111cb84826111de565b9450836020860120955081359250611202565b60408051838152602081850181019092526000910183838237601f19019392505050565b8265ffffffffffff169a506112238660418f61121e91906118c0565b6114f7565b965061122e876102e1565b60ff16995050505050505050604e8661124791906118c0565b955060008060005b848110156113bc576020611263858b6118c0565b61126d91906118c0565b98506112798985611671565b909350915060005b8d518110156113b3578d818151811061129c5761129c61182a565b602002602001015184036113ab5760008c82815181106112be576112be61182a565b602002602001015190506112d781896001901b16151590565b1580156113005750600360ff168e83815181106112f6576112f661182a565b6020026020010151105b156113a557838c83815181106113185761131861182a565b60200260200101518f84815181106113325761133261182a565b60200260200101518151811061134a5761134a61182a565b6020026020010181815250508d82815181106113685761136861182a565b60200260200101805180919061137d90611888565b9052506001881b81178d83815181106113985761139861182a565b6020026020010181815250505b506113b3565b600101611281565b5060010161124f565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff8111156113ed576113ed611695565b604051908082528060200260200182016040528015611416578160200160208202803683370190505b509050600360005b85518110156114ed578185828151811061143a5761143a61182a565b602002602001015110156114a05784818151811061145a5761145a61182a565b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016107d2929190918252602082015260400190565b60006114c48783815181106114b7576114b761182a565b602002602001015161093f565b9050808483815181106114d9576114d961182a565b60209081029190910101525060010161141e565b5090949350505050565b60003682900380359060208101359060400135831a601b8114801590611521575060ff8116601c14155b1561155b576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016107d2565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156115b8576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016107d2565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa15801561160b573d6000803e3d6000fd5b5050604051601f19015194505073ffffffffffffffffffffffffffffffffffffffff8416611668576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016107d2565b50505092915050565b6000808061167f85366118d3565b803596602090910160801b949094179450505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156116d757600080fd5b823567ffffffffffffffff808211156116ef57600080fd5b818501915085601f83011261170357600080fd5b81358181111561171557611715611695565b8060051b604051601f19603f8301168101818110858211171561173a5761173a611695565b60405291825284820192508381018501918883111561175857600080fd5b938501935b828510156117765784358452938501939285019261175d565b98975050505050505050565b6000815180845260005b818110156117a85760208185018101518683018201520161178c565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061094b6020830184611782565b6000602082840312156117ed57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461094b57600080fd5b60006020828403121561182357600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118b9576118b9611859565b5060010190565b808201808211156102ec576102ec611859565b818103818111156102ec576102ec611859565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611924576119246118e6565b500490565b600082611938576119386118e6565b500690565b80820281158282048414176102ec576102ec61185956fea2646970667358221220d79caed78ba2d064f52bb933d2488633487f18497abe4db5a104386a91abb59e64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CanNotPickMedianOfEmptyArray";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataTimestampCannotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "signedHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampIsNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "valueByteSize";
            readonly type: "uint256";
        }];
        readonly name: "TooLargeValueByteSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersForValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateByteValues";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersToValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "pointerToResultBytesInMemory";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockExceptLastOneAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedMockSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly name: "getValueSecurely";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestSavedValue";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly name: "saveOracleValueInContractStorage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): SampleRedstoneConsumerBytesMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SampleRedstoneConsumerBytesMock;
}
export {};
//# sourceMappingURL=SampleRedstoneConsumerBytesMock__factory.d.ts.map