import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SampleRedstoneDataServiceConsumerMock, SampleRedstoneDataServiceConsumerMockInterface } from "../../../contracts/samples/SampleRedstoneDataServiceConsumerMock";
type SampleRedstoneDataServiceConsumerMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SampleRedstoneDataServiceConsumerMock__factory extends ContractFactory {
    constructor(...args: SampleRedstoneDataServiceConsumerMockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SampleRedstoneDataServiceConsumerMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SampleRedstoneDataServiceConsumerMock;
    connect(signer: Signer): SampleRedstoneDataServiceConsumerMock__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50611ac8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806395262d9f11610097578063d22158fa11610066578063d22158fa146101f5578063f4afad2414610208578063f50b2efe1461021b578063f90c49241461022e57600080fd5b806395262d9f1461017d578063b24ebfcc14610190578063c274583a146101a3578063c7f32d88146101e257600080fd5b806355a547d5116100d357806355a547d51461014e5780637a45ddfe146101565780637a7a28811461015f5780637b94ce291461017457600080fd5b80632cfed611146100fa5780633ce142f514610116578063429989f01461013b575b600080fd5b61010360015481565b6040519081526020015b60405180910390f35b61012961012436600461167d565b610235565b60405160ff909116815260200161010d565b61012961014936600461167d565b610246565b61010361070b565b61010360025481565b61017261016d3660046116ff565b610864565b005b61010360005481565b61012961018b36600461167d565b6108eb565b61010361019e366004611770565b6108f6565b604080518082018252601781527f6d6f636b2d646174612d736572766963652d74657374730000000000000000006020820152905161010d919061184c565b6101726101f03660046116ff565b610901565b61012961020336600461167d565b61098e565b6101726102163660046118b8565b610a14565b61017261022936600461194f565b610a24565b600a610129565b6000610240826108eb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821673f39fd6e51aad88f6f4ce6ab8827279cfffb922660361028157506000919050565b73ffffffffffffffffffffffffffffffffffffffff82167370997970c51812dc3a010c7d01b50e0d17dc79c8036102ba57506001919050565b73ffffffffffffffffffffffffffffffffffffffff8216733c44cdddb6a900fa2b585dd299e03d12fa4293bc036102f357506002919050565b73ffffffffffffffffffffffffffffffffffffffff82167390f79bf6eb2c4f870365e785982e1f101e93b9060361032c57506003919050565b73ffffffffffffffffffffffffffffffffffffffff82167315d34aaf54267db7d7c367839aaf71a00a2c6a650361036557506004919050565b73ffffffffffffffffffffffffffffffffffffffff8216739965507d1a55bcc2695c58ba16fb37d819b0a4dc0361039e57506005919050565b73ffffffffffffffffffffffffffffffffffffffff821673976ea74026e726554db657fa54763abd0c3a0aa9036103d757506006919050565b73ffffffffffffffffffffffffffffffffffffffff82167314dc79964da2c08b23698b3d3cc7ca32193d99550361041057506007919050565b73ffffffffffffffffffffffffffffffffffffffff82167323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f0361044957506008919050565b73ffffffffffffffffffffffffffffffffffffffff821673a0ee7a142d267c1f36714e4a8f75612f20a797200361048257506009919050565b73ffffffffffffffffffffffffffffffffffffffff821673bcd4042de499d14e55001ccbb24a551f3b954096036104bb5750600a919050565b73ffffffffffffffffffffffffffffffffffffffff82167371be63f3384f5fb98995898a86b02fb2426c5788036104f45750600b919050565b73ffffffffffffffffffffffffffffffffffffffff821673fabb0ac9d68b0b445fb7357272ff202c5651694a0361052d5750600c919050565b73ffffffffffffffffffffffffffffffffffffffff8216731cbd3b2770909d4e10f157cabc84c7264073c9ec036105665750600d919050565b73ffffffffffffffffffffffffffffffffffffffff821673df3e18d64bc6a983f673ab319ccae4f1a57c70970361059f5750600e919050565b73ffffffffffffffffffffffffffffffffffffffff821673cd3b766ccdd6ae721141f452c550ca635964ce71036105d85750600f919050565b73ffffffffffffffffffffffffffffffffffffffff8216732546bcd3c84621e976d8185a91a922ae77ecec300361061157506010919050565b73ffffffffffffffffffffffffffffffffffffffff821673bda5747bfd65f08deb54cb465eb87d40e51b197e0361064a57506011919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd2fd4581271e230360230f9337d5c0430bf44c00361068357506012919050565b73ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c1199036106bc57506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b600080610716610a67565b9050600061072382610b9c565b925061ffff1690506000819003610766576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561085e57600061077c84610c04565b905060008061078c606887611997565b9050600061079a82366119aa565b9050803592508265ffffffffffff166000036107e2576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876000036107fa578265ffffffffffff16975061083b565b878365ffffffffffff161461083b576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108458488611997565b9650505050508080610856906119bd565b915050610769565b50505090565b60006108a2838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610c4092505050565b9050806000815181106108b7576108b76119f5565b6020026020010151600081905550806001815181106108d8576108d86119f5565b6020026020010151600181905550505050565b60006102408261098e565b600061024082610c62565b600080610940848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610c6d92505050565b9150915081600081518110610957576109576119f5565b602002602001015160008190555081600181518110610978576109786119f5565b6020908102919091010151600155600255505050565b600073ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c119903610a0b576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610702565b61024082610246565b610a1e8484610864565b50505050565b6501812f2590c0811015610a64576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610acf576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610b0c576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610b45600362ffffff8516611997565b610b4f9190611997565b905036610b5d600283611997565b1115610b95576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b60008080610bab602085611997565b905036811115610be7576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3681900335925082610bfa600286611997565b9250925050915091565b6000806000610c1284610c83565b9092509050604e610c24826020611997565b610c2e9084611a24565b610c389190611997565b949350505050565b6060600080610c4e84610cd6565b91509150610c5b81610a24565b5092915050565b600061024082610f23565b60606000610c7a83610cd6565b91509150915091565b6000808080806020610c96604188611997565b610ca09190611997565b610caa90366119aa565b803593509050610cbb6003826119aa565b62ffffff9390931696923563ffffffff169550919350505050565b6060600080835167ffffffffffffffff811115610cf557610cf5611741565b604051908082528060200260200182016040528015610d1e578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610d3d57610d3d611741565b604051908082528060200260200182016040528015610d66578160200160208202803683370190505b5090506000855167ffffffffffffffff811115610d8557610d85611741565b604051908082528060200260200182016040528015610db857816020015b6060815260200190600190039081610da35790505b509050600a60005b8751811015610e31578167ffffffffffffffff811115610de257610de2611741565b604051908082528060200260200182016040528015610e0b578160200160208202803683370190505b50838281518110610e1e57610e1e6119f5565b6020908102919091010152600101610dc0565b506000610e3c610a67565b90506000610e4982610b9c565b60405190935061ffff909116915060005b82811015610f0a576000610e718c8a8a8a89611060565b90955090506000819003610eb1576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b898114610efa5789600003610ec857809950610efa565b6040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060208201604052600101610e5a565b50610f158588611309565b985050505050505050915091565b60008151600203610f7a57600282600181518110610f4357610f436119f5565b602002602001015183600081518110610f5e57610f5e6119f5565b6020026020010151610f709190611997565b6102409190611a6a565b8151600003610fb5576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fbe82611431565b600060028351610fce9190611a6a565b905060028351610fde9190611a7e565b60000361103e576000838281518110610ff957610ff96119f5565b60200260200101518460018461100f91906119aa565b8151811061101f5761101f6119f5565b60200260200101516110319190611997565b9050610c38600282611a6a565b828181518110611050576110506119f5565b6020026020010151915050919050565b600080600080600061107186610c83565b909250905060008060608180600d61108a602088611997565b6110949089611a24565b61109e9190611997565b915060006110ad60688d611997565b6110b790366119aa565b90506000836110c760418f611997565b6110d19190611997565b6110db90366119aa565b90506110e784826110fa565b945083602086012095508135925061113c565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b8265ffffffffffff169a5061115d8660418f6111589190611997565b611479565b965061116887610235565b60ff16995050505050505050604e866111819190611997565b955060008060005b848110156112f657602061119d858b611997565b6111a79190611997565b98506111b38985611611565b909350915060005b8d518110156112ed578d81815181106111d6576111d66119f5565b602002602001015184036112e55760008c82815181106111f8576111f86119f5565b6020026020010151905061121181896001901b16151590565b15801561123a5750600a60ff168e8381518110611230576112306119f5565b6020026020010151105b156112df57838c8381518110611252576112526119f5565b60200260200101518f848151811061126c5761126c6119f5565b602002602001015181518110611284576112846119f5565b6020026020010181815250508d82815181106112a2576112a26119f5565b6020026020010180518091906112b7906119bd565b9052506001881b81178d83815181106112d2576112d26119f5565b6020026020010181815250505b506112ed565b6001016111bb565b50600101611189565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff81111561132757611327611741565b604051908082528060200260200182016040528015611350578160200160208202803683370190505b509050600a60005b85518110156114275781858281518110611374576113746119f5565b602002602001015110156113da57848181518110611394576113946119f5565b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401610702929190918252602082015260400190565b60006113fe8783815181106113f1576113f16119f5565b60200260200101516108f6565b905080848381518110611413576114136119f5565b602090810291909101015250600101611358565b5090949350505050565b8051602082016020820281019150805b82811015610a1e57815b81811015611470578151815180821015611466578084528183525b505060200161144b565b50602001611441565b60003682900380359060208101359060400135831a601b81148015906114a3575060ff8116601c14155b156114dd576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610702565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561153a576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610702565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa15801561158d573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015194505073ffffffffffffffffffffffffffffffffffffffff8416611608576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610702565b50505092915050565b6000808061161f85366119aa565b9050803592506020810135915060218410611669576040517fc000fc4200000000000000000000000000000000000000000000000000000000815260048101859052602401610702565b8360200360080282901c9150509250929050565b60006020828403121561168f57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b9557600080fd5b60008083601f8401126116c557600080fd5b50813567ffffffffffffffff8111156116dd57600080fd5b6020830191508360208260051b85010111156116f857600080fd5b9250929050565b6000806020838503121561171257600080fd5b823567ffffffffffffffff81111561172957600080fd5b611735858286016116b3565b90969095509350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561178357600080fd5b823567ffffffffffffffff8082111561179b57600080fd5b818501915085601f8301126117af57600080fd5b8135818111156117c1576117c1611741565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561180457611804611741565b60405291825284820192508381018501918883111561182257600080fd5b938501935b8285101561184057843584529385019392850192611827565b98975050505050505050565b600060208083528351808285015260005b818110156118795785810183015185820160400152820161185d565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600080600080604085870312156118ce57600080fd5b843567ffffffffffffffff808211156118e657600080fd5b6118f2888389016116b3565b9096509450602087013591508082111561190b57600080fd5b818701915087601f83011261191f57600080fd5b81358181111561192e57600080fd5b88602082850101111561194057600080fd5b95989497505060200194505050565b60006020828403121561196157600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561024057610240611968565b8181038181111561024057610240611968565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119ee576119ee611968565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761024057610240611968565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611a7957611a79611a3b565b500490565b600082611a8d57611a8d611a3b565b50069056fea26469706673582212207815d72a5deb739e6bf2566d3f745e76ed86e0605670a8a4b90315af1160630664736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CanNotPickMedianOfEmptyArray";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataTimestampCannotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "signedHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampIsNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "valueByteSize";
            readonly type: "uint256";
        }];
        readonly name: "TooLargeValueByteSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "firstValue";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockExceptLastOneAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedMockSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "save2ValuesAndTimestampInStorage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "save2ValuesInStorage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "save2ValuesInStorageWithManualPayload";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "secondValue";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "timestampFromData";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): SampleRedstoneDataServiceConsumerMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SampleRedstoneDataServiceConsumerMock;
}
export {};
//# sourceMappingURL=SampleRedstoneDataServiceConsumerMock__factory.d.ts.map