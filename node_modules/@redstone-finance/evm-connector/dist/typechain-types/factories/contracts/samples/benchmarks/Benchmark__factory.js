"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Benchmark__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CalldataMustHaveValidPayload",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataOverOrUnderFlow",
        type: "error",
    },
    {
        inputs: [],
        name: "CanNotPickMedianOfEmptyArray",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampMustNotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampsMustBeEqual",
        type: "error",
    },
    {
        inputs: [],
        name: "DataTimestampCannotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "EachSignerMustProvideTheSameValue",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyCalldataPointersArr",
        type: "error",
    },
    {
        inputs: [],
        name: "GetDataServiceIdNotImplemented",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectUnsignedMetadataSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedSignersCount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredSignersCount",
                type: "uint256",
            },
        ],
        name: "InsufficientNumberOfUniqueSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidCalldataPointer",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "signedHash",
                type: "bytes32",
            },
        ],
        name: "InvalidSignature",
        type: "error",
    },
    {
        inputs: [],
        name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receivedSigner",
                type: "address",
            },
        ],
        name: "SignerNotAuthorised",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampIsNotValid",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampsMustBeEqual",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "valueByteSize",
                type: "uint256",
            },
        ],
        name: "TooLargeValueByteSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]",
            },
        ],
        name: "aggregateValues",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "dataFeedIds",
                type: "bytes32[]",
            },
        ],
        name: "emptyExtractOracleValues",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "dataFeedIds",
                type: "bytes32[]",
            },
        ],
        name: "extractOracleValues",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "extractTimestampsAndAssertAllAreEqual",
        outputs: [
            {
                internalType: "uint256",
                name: "extractedTimestamp",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockExceptLastOneAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedMockSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getDataServiceId",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getUniqueSignersThreshold",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint8",
                name: "newUniqueSignersThreshold",
                type: "uint8",
            },
        ],
        name: "updateUniqueSignersThreshold",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampMilliseconds",
                type: "uint256",
            },
        ],
        name: "validateTimestamp",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x6080604052600080556001805460ff19168117905534801561002057600080fd5b50611979806100306000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063a09f9c3a11610081578063d22158fa1161005b578063d22158fa146101d4578063f50b2efe146101e7578063f90c4924146101fa57600080fd5b8063a09f9c3a1461016a578063b24ebfcc146101ac578063c274583a146101bf57600080fd5b80634b11366f116100b25780634b11366f1461012b57806355a547d51461014157806395262d9f1461015757600080fd5b80630b3703ef146100d95780633ce142f5146100ee578063429989f014610118575b600080fd5b6100ec6100e73660046115bb565b610205565b005b6101016100fc366004611630565b61024d565b60405160ff90911681526020015b60405180910390f35b610101610126366004611630565b61025e565b6100ec6101393660046115bb565b505060008055565b610149610723565b60405190815260200161010f565b610101610165366004611630565b61087c565b6100ec610178366004611666565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b6101496101ba3660046116b8565b610887565b6101c7610892565b60405161010f9190611794565b6101016101e2366004611630565b6108c6565b6100ec6101f5366004611800565b61094c565b60015460ff16610101565b600061024383838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061098f92505050565b5050600080555050565b60006102588261087c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821673f39fd6e51aad88f6f4ce6ab8827279cfffb922660361029957506000919050565b73ffffffffffffffffffffffffffffffffffffffff82167370997970c51812dc3a010c7d01b50e0d17dc79c8036102d257506001919050565b73ffffffffffffffffffffffffffffffffffffffff8216733c44cdddb6a900fa2b585dd299e03d12fa4293bc0361030b57506002919050565b73ffffffffffffffffffffffffffffffffffffffff82167390f79bf6eb2c4f870365e785982e1f101e93b9060361034457506003919050565b73ffffffffffffffffffffffffffffffffffffffff82167315d34aaf54267db7d7c367839aaf71a00a2c6a650361037d57506004919050565b73ffffffffffffffffffffffffffffffffffffffff8216739965507d1a55bcc2695c58ba16fb37d819b0a4dc036103b657506005919050565b73ffffffffffffffffffffffffffffffffffffffff821673976ea74026e726554db657fa54763abd0c3a0aa9036103ef57506006919050565b73ffffffffffffffffffffffffffffffffffffffff82167314dc79964da2c08b23698b3d3cc7ca32193d99550361042857506007919050565b73ffffffffffffffffffffffffffffffffffffffff82167323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f0361046157506008919050565b73ffffffffffffffffffffffffffffffffffffffff821673a0ee7a142d267c1f36714e4a8f75612f20a797200361049a57506009919050565b73ffffffffffffffffffffffffffffffffffffffff821673bcd4042de499d14e55001ccbb24a551f3b954096036104d35750600a919050565b73ffffffffffffffffffffffffffffffffffffffff82167371be63f3384f5fb98995898a86b02fb2426c57880361050c5750600b919050565b73ffffffffffffffffffffffffffffffffffffffff821673fabb0ac9d68b0b445fb7357272ff202c5651694a036105455750600c919050565b73ffffffffffffffffffffffffffffffffffffffff8216731cbd3b2770909d4e10f157cabc84c7264073c9ec0361057e5750600d919050565b73ffffffffffffffffffffffffffffffffffffffff821673df3e18d64bc6a983f673ab319ccae4f1a57c7097036105b75750600e919050565b73ffffffffffffffffffffffffffffffffffffffff821673cd3b766ccdd6ae721141f452c550ca635964ce71036105f05750600f919050565b73ffffffffffffffffffffffffffffffffffffffff8216732546bcd3c84621e976d8185a91a922ae77ecec300361062957506010919050565b73ffffffffffffffffffffffffffffffffffffffff821673bda5747bfd65f08deb54cb465eb87d40e51b197e0361066257506011919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd2fd4581271e230360230f9337d5c0430bf44c00361069b57506012919050565b73ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c1199036106d457506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b60008061072e6109b1565b9050600061073b82610ae6565b925061ffff169050600081900361077e576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561087657600061079484610b4e565b90506000806107a4606887611848565b905060006107b2823661185b565b9050803592508265ffffffffffff166000036107fa576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87600003610812578265ffffffffffff169750610853565b878365ffffffffffff1614610853576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61085d8488611848565b965050505050808061086e9061186e565b915050610781565b50505090565b60006102588261025e565b600061025882610b8a565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c119903610943576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015260240161071a565b6102588261025e565b6501812f2590c081101561098c576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b606060008061099d84610b95565b915091506109aa8161094c565b5092915050565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610a19576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610a56576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610a8f600362ffffff8516611848565b610a999190611848565b905036610aa7600283611848565b1115610adf576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b60008080610af5602085611848565b905036811115610b31576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3681900335925082610b44600286611848565b9250925050915091565b6000806000610b5c84610df3565b9092509050604e610b6e826020611848565b610b7890846118a6565b610b829190611848565b949350505050565b600061025882610e46565b6060600080835167ffffffffffffffff811115610bb457610bb4611689565b604051908082528060200260200182016040528015610bdd578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610bfc57610bfc611689565b604051908082528060200260200182016040528015610c25578160200160208202803683370190505b5090506000855167ffffffffffffffff811115610c4457610c44611689565b604051908082528060200260200182016040528015610c7757816020015b6060815260200190600190039081610c625790505b5090506000610c8860015460ff1690565b60ff16905060005b8751811015610d01578167ffffffffffffffff811115610cb257610cb2611689565b604051908082528060200260200182016040528015610cdb578160200160208202803683370190505b50838281518110610cee57610cee6118bd565b6020908102919091010152600101610c90565b506000610d0c6109b1565b90506000610d1982610ae6565b60405190935061ffff909116915060005b82811015610dda576000610d418c8a8a8a89610f83565b90955090506000819003610d81576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b898114610dca5789600003610d9857809950610dca565b6040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060208201604052600101610d2a565b50610de58588611230565b985050505050505050915091565b6000808080806020610e06604188611848565b610e109190611848565b610e1a903661185b565b803593509050610e2b60038261185b565b62ffffff9390931696923563ffffffff169550919350505050565b60008151600203610e9d57600282600181518110610e6657610e666118bd565b602002602001015183600081518110610e8157610e816118bd565b6020026020010151610e939190611848565b610258919061191b565b8151600003610ed8576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ee182611369565b600060028351610ef1919061191b565b905060028351610f01919061192f565b600003610f61576000838281518110610f1c57610f1c6118bd565b602002602001015184600184610f32919061185b565b81518110610f4257610f426118bd565b6020026020010151610f549190611848565b9050610b8260028261191b565b828181518110610f7357610f736118bd565b6020026020010151915050919050565b6000806000806000610f9486610df3565b909250905060008060608180600d610fad602088611848565b610fb790896118a6565b610fc19190611848565b91506000610fd060688d611848565b610fda903661185b565b9050600083610fea60418f611848565b610ff49190611848565b610ffe903661185b565b905061100a848261101d565b945083602086012095508135925061105f565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b8265ffffffffffff169a506110808660418f61107b9190611848565b6113b7565b965061108b8761024d565b60ff16995050505050505050604e866110a49190611848565b955060008060005b8481101561121d5760206110c0858b611848565b6110ca9190611848565b98506110d6898561154f565b909350915060005b8d51811015611214578d81815181106110f9576110f96118bd565b6020026020010151840361120c5760008c828151811061111b5761111b6118bd565b6020026020010151905061113481896001901b16151590565b158015611161575060015460ff1660ff168e8381518110611157576111576118bd565b6020026020010151105b1561120657838c8381518110611179576111796118bd565b60200260200101518f8481518110611193576111936118bd565b6020026020010151815181106111ab576111ab6118bd565b6020026020010181815250508d82815181106111c9576111c96118bd565b6020026020010180518091906111de9061186e565b9052506001881b81178d83815181106111f9576111f96118bd565b6020026020010181815250505b50611214565b6001016110de565b506001016110ac565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff81111561124e5761124e611689565b604051908082528060200260200182016040528015611277578160200160208202803683370190505b509050600061128860015460ff1690565b60ff16905060005b855181101561135f57818582815181106112ac576112ac6118bd565b60200260200101511015611312578481815181106112cc576112cc6118bd565b6020026020010151826040517f2b13aef500000000000000000000000000000000000000000000000000000000815260040161071a929190918252602082015260400190565b6000611336878381518110611329576113296118bd565b6020026020010151610887565b90508084838151811061134b5761134b6118bd565b602090810291909101015250600101611290565b5090949350505050565b8051602082016020820281019150805b828110156113b157815b818110156113a857815181518082101561139e578084528183525b5050602001611383565b50602001611379565b50505050565b60003682900380359060208101359060400135831a601b81148015906113e1575060ff8116601c14155b1561141b576040517f666b7cba0000000000000000000000000000000000000000000000000000000081526004810187905260240161071a565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611478576040517f666b7cba0000000000000000000000000000000000000000000000000000000081526004810187905260240161071a565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156114cb573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015194505073ffffffffffffffffffffffffffffffffffffffff8416611546576040517f666b7cba0000000000000000000000000000000000000000000000000000000081526004810187905260240161071a565b50505092915050565b6000808061155d853661185b565b90508035925060208101359150602184106115a7576040517fc000fc420000000000000000000000000000000000000000000000000000000081526004810185905260240161071a565b8360200360080282901c9150509250929050565b600080602083850312156115ce57600080fd5b823567ffffffffffffffff808211156115e657600080fd5b818501915085601f8301126115fa57600080fd5b81358181111561160957600080fd5b8660208260051b850101111561161e57600080fd5b60209290920196919550909350505050565b60006020828403121561164257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610adf57600080fd5b60006020828403121561167857600080fd5b813560ff81168114610adf57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156116cb57600080fd5b823567ffffffffffffffff808211156116e357600080fd5b818501915085601f8301126116f757600080fd5b81358181111561170957611709611689565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561174c5761174c611689565b60405291825284820192508381018501918883111561176a57600080fd5b938501935b828510156117885784358452938501939285019261176f565b98975050505050505050565b600060208083528351808285015260005b818110156117c1578581018301518582016040015282016117a5565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561181257600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561025857610258611819565b8181038181111561025857610258611819565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361189f5761189f611819565b5060010190565b808202811582820484141761025857610258611819565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261192a5761192a6118ec565b500490565b60008261193e5761193e6118ec565b50069056fea26469706673582212202fa70a89446682817cefe9448b62cc270f5465748253af914d7db72a395f196b64736f6c63430008110033";
const isSuperArgs = (xs) => xs.length > 1;
class Benchmark__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.Benchmark__factory = Benchmark__factory;
//# sourceMappingURL=Benchmark__factory.js.map