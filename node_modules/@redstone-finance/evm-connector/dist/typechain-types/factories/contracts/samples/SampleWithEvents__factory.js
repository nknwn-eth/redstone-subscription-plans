"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleWithEvents__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CalldataMustHaveValidPayload",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataOverOrUnderFlow",
        type: "error",
    },
    {
        inputs: [],
        name: "CanNotPickMedianOfEmptyArray",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampMustNotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampsMustBeEqual",
        type: "error",
    },
    {
        inputs: [],
        name: "DataTimestampCannotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "EachSignerMustProvideTheSameValue",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyCalldataPointersArr",
        type: "error",
    },
    {
        inputs: [],
        name: "GetDataServiceIdNotImplemented",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectUnsignedMetadataSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedSignersCount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredSignersCount",
                type: "uint256",
            },
        ],
        name: "InsufficientNumberOfUniqueSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidCalldataPointer",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "signedHash",
                type: "bytes32",
            },
        ],
        name: "InvalidSignature",
        type: "error",
    },
    {
        inputs: [],
        name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receivedSigner",
                type: "address",
            },
        ],
        name: "SignerNotAuthorised",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampIsNotValid",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampsMustBeEqual",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "valueByteSize",
                type: "uint256",
            },
        ],
        name: "TooLargeValueByteSize",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "_updatedValue",
                type: "uint256",
            },
        ],
        name: "ValueUpdated",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]",
            },
        ],
        name: "aggregateValues",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "emitEventWithLatestOracleValue",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "extractTimestampsAndAssertAllAreEqual",
        outputs: [
            {
                internalType: "uint256",
                name: "extractedTimestamp",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockExceptLastOneAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedMockSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getDataServiceId",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getUniqueSignersThreshold",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampMilliseconds",
                type: "uint256",
            },
        ],
        name: "validateTimestamp",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b506118bf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063b24ebfcc11610076578063d22158fa1161005b578063d22158fa1461015b578063f50b2efe1461016e578063f90c49241461018157600080fd5b8063b24ebfcc14610133578063c274583a1461014657600080fd5b806355a547d5116100a757806355a547d514610100578063769b56051461011657806395262d9f1461012057600080fd5b80633ce142f5146100c3578063429989f0146100ed575b600080fd5b6100d66100d1366004611599565b610188565b60405160ff90911681526020015b60405180910390f35b6100d66100fb366004611599565b610199565b61010861065e565b6040519081526020016100e4565b61011e6107b7565b005b6100d661012e366004611599565b610820565b6101086101413660046115fe565b61082b565b61014e610836565b6040516100e491906116da565b6100d6610169366004611599565b61086a565b61011e61017c366004611746565b6108f0565b600a6100d6565b600061019382610820565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821673f39fd6e51aad88f6f4ce6ab8827279cfffb92266036101d457506000919050565b73ffffffffffffffffffffffffffffffffffffffff82167370997970c51812dc3a010c7d01b50e0d17dc79c80361020d57506001919050565b73ffffffffffffffffffffffffffffffffffffffff8216733c44cdddb6a900fa2b585dd299e03d12fa4293bc0361024657506002919050565b73ffffffffffffffffffffffffffffffffffffffff82167390f79bf6eb2c4f870365e785982e1f101e93b9060361027f57506003919050565b73ffffffffffffffffffffffffffffffffffffffff82167315d34aaf54267db7d7c367839aaf71a00a2c6a65036102b857506004919050565b73ffffffffffffffffffffffffffffffffffffffff8216739965507d1a55bcc2695c58ba16fb37d819b0a4dc036102f157506005919050565b73ffffffffffffffffffffffffffffffffffffffff821673976ea74026e726554db657fa54763abd0c3a0aa90361032a57506006919050565b73ffffffffffffffffffffffffffffffffffffffff82167314dc79964da2c08b23698b3d3cc7ca32193d99550361036357506007919050565b73ffffffffffffffffffffffffffffffffffffffff82167323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f0361039c57506008919050565b73ffffffffffffffffffffffffffffffffffffffff821673a0ee7a142d267c1f36714e4a8f75612f20a79720036103d557506009919050565b73ffffffffffffffffffffffffffffffffffffffff821673bcd4042de499d14e55001ccbb24a551f3b9540960361040e5750600a919050565b73ffffffffffffffffffffffffffffffffffffffff82167371be63f3384f5fb98995898a86b02fb2426c5788036104475750600b919050565b73ffffffffffffffffffffffffffffffffffffffff821673fabb0ac9d68b0b445fb7357272ff202c5651694a036104805750600c919050565b73ffffffffffffffffffffffffffffffffffffffff8216731cbd3b2770909d4e10f157cabc84c7264073c9ec036104b95750600d919050565b73ffffffffffffffffffffffffffffffffffffffff821673df3e18d64bc6a983f673ab319ccae4f1a57c7097036104f25750600e919050565b73ffffffffffffffffffffffffffffffffffffffff821673cd3b766ccdd6ae721141f452c550ca635964ce710361052b5750600f919050565b73ffffffffffffffffffffffffffffffffffffffff8216732546bcd3c84621e976d8185a91a922ae77ecec300361056457506010919050565b73ffffffffffffffffffffffffffffffffffffffff821673bda5747bfd65f08deb54cb465eb87d40e51b197e0361059d57506011919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd2fd4581271e230360230f9337d5c0430bf44c0036105d657506012919050565b73ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c11990361060f57506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b600080610669610933565b9050600061067682610a68565b925061ffff16905060008190036106b9576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156107b15760006106cf84610ad0565b90506000806106df60688761178e565b905060006106ed82366117a1565b9050803592508265ffffffffffff16600003610735576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8760000361074d578265ffffffffffff16975061078e565b878365ffffffffffff161461078e576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610798848861178e565b96505050505080806107a9906117b4565b9150506106bc565b50505090565b60006107e27f4554480000000000000000000000000000000000000000000000000000000000610b0c565b90507f4273d0736f60e0dedfe745e86718093d8ec8646ebd2a60cd60643eeced5658118160405161081591815260200190565b60405180910390a150565b60006101938261086a565b600061019382610b7c565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c1199036108e7576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610655565b61019382610199565b6501812f2590c0811015610930576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601358116148061099b576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600036602911156109d8576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610a11600362ffffff851661178e565b610a1b919061178e565b905036610a2960028361178e565b1115610a61576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b60008080610a7760208561178e565b905036811115610ab3576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3681900335925082610ac660028661178e565b9250925050915091565b6000806000610ade84610b87565b9092509050604e610af082602061178e565b610afa90846117ec565b610b04919061178e565b949350505050565b604080516001808252818301909252600091829190602080830190803683370190505090508281600081518110610b4557610b45611803565b602002602001018181525050610b5a81610bda565b600081518110610b6c57610b6c611803565b6020026020010151915050919050565b600061019382610bfc565b6000808080806020610b9a60418861178e565b610ba4919061178e565b610bae90366117a1565b803593509050610bbf6003826117a1565b62ffffff9390931696923563ffffffff169550919350505050565b6060600080610be884610d29565b91509150610bf5816108f0565b5092915050565b60008151600203610c5357600282600181518110610c1c57610c1c611803565b602002602001015183600081518110610c3757610c37611803565b6020026020010151610c49919061178e565b6101939190611861565b8151600003610c8e576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c9782610f76565b600060028351610ca79190611861565b905060028351610cb79190611875565b600003610d17576000838281518110610cd257610cd2611803565b602002602001015184600184610ce891906117a1565b81518110610cf857610cf8611803565b6020026020010151610d0a919061178e565b9050610b04600282611861565b828181518110610b6c57610b6c611803565b6060600080835167ffffffffffffffff811115610d4857610d486115cf565b604051908082528060200260200182016040528015610d71578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610d9057610d906115cf565b604051908082528060200260200182016040528015610db9578160200160208202803683370190505b5090506000855167ffffffffffffffff811115610dd857610dd86115cf565b604051908082528060200260200182016040528015610e0b57816020015b6060815260200190600190039081610df65790505b509050600a60005b8751811015610e84578167ffffffffffffffff811115610e3557610e356115cf565b604051908082528060200260200182016040528015610e5e578160200160208202803683370190505b50838281518110610e7157610e71611803565b6020908102919091010152600101610e13565b506000610e8f610933565b90506000610e9c82610a68565b60405190935061ffff909116915060005b82811015610f5d576000610ec48c8a8a8a89610fc4565b90955090506000819003610f04576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b898114610f4d5789600003610f1b57809950610f4d565b6040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060208201604052600101610ead565b50610f68858861126d565b985050505050505050915091565b8051602082016020820281019150805b82811015610fbe57815b81811015610fb5578151815180821015610fab578084528183525b5050602001610f90565b50602001610f86565b50505050565b6000806000806000610fd586610b87565b909250905060008060608180600d610fee60208861178e565b610ff890896117ec565b611002919061178e565b9150600061101160688d61178e565b61101b90366117a1565b905060008361102b60418f61178e565b611035919061178e565b61103f90366117a1565b905061104b848261105e565b94508360208601209550813592506110a0565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b8265ffffffffffff169a506110c18660418f6110bc919061178e565b611395565b96506110cc87610188565b60ff16995050505050505050604e866110e5919061178e565b955060008060005b8481101561125a576020611101858b61178e565b61110b919061178e565b9850611117898561152d565b909350915060005b8d51811015611251578d818151811061113a5761113a611803565b602002602001015184036112495760008c828151811061115c5761115c611803565b6020026020010151905061117581896001901b16151590565b15801561119e5750600a60ff168e838151811061119457611194611803565b6020026020010151105b1561124357838c83815181106111b6576111b6611803565b60200260200101518f84815181106111d0576111d0611803565b6020026020010151815181106111e8576111e8611803565b6020026020010181815250508d828151811061120657611206611803565b60200260200101805180919061121b906117b4565b9052506001881b81178d838151811061123657611236611803565b6020026020010181815250505b50611251565b60010161111f565b506001016110ed565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff81111561128b5761128b6115cf565b6040519080825280602002602001820160405280156112b4578160200160208202803683370190505b509050600a60005b855181101561138b57818582815181106112d8576112d8611803565b6020026020010151101561133e578481815181106112f8576112f8611803565b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401610655929190918252602082015260400190565b600061136287838151811061135557611355611803565b602002602001015161082b565b90508084838151811061137757611377611803565b6020908102919091010152506001016112bc565b5090949350505050565b60003682900380359060208101359060400135831a601b81148015906113bf575060ff8116601c14155b156113f9576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610655565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611456576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610655565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156114a9573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015194505073ffffffffffffffffffffffffffffffffffffffff8416611524576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610655565b50505092915050565b6000808061153b85366117a1565b9050803592506020810135915060218410611585576040517fc000fc4200000000000000000000000000000000000000000000000000000000815260048101859052602401610655565b8360200360080282901c9150509250929050565b6000602082840312156115ab57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610a6157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561161157600080fd5b823567ffffffffffffffff8082111561162957600080fd5b818501915085601f83011261163d57600080fd5b81358181111561164f5761164f6115cf565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715611692576116926115cf565b6040529182528482019250838101850191888311156116b057600080fd5b938501935b828510156116ce578435845293850193928501926116b5565b98975050505050505050565b600060208083528351808285015260005b81811015611707578581018301518582016040015282016116eb565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561175857600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156101935761019361175f565b818103818111156101935761019361175f565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117e5576117e561175f565b5060010190565b80820281158282048414176101935761019361175f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261187057611870611832565b500490565b60008261188457611884611832565b50069056fea26469706673582212205ce52f1c32cc23715a84905a9c2db41ab1b966f0483e144cfdc2ba2a20e89f6164736f6c63430008110033";
const isSuperArgs = (xs) => xs.length > 1;
class SampleWithEvents__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.SampleWithEvents__factory = SampleWithEvents__factory;
//# sourceMappingURL=SampleWithEvents__factory.js.map