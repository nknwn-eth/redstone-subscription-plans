import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { PrimaryDemoDataServiceConsumerBase, PrimaryDemoDataServiceConsumerBaseInterface } from "../../../contracts/data-services/PrimaryDemoDataServiceConsumerBase";
type PrimaryDemoDataServiceConsumerBaseConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class PrimaryDemoDataServiceConsumerBase__factory extends ContractFactory {
    constructor(...args: PrimaryDemoDataServiceConsumerBaseConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PrimaryDemoDataServiceConsumerBase>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PrimaryDemoDataServiceConsumerBase;
    connect(signer: Signer): PrimaryDemoDataServiceConsumerBase__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610afc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063c274583a11610050578063c274583a146100ca578063f50b2efe14610109578063f90c49241461011e57600080fd5b80633ce142f51461007757806355a547d5146100a1578063b24ebfcc146100b7575b600080fd5b61008a6100853660046107d6565b610125565b60405160ff90911681526020015b60405180910390f35b6100a96101e8565b604051908152602001610098565b6100a96100c536600461083b565b610341565b604080518082018252601581527f72656473746f6e652d7072696d6172792d64656d6f0000000000000000000000602082015290516100989190610917565b61011c610117366004610983565b610352565b005b600161008a565b600073ffffffffffffffffffffffffffffffffffffffff821673de13fdee7a9b483129a81794d02fcb4021069f0c0361016057506000919050565b73ffffffffffffffffffffffffffffffffffffffff821673ad05ce43e0bcd11345f08a28995951dec30d52260361019957506001919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806101f361035e565b9050600061020082610493565b925061ffff1690506000819003610243576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561033b576000610259846104fb565b90506000806102696068876109cb565b9050600061027782366109de565b9050803592508265ffffffffffff166000036102bf576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876000036102d7578265ffffffffffff169750610318565b878365ffffffffffff1614610318576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61032284886109cb565b9650505050508080610333906109f1565b915050610246565b50505090565b600061034c82610537565b92915050565b61035b81610542565b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0360135811614806103c6576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610403576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd73601356000600961043c600362ffffff85166109cb565b61044691906109cb565b9050366104546002836109cb565b111561048c576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b600080806104a26020856109cb565b9050368111156104de576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36819003359250826104f16002866109cb565b9250925050915091565b6000806000610509846105f8565b9092509050604e61051b8260206109cb565b6105259084610a29565b61052f91906109cb565b949350505050565b600061034c8261064b565b60006105506103e883610a6f565b9050804210156105ab57603c61056642836109de565b11156105a7576040517fb6b0916d000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016101df565b5050565b60b46105b782426109de565b11156105a7576040517f0321d0b5000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016101df565b600080808080602061060b6041886109cb565b61061591906109cb565b61061f90366109de565b8035935090506106306003826109de565b62ffffff9390931696923563ffffffff169550919350505050565b600081516002036106a25760028260018151811061066b5761066b610a83565b60200260200101518360008151811061068657610686610a83565b602002602001015161069891906109cb565b61034c9190610a6f565b81516000036106dd576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106e682610788565b6000600283516106f69190610a6f565b9050600283516107069190610ab2565b60000361076657600083828151811061072157610721610a83565b60200260200101518460018461073791906109de565b8151811061074757610747610a83565b602002602001015161075991906109cb565b905061052f600282610a6f565b82818151811061077857610778610a83565b6020026020010151915050919050565b8051602082016020820281019150805b828110156107d057815b818110156107c75781518151808210156107bd578084528183525b50506020016107a2565b50602001610798565b50505050565b6000602082840312156107e857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461048c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561084e57600080fd5b823567ffffffffffffffff8082111561086657600080fd5b818501915085601f83011261087a57600080fd5b81358181111561088c5761088c61080c565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156108cf576108cf61080c565b6040529182528482019250838101850191888311156108ed57600080fd5b938501935b8285101561090b578435845293850193928501926108f2565b98975050505050505050565b600060208083528351808285015260005b8181101561094457858101830151858201604001528201610928565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561099557600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561034c5761034c61099c565b8181038181111561034c5761034c61099c565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a2257610a2261099c565b5060010190565b808202811582820484141761034c5761034c61099c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610a7e57610a7e610a40565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082610ac157610ac1610a40565b50069056fea26469706673582212200ff9c888d0dddf31b5f85be6960c140f48ccebf217a41ecda48a2510523d978164736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CanNotPickMedianOfEmptyArray";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataTimestampCannotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampSeconds";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "blockTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "TimestampFromTooLongFuture";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampSeconds";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "blockTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "TimestampIsTooOld";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "valueByteSize";
            readonly type: "uint256";
        }];
        readonly name: "TooLargeValueByteSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PrimaryDemoDataServiceConsumerBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PrimaryDemoDataServiceConsumerBase;
}
export {};
//# sourceMappingURL=PrimaryDemoDataServiceConsumerBase__factory.d.ts.map