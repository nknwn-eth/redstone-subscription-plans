import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { PrimaryProdDataServiceConsumerBase, PrimaryProdDataServiceConsumerBaseInterface } from "../../../contracts/data-services/PrimaryProdDataServiceConsumerBase";
type PrimaryProdDataServiceConsumerBaseConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class PrimaryProdDataServiceConsumerBase__factory extends ContractFactory {
    constructor(...args: PrimaryProdDataServiceConsumerBaseConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PrimaryProdDataServiceConsumerBase>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PrimaryProdDataServiceConsumerBase;
    connect(signer: Signer): PrimaryProdDataServiceConsumerBase__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610ba7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063c274583a11610050578063c274583a146100ca578063f50b2efe14610109578063f90c49241461011e57600080fd5b80633ce142f51461007757806355a547d5146100a1578063b24ebfcc146100b7575b600080fd5b61008a610085366004610881565b610125565b60405160ff90911681526020015b60405180910390f35b6100a9610293565b604051908152602001610098565b6100a96100c53660046108e6565b6103ec565b604080518082018252601581527f72656473746f6e652d7072696d6172792d70726f6400000000000000000000006020820152905161009891906109c2565b61011c610117366004610a2e565b6103fd565b005b600361008a565b600073ffffffffffffffffffffffffffffffffffffffff8216738bb8f32df04c8b654987daaed53d6b6091e3b7740361016057506000919050565b73ffffffffffffffffffffffffffffffffffffffff821673deb22f54738d54976c4c0fe5ce6d408e40d884990361019957506001919050565b73ffffffffffffffffffffffffffffffffffffffff82167351ce04be4b3e32572c4ec9135221d0691ba7d202036101d257506002919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd682daec5a90dd295d14da4b0bec9281017b5be0361020b57506003919050565b73ffffffffffffffffffffffffffffffffffffffff8216739c5ae89c4af6aa32ce58588dbaf90d18a855b6de0361024457506004919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b60008061029e610409565b905060006102ab8261053e565b925061ffff16905060008190036102ee576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156103e6576000610304846105a6565b9050600080610314606887610a76565b905060006103228236610a89565b9050803592508265ffffffffffff1660000361036a576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87600003610382578265ffffffffffff1697506103c3565b878365ffffffffffff16146103c3576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103cd8488610a76565b96505050505080806103de90610a9c565b9150506102f1565b50505090565b60006103f7826105e2565b92915050565b610406816105ed565b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610471576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600036602911156104ae576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7360135600060096104e7600362ffffff8516610a76565b6104f19190610a76565b9050366104ff600283610a76565b1115610537576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b6000808061054d602085610a76565b905036811115610589576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b368190033592508261059c600286610a76565b9250925050915091565b60008060006105b4846106a3565b9092509050604e6105c6826020610a76565b6105d09084610ad4565b6105da9190610a76565b949350505050565b60006103f7826106f6565b60006105fb6103e883610b1a565b90508042101561065657603c6106114283610a89565b1115610652576040517fb6b0916d0000000000000000000000000000000000000000000000000000000081526004810182905242602482015260440161028a565b5050565b60b46106628242610a89565b1115610652576040517f0321d0b50000000000000000000000000000000000000000000000000000000081526004810182905242602482015260440161028a565b60008080808060206106b6604188610a76565b6106c09190610a76565b6106ca9036610a89565b8035935090506106db600382610a89565b62ffffff9390931696923563ffffffff169550919350505050565b6000815160020361074d5760028260018151811061071657610716610b2e565b60200260200101518360008151811061073157610731610b2e565b60200260200101516107439190610a76565b6103f79190610b1a565b8151600003610788576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61079182610833565b6000600283516107a19190610b1a565b9050600283516107b19190610b5d565b6000036108115760008382815181106107cc576107cc610b2e565b6020026020010151846001846107e29190610a89565b815181106107f2576107f2610b2e565b60200260200101516108049190610a76565b90506105da600282610b1a565b82818151811061082357610823610b2e565b6020026020010151915050919050565b8051602082016020820281019150805b8281101561087b57815b81811015610872578151815180821015610868578084528183525b505060200161084d565b50602001610843565b50505050565b60006020828403121561089357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461053757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156108f957600080fd5b823567ffffffffffffffff8082111561091157600080fd5b818501915085601f83011261092557600080fd5b813581811115610937576109376108b7565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561097a5761097a6108b7565b60405291825284820192508381018501918883111561099857600080fd5b938501935b828510156109b65784358452938501939285019261099d565b98975050505050505050565b600060208083528351808285015260005b818110156109ef578581018301518582016040015282016109d3565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600060208284031215610a4057600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156103f7576103f7610a47565b818103818111156103f7576103f7610a47565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610acd57610acd610a47565b5060010190565b80820281158282048414176103f7576103f7610a47565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610b2957610b29610aeb565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082610b6c57610b6c610aeb565b50069056fea2646970667358221220d936e8bab847d7acc0bcb4eb0537f759e7aab00d76d1be8af19fe5813f14fb6864736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CanNotPickMedianOfEmptyArray";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataTimestampCannotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampSeconds";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "blockTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "TimestampFromTooLongFuture";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampSeconds";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "blockTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "TimestampIsTooOld";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "valueByteSize";
            readonly type: "uint256";
        }];
        readonly name: "TooLargeValueByteSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PrimaryProdDataServiceConsumerBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PrimaryProdDataServiceConsumerBase;
}
export {};
//# sourceMappingURL=PrimaryProdDataServiceConsumerBase__factory.d.ts.map