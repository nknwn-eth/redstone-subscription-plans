"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KydServiceConsumerBase__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "AllValuesMustBeEqual",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataMustHaveValidPayload",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataOverOrUnderFlow",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampMustNotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampsMustBeEqual",
        type: "error",
    },
    {
        inputs: [],
        name: "DataTimestampCannotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "EachSignerMustProvideTheSameValue",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyCalldataPointersArr",
        type: "error",
    },
    {
        inputs: [],
        name: "GetDataServiceIdNotImplemented",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectUnsignedMetadataSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedSignersCount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredSignersCount",
                type: "uint256",
            },
        ],
        name: "InsufficientNumberOfUniqueSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidCalldataPointer",
        type: "error",
    },
    {
        inputs: [],
        name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receivedSigner",
                type: "address",
            },
        ],
        name: "SignerNotAuthorised",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampSeconds",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "blockTimestamp",
                type: "uint256",
            },
        ],
        name: "TimestampFromTooLongFuture",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampSeconds",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "blockTimestamp",
                type: "uint256",
            },
        ],
        name: "TimestampIsTooOld",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampsMustBeEqual",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "valueByteSize",
                type: "uint256",
            },
        ],
        name: "TooLargeValueByteSize",
        type: "error",
    },
    {
        inputs: [],
        name: "ValuesArrayCanNotBeEmpty",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]",
            },
        ],
        name: "aggregateValues",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "extractTimestampsAndAssertAllAreEqual",
        outputs: [
            {
                internalType: "uint256",
                name: "extractedTimestamp",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getDataServiceId",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getUniqueSignersThreshold",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampMilliseconds",
                type: "uint256",
            },
        ],
        name: "validateTimestamp",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50610a16806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063c274583a11610050578063c274583a146100ca578063f50b2efe14610109578063f90c49241461011e57600080fd5b80633ce142f51461007757806355a547d5146100a1578063b24ebfcc146100b7575b600080fd5b61008a610085366004610706565b610125565b60405160ff90911681526020015b60405180910390f35b6100a96101e8565b604051908152602001610098565b6100a96100c536600461076b565b610341565b604080518082018252601981527f72656473746f6e652d637573746f6d2d75726c732d64656d6f00000000000000602082015290516100989190610847565b61011c6101173660046108b3565b610418565b005b600261008a565b600073ffffffffffffffffffffffffffffffffffffffff82167370997970c51812dc3a010c7d01b50e0d17dc79c80361016057506000919050565b73ffffffffffffffffffffffffffffffffffffffff8216733c44cdddb6a900fa2b585dd299e03d12fa4293bc0361019957506001919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806101f3610424565b9050600061020082610559565b925061ffff1690506000819003610243576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561033b576000610259846105c1565b90506000806102696068876108fb565b905060006102778236610914565b9050803592508265ffffffffffff166000036102bf576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876000036102d7578265ffffffffffff169750610318565b878365ffffffffffff1614610318576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61032284886108fb565b965050505050808061033390610927565b915050610246565b50505090565b6000815160000361037e576040517fdfac221e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826000815181106103935761039361095f565b602002602001015190506000600190505b835181101561041157818482815181106103c0576103c061095f565b6020026020010151146103ff576040517fd5e55d1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061040981610927565b9150506103a4565b5092915050565b610421816105fd565b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601358116148061048c576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600036602911156104c9576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610502600362ffffff85166108fb565b61050c91906108fb565b90503661051a6002836108fb565b1115610552576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b600080806105686020856108fb565b9050368111156105a4576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36819003359250826105b76002866108fb565b9250925050915091565b60008060006105cf846106b3565b9092509050604e6105e18260206108fb565b6105eb908461098e565b6105f591906108fb565b949350505050565b600061060b6103e8836109a5565b90508042101561066657603c6106214283610914565b1115610662576040517fb6b0916d000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016101df565b5050565b60b46106728242610914565b1115610662576040517f0321d0b5000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016101df565b60008080808060206106c66041886108fb565b6106d091906108fb565b6106da9036610914565b8035935090506106eb600382610914565b62ffffff9390931696923563ffffffff169550919350505050565b60006020828403121561071857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461055257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561077e57600080fd5b823567ffffffffffffffff8082111561079657600080fd5b818501915085601f8301126107aa57600080fd5b8135818111156107bc576107bc61073c565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156107ff576107ff61073c565b60405291825284820192508381018501918883111561081d57600080fd5b938501935b8285101561083b57843584529385019392850192610822565b98975050505050505050565b600060208083528351808285015260005b8181101561087457858101830151858201604001528201610858565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156108c557600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561090e5761090e6108cc565b92915050565b8181038181111561090e5761090e6108cc565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610958576109586108cc565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761090e5761090e6108cc565b6000826109db577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212209ae4aade1478a05dfc27fea597b91a0ba3f5776b8f5eb132aebebcd692e7f33e64736f6c63430008110033";
const isSuperArgs = (xs) => xs.length > 1;
class KydServiceConsumerBase__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.KydServiceConsumerBase__factory = KydServiceConsumerBase__factory;
//# sourceMappingURL=KydServiceConsumerBase__factory.js.map