/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "CalldataExtractor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CalldataExtractor__factory>;
    getContractFactory(
      name: "ProxyConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyConnector__factory>;
    getContractFactory(
      name: "RedstoneConstants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConstants__factory>;
    getContractFactory(
      name: "RedstoneConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConsumerBase__factory>;
    getContractFactory(
      name: "RedstoneConsumerBytesBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConsumerBytesBase__factory>;
    getContractFactory(
      name: "RedstoneConsumerNumericBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConsumerNumericBase__factory>;
    getContractFactory(
      name: "RedstoneDefaultsLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneDefaultsLib__factory>;
    getContractFactory(
      name: "ArbitrumDemoDataServiceConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumDemoDataServiceConsumerBase__factory>;
    getContractFactory(
      name: "ArbitrumProdDataServiceConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumProdDataServiceConsumerBase__factory>;
    getContractFactory(
      name: "AvalancheDataServiceConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AvalancheDataServiceConsumerBase__factory>;
    getContractFactory(
      name: "AvalancheDemoConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AvalancheDemoConsumerBase__factory>;
    getContractFactory(
      name: "KydServiceConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KydServiceConsumerBase__factory>;
    getContractFactory(
      name: "MainDemoConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MainDemoConsumerBase__factory>;
    getContractFactory(
      name: "PrimaryDemoDataServiceConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrimaryDemoDataServiceConsumerBase__factory>;
    getContractFactory(
      name: "PrimaryProdDataServiceConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrimaryProdDataServiceConsumerBase__factory>;
    getContractFactory(
      name: "StagingDemoDataServiceConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StagingDemoDataServiceConsumerBase__factory>;
    getContractFactory(
      name: "NumericArrayLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NumericArrayLib__factory>;
    getContractFactory(
      name: "SignatureLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignatureLib__factory>;
    getContractFactory(
      name: "AuthorisedMockSignersBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuthorisedMockSignersBase__factory>;
    getContractFactory(
      name: "RedstoneConsumerBytesMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConsumerBytesMock__factory>;
    getContractFactory(
      name: "RedstoneConsumerNumericMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConsumerNumericMock__factory>;
    getContractFactory(
      name: "Benchmark",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Benchmark__factory>;
    getContractFactory(
      name: "HashCalldataModel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HashCalldataModel__factory>;
    getContractFactory(
      name: "SampleChainableProxyConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleChainableProxyConnector__factory>;
    getContractFactory(
      name: "SampleChainableStorageProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleChainableStorageProxy__factory>;
    getContractFactory(
      name: "SampleChainableStorageProxyConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleChainableStorageProxyConsumer__factory>;
    getContractFactory(
      name: "SampleProxyConnectorConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleProxyConnectorConsumer__factory>;
    getContractFactory(
      name: "StorageStructureModel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StorageStructureModel__factory>;
    getContractFactory(
      name: "SampleBitmapLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleBitmapLib__factory>;
    getContractFactory(
      name: "SampleDuplicatedDataFeeds",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleDuplicatedDataFeeds__factory>;
    getContractFactory(
      name: "SampleForLocalhostMockTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleForLocalhostMockTest__factory>;
    getContractFactory(
      name: "SampleKydServiceConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleKydServiceConsumer__factory>;
    getContractFactory(
      name: "SampleNumericArrayLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleNumericArrayLib__factory>;
    getContractFactory(
      name: "SampleProxyConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleProxyConnector__factory>;
    getContractFactory(
      name: "SampleRedstoneConsumerBytesMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleRedstoneConsumerBytesMock__factory>;
    getContractFactory(
      name: "SampleRedstoneConsumerBytesMockManyDataFeeds",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleRedstoneConsumerBytesMockManyDataFeeds__factory>;
    getContractFactory(
      name: "SampleRedstoneConsumerBytesMockStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleRedstoneConsumerBytesMockStrings__factory>;
    getContractFactory(
      name: "SampleRedstoneConsumerNumericMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleRedstoneConsumerNumericMock__factory>;
    getContractFactory(
      name: "SampleRedstoneConsumerNumericMockManyDataFeeds",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleRedstoneConsumerNumericMockManyDataFeeds__factory>;
    getContractFactory(
      name: "SampleRedstoneDataServiceConsumerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleRedstoneDataServiceConsumerMock__factory>;
    getContractFactory(
      name: "SampleRedstoneDefaultsLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleRedstoneDefaultsLib__factory>;
    getContractFactory(
      name: "SampleStorageProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleStorageProxy__factory>;
    getContractFactory(
      name: "SampleStorageProxyConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleStorageProxyConsumer__factory>;
    getContractFactory(
      name: "ERC20Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Initializable__factory>;
    getContractFactory(
      name: "SampleSyntheticToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleSyntheticToken__factory>;
    getContractFactory(
      name: "SampleWithEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleWithEvents__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "CalldataExtractor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CalldataExtractor>;
    getContractAt(
      name: "ProxyConnector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyConnector>;
    getContractAt(
      name: "RedstoneConstants",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConstants>;
    getContractAt(
      name: "RedstoneConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConsumerBase>;
    getContractAt(
      name: "RedstoneConsumerBytesBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConsumerBytesBase>;
    getContractAt(
      name: "RedstoneConsumerNumericBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConsumerNumericBase>;
    getContractAt(
      name: "RedstoneDefaultsLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneDefaultsLib>;
    getContractAt(
      name: "ArbitrumDemoDataServiceConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumDemoDataServiceConsumerBase>;
    getContractAt(
      name: "ArbitrumProdDataServiceConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumProdDataServiceConsumerBase>;
    getContractAt(
      name: "AvalancheDataServiceConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AvalancheDataServiceConsumerBase>;
    getContractAt(
      name: "AvalancheDemoConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AvalancheDemoConsumerBase>;
    getContractAt(
      name: "KydServiceConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KydServiceConsumerBase>;
    getContractAt(
      name: "MainDemoConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MainDemoConsumerBase>;
    getContractAt(
      name: "PrimaryDemoDataServiceConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrimaryDemoDataServiceConsumerBase>;
    getContractAt(
      name: "PrimaryProdDataServiceConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrimaryProdDataServiceConsumerBase>;
    getContractAt(
      name: "StagingDemoDataServiceConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StagingDemoDataServiceConsumerBase>;
    getContractAt(
      name: "NumericArrayLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NumericArrayLib>;
    getContractAt(
      name: "SignatureLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignatureLib>;
    getContractAt(
      name: "AuthorisedMockSignersBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuthorisedMockSignersBase>;
    getContractAt(
      name: "RedstoneConsumerBytesMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConsumerBytesMock>;
    getContractAt(
      name: "RedstoneConsumerNumericMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConsumerNumericMock>;
    getContractAt(
      name: "Benchmark",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Benchmark>;
    getContractAt(
      name: "HashCalldataModel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HashCalldataModel>;
    getContractAt(
      name: "SampleChainableProxyConnector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleChainableProxyConnector>;
    getContractAt(
      name: "SampleChainableStorageProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleChainableStorageProxy>;
    getContractAt(
      name: "SampleChainableStorageProxyConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleChainableStorageProxyConsumer>;
    getContractAt(
      name: "SampleProxyConnectorConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleProxyConnectorConsumer>;
    getContractAt(
      name: "StorageStructureModel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StorageStructureModel>;
    getContractAt(
      name: "SampleBitmapLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleBitmapLib>;
    getContractAt(
      name: "SampleDuplicatedDataFeeds",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleDuplicatedDataFeeds>;
    getContractAt(
      name: "SampleForLocalhostMockTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleForLocalhostMockTest>;
    getContractAt(
      name: "SampleKydServiceConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleKydServiceConsumer>;
    getContractAt(
      name: "SampleNumericArrayLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleNumericArrayLib>;
    getContractAt(
      name: "SampleProxyConnector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleProxyConnector>;
    getContractAt(
      name: "SampleRedstoneConsumerBytesMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleRedstoneConsumerBytesMock>;
    getContractAt(
      name: "SampleRedstoneConsumerBytesMockManyDataFeeds",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleRedstoneConsumerBytesMockManyDataFeeds>;
    getContractAt(
      name: "SampleRedstoneConsumerBytesMockStrings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleRedstoneConsumerBytesMockStrings>;
    getContractAt(
      name: "SampleRedstoneConsumerNumericMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleRedstoneConsumerNumericMock>;
    getContractAt(
      name: "SampleRedstoneConsumerNumericMockManyDataFeeds",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleRedstoneConsumerNumericMockManyDataFeeds>;
    getContractAt(
      name: "SampleRedstoneDataServiceConsumerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleRedstoneDataServiceConsumerMock>;
    getContractAt(
      name: "SampleRedstoneDefaultsLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleRedstoneDefaultsLib>;
    getContractAt(
      name: "SampleStorageProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleStorageProxy>;
    getContractAt(
      name: "SampleStorageProxyConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleStorageProxyConsumer>;
    getContractAt(
      name: "ERC20Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Initializable>;
    getContractAt(
      name: "SampleSyntheticToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleSyntheticToken>;
    getContractAt(
      name: "SampleWithEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleWithEvents>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
