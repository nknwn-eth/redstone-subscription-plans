/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SampleRedstoneConsumerNumericMockManyDataFeedsInterface
  extends utils.Interface {
  functions: {
    "aggregateValues(uint256[])": FunctionFragment;
    "extractTimestampsAndAssertAllAreEqual()": FunctionFragment;
    "firstValue()": FunctionFragment;
    "getAllMockAuthorised(address)": FunctionFragment;
    "getAllMockExceptLastOneAuthorised(address)": FunctionFragment;
    "getAuthorisedMockSignerIndex(address)": FunctionFragment;
    "getAuthorisedSignerIndex(address)": FunctionFragment;
    "getDataServiceId()": FunctionFragment;
    "getUniqueSignersThreshold()": FunctionFragment;
    "save2ValuesAndTimestampInStorage(bytes32[])": FunctionFragment;
    "save2ValuesInStorage(bytes32[])": FunctionFragment;
    "save2ValuesInStorageWithManualPayload(bytes32[],bytes)": FunctionFragment;
    "secondValue()": FunctionFragment;
    "timestampFromData()": FunctionFragment;
    "validateTimestamp(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aggregateValues"
      | "extractTimestampsAndAssertAllAreEqual"
      | "firstValue"
      | "getAllMockAuthorised"
      | "getAllMockExceptLastOneAuthorised"
      | "getAuthorisedMockSignerIndex"
      | "getAuthorisedSignerIndex"
      | "getDataServiceId"
      | "getUniqueSignersThreshold"
      | "save2ValuesAndTimestampInStorage"
      | "save2ValuesInStorage"
      | "save2ValuesInStorageWithManualPayload"
      | "secondValue"
      | "timestampFromData"
      | "validateTimestamp"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregateValues",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "extractTimestampsAndAssertAllAreEqual",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMockAuthorised",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMockExceptLastOneAuthorised",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorisedMockSignerIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorisedSignerIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataServiceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniqueSignersThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "save2ValuesAndTimestampInStorage",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "save2ValuesInStorage",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "save2ValuesInStorageWithManualPayload",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "secondValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timestampFromData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateTimestamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "aggregateValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractTimestampsAndAssertAllAreEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "firstValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllMockAuthorised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMockExceptLastOneAuthorised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorisedMockSignerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorisedSignerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataServiceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniqueSignersThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "save2ValuesAndTimestampInStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "save2ValuesInStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "save2ValuesInStorageWithManualPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampFromData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTimestamp",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SampleRedstoneConsumerNumericMockManyDataFeeds
  extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SampleRedstoneConsumerNumericMockManyDataFeedsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { extractedTimestamp: BigNumber }>;

    firstValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllMockAuthorised(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getAllMockExceptLastOneAuthorised(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getAuthorisedMockSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDataServiceId(overrides?: CallOverrides): Promise<[string]>;

    getUniqueSignersThreshold(overrides?: CallOverrides): Promise<[number]>;

    save2ValuesAndTimestampInStorage(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    save2ValuesInStorage(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    save2ValuesInStorageWithManualPayload(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    secondValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    timestampFromData(overrides?: CallOverrides): Promise<[BigNumber]>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  aggregateValues(
    values: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  extractTimestampsAndAssertAllAreEqual(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  firstValue(overrides?: CallOverrides): Promise<BigNumber>;

  getAllMockAuthorised(
    signerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getAllMockExceptLastOneAuthorised(
    signerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getAuthorisedMockSignerIndex(
    signerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getAuthorisedSignerIndex(
    signerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getDataServiceId(overrides?: CallOverrides): Promise<string>;

  getUniqueSignersThreshold(overrides?: CallOverrides): Promise<number>;

  save2ValuesAndTimestampInStorage(
    dataFeedIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  save2ValuesInStorage(
    dataFeedIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  save2ValuesInStorageWithManualPayload(
    dataFeedIds: PromiseOrValue<BytesLike>[],
    arg1: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  secondValue(overrides?: CallOverrides): Promise<BigNumber>;

  timestampFromData(overrides?: CallOverrides): Promise<BigNumber>;

  validateTimestamp(
    receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstValue(overrides?: CallOverrides): Promise<BigNumber>;

    getAllMockAuthorised(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getAllMockExceptLastOneAuthorised(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getAuthorisedMockSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getDataServiceId(overrides?: CallOverrides): Promise<string>;

    getUniqueSignersThreshold(overrides?: CallOverrides): Promise<number>;

    save2ValuesAndTimestampInStorage(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    save2ValuesInStorage(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    save2ValuesInStorageWithManualPayload(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    secondValue(overrides?: CallOverrides): Promise<BigNumber>;

    timestampFromData(overrides?: CallOverrides): Promise<BigNumber>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstValue(overrides?: CallOverrides): Promise<BigNumber>;

    getAllMockAuthorised(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllMockExceptLastOneAuthorised(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorisedMockSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataServiceId(overrides?: CallOverrides): Promise<BigNumber>;

    getUniqueSignersThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    save2ValuesAndTimestampInStorage(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    save2ValuesInStorage(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    save2ValuesInStorageWithManualPayload(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    secondValue(overrides?: CallOverrides): Promise<BigNumber>;

    timestampFromData(overrides?: CallOverrides): Promise<BigNumber>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllMockAuthorised(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllMockExceptLastOneAuthorised(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorisedMockSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataServiceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniqueSignersThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    save2ValuesAndTimestampInStorage(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    save2ValuesInStorage(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    save2ValuesInStorageWithManualPayload(
      dataFeedIds: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    secondValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timestampFromData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
