/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ArbitrumProdDataServiceConsumerBase,
  ArbitrumProdDataServiceConsumerBaseInterface,
} from "../../../contracts/data-services/ArbitrumProdDataServiceConsumerBase";

const _abi = [
  {
    inputs: [],
    name: "CalldataMustHaveValidPayload",
    type: "error",
  },
  {
    inputs: [],
    name: "CalldataOverOrUnderFlow",
    type: "error",
  },
  {
    inputs: [],
    name: "CanNotPickMedianOfEmptyArray",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampMustNotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [],
    name: "DataTimestampCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "EachSignerMustProvideTheSameValue",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyCalldataPointersArr",
    type: "error",
  },
  {
    inputs: [],
    name: "GetDataServiceIdNotImplemented",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectUnsignedMetadataSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedSignersCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredSignersCount",
        type: "uint256",
      },
    ],
    name: "InsufficientNumberOfUniqueSigners",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCalldataPointer",
    type: "error",
  },
  {
    inputs: [],
    name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "SignerNotAuthorised",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockTimestamp",
        type: "uint256",
      },
    ],
    name: "TimestampFromTooLongFuture",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockTimestamp",
        type: "uint256",
      },
    ],
    name: "TimestampIsTooOld",
    type: "error",
  },
  {
    inputs: [],
    name: "TimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "valueByteSize",
        type: "uint256",
      },
    ],
    name: "TooLargeValueByteSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "aggregateValues",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "extractTimestampsAndAssertAllAreEqual",
    outputs: [
      {
        internalType: "uint256",
        name: "extractedTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAuthorisedSignerIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataServiceId",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUniqueSignersThreshold",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampMilliseconds",
        type: "uint256",
      },
    ],
    name: "validateTimestamp",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ba7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063c274583a11610050578063c274583a146100ca578063f50b2efe14610109578063f90c49241461011e57600080fd5b80633ce142f51461007757806355a547d5146100a1578063b24ebfcc146100b7575b600080fd5b61008a610085366004610881565b610125565b60405160ff90911681526020015b60405180910390f35b6100a9610293565b604051908152602001610098565b6100a96100c53660046108e6565b6103ec565b604080518082018252601681527f72656473746f6e652d617262697472756d2d70726f64000000000000000000006020820152905161009891906109c2565b61011c610117366004610a2e565b6103fd565b005b600361008a565b600073ffffffffffffffffffffffffffffffffffffffff821673345efd26098e173f811e3b9af1b0e0a11872b38b0361016057506000919050565b73ffffffffffffffffffffffffffffffffffffffff821673bd0c5ccd85d5831b10e3e49527b8cd67e2efaf390361019957506001919050565b73ffffffffffffffffffffffffffffffffffffffff8216732f3e8ec88c01593d10ca9461c807660ff2d8db28036101d257506002919050565b73ffffffffffffffffffffffffffffffffffffffff821673b7f154bb5491565d215f4eb1c3fe3e84960627af0361020b57506003919050565b73ffffffffffffffffffffffffffffffffffffffff821673e6b0de8f4b31f137d3c59b5a0a71e66e7d504ef90361024457506004919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b60008061029e610409565b905060006102ab8261053e565b925061ffff16905060008190036102ee576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156103e6576000610304846105a6565b9050600080610314606887610a76565b905060006103228236610a89565b9050803592508265ffffffffffff1660000361036a576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87600003610382578265ffffffffffff1697506103c3565b878365ffffffffffff16146103c3576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103cd8488610a76565b96505050505080806103de90610a9c565b9150506102f1565b50505090565b60006103f7826105e2565b92915050565b610406816105ed565b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610471576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600036602911156104ae576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7360135600060096104e7600362ffffff8516610a76565b6104f19190610a76565b9050366104ff600283610a76565b1115610537576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b6000808061054d602085610a76565b905036811115610589576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b368190033592508261059c600286610a76565b9250925050915091565b60008060006105b4846106a3565b9092509050604e6105c6826020610a76565b6105d09084610ad4565b6105da9190610a76565b949350505050565b60006103f7826106f6565b60006105fb6103e883610b1a565b90508042101561065657603c6106114283610a89565b1115610652576040517fb6b0916d0000000000000000000000000000000000000000000000000000000081526004810182905242602482015260440161028a565b5050565b60b46106628242610a89565b1115610652576040517f0321d0b50000000000000000000000000000000000000000000000000000000081526004810182905242602482015260440161028a565b60008080808060206106b6604188610a76565b6106c09190610a76565b6106ca9036610a89565b8035935090506106db600382610a89565b62ffffff9390931696923563ffffffff169550919350505050565b6000815160020361074d5760028260018151811061071657610716610b2e565b60200260200101518360008151811061073157610731610b2e565b60200260200101516107439190610a76565b6103f79190610b1a565b8151600003610788576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61079182610833565b6000600283516107a19190610b1a565b9050600283516107b19190610b5d565b6000036108115760008382815181106107cc576107cc610b2e565b6020026020010151846001846107e29190610a89565b815181106107f2576107f2610b2e565b60200260200101516108049190610a76565b90506105da600282610b1a565b82818151811061082357610823610b2e565b6020026020010151915050919050565b8051602082016020820281019150805b8281101561087b57815b81811015610872578151815180821015610868578084528183525b505060200161084d565b50602001610843565b50505050565b60006020828403121561089357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461053757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156108f957600080fd5b823567ffffffffffffffff8082111561091157600080fd5b818501915085601f83011261092557600080fd5b813581811115610937576109376108b7565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561097a5761097a6108b7565b60405291825284820192508381018501918883111561099857600080fd5b938501935b828510156109b65784358452938501939285019261099d565b98975050505050505050565b600060208083528351808285015260005b818110156109ef578581018301518582016040015282016109d3565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600060208284031215610a4057600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156103f7576103f7610a47565b818103818111156103f7576103f7610a47565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610acd57610acd610a47565b5060010190565b80820281158282048414176103f7576103f7610a47565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610b2957610b29610aeb565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082610b6c57610b6c610aeb565b50069056fea2646970667358221220a25bbded3691e3ca1991817e6f15aef1d94d6c5cccb700675c99ba9bba9432e164736f6c63430008110033";

type ArbitrumProdDataServiceConsumerBaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArbitrumProdDataServiceConsumerBaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArbitrumProdDataServiceConsumerBase__factory extends ContractFactory {
  constructor(...args: ArbitrumProdDataServiceConsumerBaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ArbitrumProdDataServiceConsumerBase> {
    return super.deploy(
      overrides || {}
    ) as Promise<ArbitrumProdDataServiceConsumerBase>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ArbitrumProdDataServiceConsumerBase {
    return super.attach(address) as ArbitrumProdDataServiceConsumerBase;
  }
  override connect(
    signer: Signer
  ): ArbitrumProdDataServiceConsumerBase__factory {
    return super.connect(
      signer
    ) as ArbitrumProdDataServiceConsumerBase__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbitrumProdDataServiceConsumerBaseInterface {
    return new utils.Interface(
      _abi
    ) as ArbitrumProdDataServiceConsumerBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArbitrumProdDataServiceConsumerBase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ArbitrumProdDataServiceConsumerBase;
  }
}
