/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MainDemoConsumerBase,
  MainDemoConsumerBaseInterface,
} from "../../../contracts/data-services/MainDemoConsumerBase";

const _abi = [
  {
    inputs: [],
    name: "CalldataMustHaveValidPayload",
    type: "error",
  },
  {
    inputs: [],
    name: "CalldataOverOrUnderFlow",
    type: "error",
  },
  {
    inputs: [],
    name: "CanNotPickMedianOfEmptyArray",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampMustNotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [],
    name: "DataTimestampCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "EachSignerMustProvideTheSameValue",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyCalldataPointersArr",
    type: "error",
  },
  {
    inputs: [],
    name: "GetDataServiceIdNotImplemented",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectUnsignedMetadataSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedSignersCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredSignersCount",
        type: "uint256",
      },
    ],
    name: "InsufficientNumberOfUniqueSigners",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCalldataPointer",
    type: "error",
  },
  {
    inputs: [],
    name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "SignerNotAuthorised",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockTimestamp",
        type: "uint256",
      },
    ],
    name: "TimestampFromTooLongFuture",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockTimestamp",
        type: "uint256",
      },
    ],
    name: "TimestampIsTooOld",
    type: "error",
  },
  {
    inputs: [],
    name: "TimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "valueByteSize",
        type: "uint256",
      },
    ],
    name: "TooLargeValueByteSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "aggregateValues",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "extractTimestampsAndAssertAllAreEqual",
    outputs: [
      {
        internalType: "uint256",
        name: "extractedTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAuthorisedSignerIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataServiceId",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUniqueSignersThreshold",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampMilliseconds",
        type: "uint256",
      },
    ],
    name: "validateTimestamp",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ac3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063c274583a11610050578063c274583a146100ca578063f50b2efe14610109578063f90c49241461011e57600080fd5b80633ce142f51461007757806355a547d5146100a1578063b24ebfcc146100b7575b600080fd5b61008a61008536600461079d565b610125565b60405160ff90911681526020015b60405180910390f35b6100a96101af565b604051908152602001610098565b6100a96100c5366004610802565b610308565b604080518082018252601281527f72656473746f6e652d6d61696e2d64656d6f00000000000000000000000000006020820152905161009891906108de565b61011c61011736600461094a565b610319565b005b600161008a565b600073ffffffffffffffffffffffffffffffffffffffff8216730c39486f770b26f5527bbbf942726537986cd7eb0361016057506000919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806101ba610325565b905060006101c78261045a565b925061ffff169050600081900361020a576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610302576000610220846104c2565b9050600080610230606887610992565b9050600061023e82366109a5565b9050803592508265ffffffffffff16600003610286576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8760000361029e578265ffffffffffff1697506102df565b878365ffffffffffff16146102df576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102e98488610992565b96505050505080806102fa906109b8565b91505061020d565b50505090565b6000610313826104fe565b92915050565b61032281610509565b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601358116148061038d576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600036602911156103ca576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610403600362ffffff8516610992565b61040d9190610992565b90503661041b600283610992565b1115610453576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b60008080610469602085610992565b9050368111156104a5576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36819003359250826104b8600286610992565b9250925050915091565b60008060006104d0846105bf565b9092509050604e6104e2826020610992565b6104ec90846109f0565b6104f69190610992565b949350505050565b600061031382610612565b60006105176103e883610a36565b90508042101561057257603c61052d42836109a5565b111561056e576040517fb6b0916d000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016101a6565b5050565b60b461057e82426109a5565b111561056e576040517f0321d0b5000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016101a6565b60008080808060206105d2604188610992565b6105dc9190610992565b6105e690366109a5565b8035935090506105f76003826109a5565b62ffffff9390931696923563ffffffff169550919350505050565b600081516002036106695760028260018151811061063257610632610a4a565b60200260200101518360008151811061064d5761064d610a4a565b602002602001015161065f9190610992565b6103139190610a36565b81516000036106a4576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106ad8261074f565b6000600283516106bd9190610a36565b9050600283516106cd9190610a79565b60000361072d5760008382815181106106e8576106e8610a4a565b6020026020010151846001846106fe91906109a5565b8151811061070e5761070e610a4a565b60200260200101516107209190610992565b90506104f6600282610a36565b82818151811061073f5761073f610a4a565b6020026020010151915050919050565b8051602082016020820281019150805b8281101561079757815b8181101561078e578151815180821015610784578084528183525b5050602001610769565b5060200161075f565b50505050565b6000602082840312156107af57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461045357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561081557600080fd5b823567ffffffffffffffff8082111561082d57600080fd5b818501915085601f83011261084157600080fd5b813581811115610853576108536107d3565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610896576108966107d3565b6040529182528482019250838101850191888311156108b457600080fd5b938501935b828510156108d2578435845293850193928501926108b9565b98975050505050505050565b600060208083528351808285015260005b8181101561090b578581018301518582016040015282016108ef565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561095c57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561031357610313610963565b8181038181111561031357610313610963565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109e9576109e9610963565b5060010190565b808202811582820484141761031357610313610963565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610a4557610a45610a07565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082610a8857610a88610a07565b50069056fea26469706673582212207eecd5e2806d7f4af445eaf99491a096ab726f5d8c319e43286251b60ffb183864736f6c63430008110033";

type MainDemoConsumerBaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MainDemoConsumerBaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MainDemoConsumerBase__factory extends ContractFactory {
  constructor(...args: MainDemoConsumerBaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MainDemoConsumerBase> {
    return super.deploy(overrides || {}) as Promise<MainDemoConsumerBase>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MainDemoConsumerBase {
    return super.attach(address) as MainDemoConsumerBase;
  }
  override connect(signer: Signer): MainDemoConsumerBase__factory {
    return super.connect(signer) as MainDemoConsumerBase__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MainDemoConsumerBaseInterface {
    return new utils.Interface(_abi) as MainDemoConsumerBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MainDemoConsumerBase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MainDemoConsumerBase;
  }
}
