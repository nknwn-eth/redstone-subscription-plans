/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SampleForLocalhostMockTest,
  SampleForLocalhostMockTestInterface,
} from "../../../contracts/samples/SampleForLocalhostMockTest";

const _abi = [
  {
    inputs: [],
    name: "CalldataMustHaveValidPayload",
    type: "error",
  },
  {
    inputs: [],
    name: "CalldataOverOrUnderFlow",
    type: "error",
  },
  {
    inputs: [],
    name: "CanNotPickMedianOfEmptyArray",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampMustNotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [],
    name: "DataTimestampCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "EachSignerMustProvideTheSameValue",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyCalldataPointersArr",
    type: "error",
  },
  {
    inputs: [],
    name: "GetDataServiceIdNotImplemented",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectUnsignedMetadataSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedSignersCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredSignersCount",
        type: "uint256",
      },
    ],
    name: "InsufficientNumberOfUniqueSigners",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCalldataPointer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "signedHash",
        type: "bytes32",
      },
    ],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "SignerNotAuthorised",
    type: "error",
  },
  {
    inputs: [],
    name: "TimestampIsNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "TimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "valueByteSize",
        type: "uint256",
      },
    ],
    name: "TooLargeValueByteSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "aggregateValues",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "dataFeedIds",
        type: "bytes32[]",
      },
    ],
    name: "extractOracleValuesView",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "extractTimestampsAndAssertAllAreEqual",
    outputs: [
      {
        internalType: "uint256",
        name: "extractedTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAllMockAuthorised",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAllMockExceptLastOneAuthorised",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAuthorisedMockSignerIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAuthorisedSignerIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataServiceId",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUniqueSignersThreshold",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampMilliseconds",
        type: "uint256",
      },
    ],
    name: "validateTimestamp",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061190c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063b24ebfcc11610076578063d22158fa1161005b578063d22158fa14610175578063f50b2efe14610188578063f90c49241461019d57600080fd5b8063b24ebfcc1461014d578063c274583a1461016057600080fd5b8063429989f0116100a7578063429989f01461011157806355a547d51461012457806395262d9f1461013a57600080fd5b80633ca611a3146100c35780633ce142f5146100ec575b600080fd5b6100d66100d136600461152d565b6101a4565b6040516100e391906115a2565b60405180910390f35b6100ff6100fa3660046115e6565b6101eb565b60405160ff90911681526020016100e3565b6100ff61011f3660046115e6565b6101f6565b61012c6106bb565b6040519081526020016100e3565b6100ff6101483660046115e6565b610814565b61012c61015b36600461164b565b61081f565b61016861082a565b6040516100e39190611727565b6100ff6101833660046115e6565b61085e565b61019b610196366004611793565b6108e4565b005b60016100ff565b60606101e283838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061092792505050565b90505b92915050565b60006101e582610814565b600073ffffffffffffffffffffffffffffffffffffffff821673f39fd6e51aad88f6f4ce6ab8827279cfffb922660361023157506000919050565b73ffffffffffffffffffffffffffffffffffffffff82167370997970c51812dc3a010c7d01b50e0d17dc79c80361026a57506001919050565b73ffffffffffffffffffffffffffffffffffffffff8216733c44cdddb6a900fa2b585dd299e03d12fa4293bc036102a357506002919050565b73ffffffffffffffffffffffffffffffffffffffff82167390f79bf6eb2c4f870365e785982e1f101e93b906036102dc57506003919050565b73ffffffffffffffffffffffffffffffffffffffff82167315d34aaf54267db7d7c367839aaf71a00a2c6a650361031557506004919050565b73ffffffffffffffffffffffffffffffffffffffff8216739965507d1a55bcc2695c58ba16fb37d819b0a4dc0361034e57506005919050565b73ffffffffffffffffffffffffffffffffffffffff821673976ea74026e726554db657fa54763abd0c3a0aa90361038757506006919050565b73ffffffffffffffffffffffffffffffffffffffff82167314dc79964da2c08b23698b3d3cc7ca32193d9955036103c057506007919050565b73ffffffffffffffffffffffffffffffffffffffff82167323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f036103f957506008919050565b73ffffffffffffffffffffffffffffffffffffffff821673a0ee7a142d267c1f36714e4a8f75612f20a797200361043257506009919050565b73ffffffffffffffffffffffffffffffffffffffff821673bcd4042de499d14e55001ccbb24a551f3b9540960361046b5750600a919050565b73ffffffffffffffffffffffffffffffffffffffff82167371be63f3384f5fb98995898a86b02fb2426c5788036104a45750600b919050565b73ffffffffffffffffffffffffffffffffffffffff821673fabb0ac9d68b0b445fb7357272ff202c5651694a036104dd5750600c919050565b73ffffffffffffffffffffffffffffffffffffffff8216731cbd3b2770909d4e10f157cabc84c7264073c9ec036105165750600d919050565b73ffffffffffffffffffffffffffffffffffffffff821673df3e18d64bc6a983f673ab319ccae4f1a57c70970361054f5750600e919050565b73ffffffffffffffffffffffffffffffffffffffff821673cd3b766ccdd6ae721141f452c550ca635964ce71036105885750600f919050565b73ffffffffffffffffffffffffffffffffffffffff8216732546bcd3c84621e976d8185a91a922ae77ecec30036105c157506010919050565b73ffffffffffffffffffffffffffffffffffffffff821673bda5747bfd65f08deb54cb465eb87d40e51b197e036105fa57506011919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd2fd4581271e230360230f9337d5c0430bf44c00361063357506012919050565b73ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c11990361066c57506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806106c6610949565b905060006106d382610a7e565b925061ffff1690506000819003610716576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561080e57600061072c84610ae6565b905060008061073c6068876117db565b9050600061074a82366117ee565b9050803592508265ffffffffffff16600003610792576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876000036107aa578265ffffffffffff1697506107eb565b878365ffffffffffff16146107eb576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107f584886117db565b965050505050808061080690611801565b915050610719565b50505090565b60006101e58261085e565b60006101e582610b22565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c1199036108db576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016106b2565b6101e5826101f6565b6501812f2590c0811015610924576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b606060008061093584610b2d565b91509150610942816108e4565b5092915050565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0360135811614806109b1576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600036602911156109ee576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610a27600362ffffff85166117db565b610a3191906117db565b905036610a3f6002836117db565b1115610a77576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b60008080610a8d6020856117db565b905036811115610ac9576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3681900335925082610adc6002866117db565b9250925050915091565b6000806000610af484610d7a565b9092509050604e610b068260206117db565b610b109084611839565b610b1a91906117db565b949350505050565b60006101e582610dcd565b6060600080835167ffffffffffffffff811115610b4c57610b4c61161c565b604051908082528060200260200182016040528015610b75578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610b9457610b9461161c565b604051908082528060200260200182016040528015610bbd578160200160208202803683370190505b5090506000855167ffffffffffffffff811115610bdc57610bdc61161c565b604051908082528060200260200182016040528015610c0f57816020015b6060815260200190600190039081610bfa5790505b509050600160005b8751811015610c88578167ffffffffffffffff811115610c3957610c3961161c565b604051908082528060200260200182016040528015610c62578160200160208202803683370190505b50838281518110610c7557610c75611850565b6020908102919091010152600101610c17565b506000610c93610949565b90506000610ca082610a7e565b60405190935061ffff909116915060005b82811015610d61576000610cc88c8a8a8a89610f0a565b90955090506000819003610d08576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b898114610d515789600003610d1f57809950610d51565b6040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060208201604052600101610cb1565b50610d6c85886111b3565b985050505050505050915091565b6000808080806020610d8d6041886117db565b610d9791906117db565b610da190366117ee565b803593509050610db26003826117ee565b62ffffff9390931696923563ffffffff169550919350505050565b60008151600203610e2457600282600181518110610ded57610ded611850565b602002602001015183600081518110610e0857610e08611850565b6020026020010151610e1a91906117db565b6101e591906118ae565b8151600003610e5f576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e68826112db565b600060028351610e7891906118ae565b905060028351610e8891906118c2565b600003610ee8576000838281518110610ea357610ea3611850565b602002602001015184600184610eb991906117ee565b81518110610ec957610ec9611850565b6020026020010151610edb91906117db565b9050610b1a6002826118ae565b828181518110610efa57610efa611850565b6020026020010151915050919050565b6000806000806000610f1b86610d7a565b909250905060008060608180600d610f346020886117db565b610f3e9089611839565b610f4891906117db565b91506000610f5760688d6117db565b610f6190366117ee565b9050600083610f7160418f6117db565b610f7b91906117db565b610f8590366117ee565b9050610f918482610fa4565b9450836020860120955081359250610fe6565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b8265ffffffffffff169a506110078660418f61100291906117db565b611329565b9650611012876101eb565b60ff16995050505050505050604e8661102b91906117db565b955060008060005b848110156111a0576020611047858b6117db565b61105191906117db565b985061105d89856114c1565b909350915060005b8d51811015611197578d818151811061108057611080611850565b6020026020010151840361118f5760008c82815181106110a2576110a2611850565b602002602001015190506110bb81896001901b16151590565b1580156110e45750600160ff168e83815181106110da576110da611850565b6020026020010151105b1561118957838c83815181106110fc576110fc611850565b60200260200101518f848151811061111657611116611850565b60200260200101518151811061112e5761112e611850565b6020026020010181815250508d828151811061114c5761114c611850565b60200260200101805180919061116190611801565b9052506001881b81178d838151811061117c5761117c611850565b6020026020010181815250505b50611197565b600101611065565b50600101611033565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff8111156111d1576111d161161c565b6040519080825280602002602001820160405280156111fa578160200160208202803683370190505b509050600160005b85518110156112d1578185828151811061121e5761121e611850565b602002602001015110156112845784818151811061123e5761123e611850565b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016106b2929190918252602082015260400190565b60006112a887838151811061129b5761129b611850565b602002602001015161081f565b9050808483815181106112bd576112bd611850565b602090810291909101015250600101611202565b5090949350505050565b8051602082016020820281019150805b8281101561132357815b8181101561131a578151815180821015611310578084528183525b50506020016112f5565b506020016112eb565b50505050565b60003682900380359060208101359060400135831a601b8114801590611353575060ff8116601c14155b1561138d576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016106b2565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156113ea576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016106b2565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa15801561143d573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015194505073ffffffffffffffffffffffffffffffffffffffff84166114b8576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016106b2565b50505092915050565b600080806114cf85366117ee565b9050803592506020810135915060218410611519576040517fc000fc42000000000000000000000000000000000000000000000000000000008152600481018590526024016106b2565b8360200360080282901c9150509250929050565b6000806020838503121561154057600080fd5b823567ffffffffffffffff8082111561155857600080fd5b818501915085601f83011261156c57600080fd5b81358181111561157b57600080fd5b8660208260051b850101111561159057600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b818110156115da578351835292840192918401916001016115be565b50909695505050505050565b6000602082840312156115f857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610a7757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561165e57600080fd5b823567ffffffffffffffff8082111561167657600080fd5b818501915085601f83011261168a57600080fd5b81358181111561169c5761169c61161c565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156116df576116df61161c565b6040529182528482019250838101850191888311156116fd57600080fd5b938501935b8285101561171b57843584529385019392850192611702565b98975050505050505050565b600060208083528351808285015260005b8181101561175457858101830151858201604001528201611738565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156117a557600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156101e5576101e56117ac565b818103818111156101e5576101e56117ac565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611832576118326117ac565b5060010190565b80820281158282048414176101e5576101e56117ac565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826118bd576118bd61187f565b500490565b6000826118d1576118d161187f565b50069056fea2646970667358221220a4c2b6a02627381d31c2a36e45f328fcd709d69ae8e077b7f70a46475608501764736f6c63430008110033";

type SampleForLocalhostMockTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SampleForLocalhostMockTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SampleForLocalhostMockTest__factory extends ContractFactory {
  constructor(...args: SampleForLocalhostMockTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SampleForLocalhostMockTest> {
    return super.deploy(overrides || {}) as Promise<SampleForLocalhostMockTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SampleForLocalhostMockTest {
    return super.attach(address) as SampleForLocalhostMockTest;
  }
  override connect(signer: Signer): SampleForLocalhostMockTest__factory {
    return super.connect(signer) as SampleForLocalhostMockTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleForLocalhostMockTestInterface {
    return new utils.Interface(_abi) as SampleForLocalhostMockTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SampleForLocalhostMockTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SampleForLocalhostMockTest;
  }
}
