/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SampleNumericArrayLib,
  SampleNumericArrayLibInterface,
} from "../../../contracts/samples/SampleNumericArrayLib";

const _abi = [
  {
    inputs: [],
    name: "CanNotPickMedianOfEmptyArray",
    type: "error",
  },
  {
    inputs: [],
    name: "cachedMedian",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCachedArray",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "arr",
        type: "uint256[]",
      },
    ],
    name: "testArrayUpdatingInStorage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "arr",
        type: "uint256[]",
      },
    ],
    name: "testMedianSelection",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "arr",
        type: "uint256[]",
      },
    ],
    name: "testSortTx",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506105bc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80635dc211a8116100505780635dc211a814610094578063b74ab979146100a7578063fdbf8586146100c557600080fd5b806345ac16491461006c57806356e9d5d814610081575b600080fd5b61007f61007a36600461038b565b6100dc565b005b61007f61008f36600461038b565b6100eb565b61007f6100a236600461038b565b610102565b6100af61010b565b6040516100bc9190610467565b60405180910390f35b6100ce60015481565b6040519081526020016100bc565b6100e581610163565b60015550565b80516100fe9060009060208401906102fc565b5050565b6100eb816102ae565b6060600080548060200260200160405190810160405280929190818152602001828054801561015957602002820191906000526020600020905b815481526020019060010190808311610145575b5050505050905090565b600081516002036101c057600282600181518110610183576101836104ab565b60200260200101518360008151811061019e5761019e6104ab565b60200260200101516101b09190610509565b6101ba919061054b565b92915050565b81516000036101fb576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610204826102ae565b600060028351610214919061054b565b905060028351610224919061055f565b60000361028c57600083828151811061023f5761023f6104ab565b6020026020010151846001846102559190610573565b81518110610265576102656104ab565b60200260200101516102779190610509565b905061028460028261054b565b949350505050565b82818151811061029e5761029e6104ab565b6020026020010151915050919050565b8051602082016020820281019150805b828110156102f657815b818110156102ed5781518151808210156102e3578084528183525b50506020016102c8565b506020016102be565b50505050565b828054828255906000526020600020908101928215610337579160200282015b8281111561033757825182559160200191906001019061031c565b50610343929150610347565b5090565b5b808211156103435760008155600101610348565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561039e57600080fd5b823567ffffffffffffffff808211156103b657600080fd5b818501915085601f8301126103ca57600080fd5b8135818111156103dc576103dc61035c565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561041f5761041f61035c565b60405291825284820192508381018501918883111561043d57600080fd5b938501935b8285101561045b57843584529385019392850192610442565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561049f57835183529284019291840191600101610483565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156101ba576101ba6104da565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261055a5761055a61051c565b500490565b60008261056e5761056e61051c565b500690565b818103818111156101ba576101ba6104da56fea2646970667358221220745fb0f2dd58cca2b7f08dedbaa025547c0c691030ddceb661583614070de20364736f6c63430008110033";

type SampleNumericArrayLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SampleNumericArrayLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SampleNumericArrayLib__factory extends ContractFactory {
  constructor(...args: SampleNumericArrayLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SampleNumericArrayLib> {
    return super.deploy(overrides || {}) as Promise<SampleNumericArrayLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SampleNumericArrayLib {
    return super.attach(address) as SampleNumericArrayLib;
  }
  override connect(signer: Signer): SampleNumericArrayLib__factory {
    return super.connect(signer) as SampleNumericArrayLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleNumericArrayLibInterface {
    return new utils.Interface(_abi) as SampleNumericArrayLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SampleNumericArrayLib {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SampleNumericArrayLib;
  }
}
