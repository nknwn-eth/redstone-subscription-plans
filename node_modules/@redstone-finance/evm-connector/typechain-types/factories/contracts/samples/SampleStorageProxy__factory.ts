/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SampleStorageProxy,
  SampleStorageProxyInterface,
} from "../../../contracts/samples/SampleStorageProxy";

const _abi = [
  {
    inputs: [],
    name: "CalldataMustHaveValidPayload",
    type: "error",
  },
  {
    inputs: [],
    name: "CalldataOverOrUnderFlow",
    type: "error",
  },
  {
    inputs: [],
    name: "CanNotPickMedianOfEmptyArray",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampMustNotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [],
    name: "DataTimestampCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "EachSignerMustProvideTheSameValue",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyCalldataPointersArr",
    type: "error",
  },
  {
    inputs: [],
    name: "GetDataServiceIdNotImplemented",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectUnsignedMetadataSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedSignersCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredSignersCount",
        type: "uint256",
      },
    ],
    name: "InsufficientNumberOfUniqueSigners",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCalldataPointer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "signedHash",
        type: "bytes32",
      },
    ],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "SignerNotAuthorised",
    type: "error",
  },
  {
    inputs: [],
    name: "TimestampIsNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "TimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "valueByteSize",
        type: "uint256",
      },
    ],
    name: "TooLargeValueByteSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "aggregateValues",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "extractTimestampsAndAssertAllAreEqual",
    outputs: [
      {
        internalType: "uint256",
        name: "extractedTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "dataFeedIds",
        type: "bytes32[]",
      },
    ],
    name: "fetchArrayOfStructsUsingProxyDryRun",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "dataValue",
            type: "uint256",
          },
        ],
        internalType: "struct SampleStorageProxy.SamplePoint[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "dataFeedIds",
        type: "bytes32[]",
      },
    ],
    name: "fetchStructOfArraysUsingProxyDryRun",
    outputs: [
      {
        components: [
          {
            internalType: "string[]",
            name: "names",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "dataValues",
            type: "uint256[]",
          },
        ],
        internalType: "struct SampleStorageProxy.SamplePoints",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataFeedId",
        type: "bytes32",
      },
    ],
    name: "fetchStructUsingProxyDryRun",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "dataValue",
            type: "uint256",
          },
        ],
        internalType: "struct SampleStorageProxy.SamplePoint",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataFeedId",
        type: "bytes32",
      },
    ],
    name: "fetchValueUsingProxyDryRun",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "dataFeedIds",
        type: "bytes32[]",
      },
    ],
    name: "fetchValuesUsingProxyDryRun",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAllMockAuthorised",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAllMockExceptLastOneAuthorised",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAuthorisedMockSignerIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAuthorisedSignerIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataServiceId",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataFeedId",
        type: "bytes32",
      },
    ],
    name: "getOracleValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "dataFeedIds",
        type: "bytes32[]",
      },
    ],
    name: "getOracleValues",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUniqueSignersThreshold",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "oracleValues",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sampleContract",
        type: "address",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataFeedId",
        type: "bytes32",
      },
    ],
    name: "saveOracleValueInContractStorage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "dataFeedIds",
        type: "bytes32[]",
      },
    ],
    name: "saveOracleValuesInContractStorage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampMilliseconds",
        type: "uint256",
      },
    ],
    name: "validateTimestamp",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061254d806100206000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806395262d9f116100cd578063df2c65b311610081578063f50b2efe11610066578063f50b2efe14610359578063f5bcb8d61461036c578063f90c49241461038c57600080fd5b8063df2c65b314610326578063ec5986c81461033957600080fd5b8063b24ebfcc116100b2578063b24ebfcc146102eb578063c274583a146102fe578063d22158fa1461031357600080fd5b806395262d9f146102c55780639b606ed9146102d857600080fd5b8063429989f01161012457806355a547d51161010957806355a547d51461028a5780636d90217f1461029257806381fc6884146102a557600080fd5b8063429989f0146102225780634420e4861461023557600080fd5b80632fb8176b116101555780632fb8176b146101c85780633ce142f5146101e85780633d60fee31461020d57600080fd5b80630a709a05146101715780632a5284a91461019a575b600080fd5b61018461017f36600461201c565b610393565b6040516101919190612133565b60405180910390f35b6101ba6101a83660046121d9565b60016020526000908152604090205481565b604051908152602001610191565b6101db6101d636600461201c565b610619565b60405161019191906121f2565b6101fb6101f6366004612205565b610734565b60405160ff9091168152602001610191565b61022061021b3660046121d9565b610745565b005b6101fb610230366004612205565b610760565b610220610243366004612205565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101ba610c25565b6101ba6102a03660046121d9565b610d7e565b6102b86102b33660046121d9565b610e2c565b6040516101919190612264565b6101fb6102d3366004612205565b610f38565b6101db6102e636600461201c565b610f43565b6101ba6102f936600461201c565b610ffc565b610306611007565b6040516101919190612277565b6101fb610321366004612205565b61103b565b61022061033436600461201c565b6110c1565b61034c61034736600461201c565b61113c565b604051610191919061228a565b6102206103673660046121d9565b611357565b6101ba61037a3660046121d9565b60009081526001602052604090205490565b600a6101fb565b604080518082019091526060808252602082015260006103b28361139a565b905060005b835181101561041d578181815181106103d2576103d261230a565b6020026020010151600160008684815181106103f0576103f061230a565b6020026020010151815260200190815260200160002081905550808061041590612368565b9150506103b7565b50600080546040517f9b606ed900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690639b606ed9906104759087906004016123a0565b600060405180830381865afa158015610492573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ba91908101906123e4565b905060006040518060400160405280865167ffffffffffffffff8111156104e3576104e3611f98565b60405190808252806020026020018201604052801561051657816020015b60608152602001906001900390816105015790505b508152602001865167ffffffffffffffff81111561053657610536611f98565b60405190808252806020026020018201604052801561055f578160200160208202803683370190505b509052905060005b85518110156106105760408051808201909152600681527f73616d706c650000000000000000000000000000000000000000000000000000602082015282518051839081106105b8576105b861230a565b60200260200101819052508281815181106105d5576105d561230a565b6020026020010151826020015182815181106105f3576105f361230a565b60209081029190910101528061060881612368565b915050610567565b50949350505050565b606060006106268361139a565b905060005b8351811015610691578181815181106106465761064661230a565b6020026020010151600160008684815181106106645761066461230a565b6020026020010151815260200190815260200160002081905550808061068990612368565b91505061062b565b506000546040517f9b606ed900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690639b606ed9906106e89086906004016123a0565b600060405180830381865afa158015610705573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261072d91908101906123e4565b9392505050565b600061073f82610f38565b92915050565b61074e816113b5565b60009182526001602052604090912055565b600073ffffffffffffffffffffffffffffffffffffffff821673f39fd6e51aad88f6f4ce6ab8827279cfffb922660361079b57506000919050565b73ffffffffffffffffffffffffffffffffffffffff82167370997970c51812dc3a010c7d01b50e0d17dc79c8036107d457506001919050565b73ffffffffffffffffffffffffffffffffffffffff8216733c44cdddb6a900fa2b585dd299e03d12fa4293bc0361080d57506002919050565b73ffffffffffffffffffffffffffffffffffffffff82167390f79bf6eb2c4f870365e785982e1f101e93b9060361084657506003919050565b73ffffffffffffffffffffffffffffffffffffffff82167315d34aaf54267db7d7c367839aaf71a00a2c6a650361087f57506004919050565b73ffffffffffffffffffffffffffffffffffffffff8216739965507d1a55bcc2695c58ba16fb37d819b0a4dc036108b857506005919050565b73ffffffffffffffffffffffffffffffffffffffff821673976ea74026e726554db657fa54763abd0c3a0aa9036108f157506006919050565b73ffffffffffffffffffffffffffffffffffffffff82167314dc79964da2c08b23698b3d3cc7ca32193d99550361092a57506007919050565b73ffffffffffffffffffffffffffffffffffffffff82167323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f0361096357506008919050565b73ffffffffffffffffffffffffffffffffffffffff821673a0ee7a142d267c1f36714e4a8f75612f20a797200361099c57506009919050565b73ffffffffffffffffffffffffffffffffffffffff821673bcd4042de499d14e55001ccbb24a551f3b954096036109d55750600a919050565b73ffffffffffffffffffffffffffffffffffffffff82167371be63f3384f5fb98995898a86b02fb2426c578803610a0e5750600b919050565b73ffffffffffffffffffffffffffffffffffffffff821673fabb0ac9d68b0b445fb7357272ff202c5651694a03610a475750600c919050565b73ffffffffffffffffffffffffffffffffffffffff8216731cbd3b2770909d4e10f157cabc84c7264073c9ec03610a805750600d919050565b73ffffffffffffffffffffffffffffffffffffffff821673df3e18d64bc6a983f673ab319ccae4f1a57c709703610ab95750600e919050565b73ffffffffffffffffffffffffffffffffffffffff821673cd3b766ccdd6ae721141f452c550ca635964ce7103610af25750600f919050565b73ffffffffffffffffffffffffffffffffffffffff8216732546bcd3c84621e976d8185a91a922ae77ecec3003610b2b57506010919050565b73ffffffffffffffffffffffffffffffffffffffff821673bda5747bfd65f08deb54cb465eb87d40e51b197e03610b6457506011919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd2fd4581271e230360230f9337d5c0430bf44c003610b9d57506012919050565b73ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c119903610bd657506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b600080610c30611425565b90506000610c3d82611535565b925061ffff1690506000819003610c80576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610d78576000610c968461159d565b9050600080610ca660688761246a565b90506000610cb4823661247d565b9050803592508265ffffffffffff16600003610cfc576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87600003610d14578265ffffffffffff169750610d55565b878365ffffffffffff1614610d55576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d5f848861246a565b9650505050508080610d7090612368565b915050610c83565b50505090565b6000610d89826113b5565b600083815260016020526040808220929092555490517ff5bcb8d60000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff9091169063f5bcb8d690602401602060405180830381865afa158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190612490565b604080518082019091526060815260006020820152610e4a826113b5565b60008381526001602052604080822092909255805491517ff5bcb8d600000000000000000000000000000000000000000000000000000000815260048101859052909173ffffffffffffffffffffffffffffffffffffffff169063f5bcb8d690602401602060405180830381865afa158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee9190612490565b6040805160808101825260069181019182527f73616d706c650000000000000000000000000000000000000000000000000000606082015290815260208101919091529392505050565b600061073f8261103b565b60606000825167ffffffffffffffff811115610f6157610f61611f98565b604051908082528060200260200182016040528015610f8a578160200160208202803683370190505b50905060005b8351811015610ff55760016000858381518110610faf57610faf61230a565b6020026020010151815260200190815260200160002054828281518110610fd857610fd861230a565b602090810291909101015280610fed81612368565b915050610f90565b5092915050565b600061073f826115d9565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c1199036110b8576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610c1c565b61073f82610760565b60006110cc8261139a565b905060005b8251811015611137578181815181106110ec576110ec61230a565b60200260200101516001600085848151811061110a5761110a61230a565b6020026020010151815260200190815260200160002081905550808061112f90612368565b9150506110d1565b505050565b606060006111498361139a565b905060005b83518110156111b4578181815181106111695761116961230a565b6020026020010151600160008684815181106111875761118761230a565b602002602001015181526020019081526020016000208190555080806111ac90612368565b91505061114e565b50600080546040517f9b606ed900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690639b606ed99061120c9087906004016123a0565b600060405180830381865afa158015611229573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261125191908101906123e4565b90506000845167ffffffffffffffff81111561126f5761126f611f98565b6040519080825280602002602001820160405280156112b557816020015b60408051808201909152606081526000602082015281526020019060019003908161128d5790505b50905060005b85518110156106105760405180604001604052806040518060400160405280600681526020017f73616d706c650000000000000000000000000000000000000000000000000000815250815260200184838151811061131c5761131c61230a565b60200260200101518152508282815181106113395761133961230a565b6020026020010181905250808061134f90612368565b9150506112bb565b6501812f2590c0811015611397576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60606000806113a8846115e4565b91509150610ff581611357565b6040805160018082528183019092526000918291906020808301908036833701905050905082816000815181106113ee576113ee61230a565b6020026020010181815250506114038161139a565b6000815181106114155761141561230a565b6020026020010151915050919050565b60006602ed57011e0000601f193601358116148061146f576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600036602911156114ac576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7360135600060096114e5600362ffffff851661246a565b6114ef919061246a565b9050366114fd60028361246a565b111561072d576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808061154460208561246a565b905036811115611580576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b368190033592508261159360028661246a565b9250925050915091565b60008060006115ab84611831565b9092509050604e6115bd82602061246a565b6115c790846124a9565b6115d1919061246a565b949350505050565b600061073f82611884565b6060600080835167ffffffffffffffff81111561160357611603611f98565b60405190808252806020026020018201604052801561162c578160200160208202803683370190505b5090506000845167ffffffffffffffff81111561164b5761164b611f98565b604051908082528060200260200182016040528015611674578160200160208202803683370190505b5090506000855167ffffffffffffffff81111561169357611693611f98565b6040519080825280602002602001820160405280156116c657816020015b60608152602001906001900390816116b15790505b509050600a60005b875181101561173f578167ffffffffffffffff8111156116f0576116f0611f98565b604051908082528060200260200182016040528015611719578160200160208202803683370190505b5083828151811061172c5761172c61230a565b60209081029190910101526001016116ce565b50600061174a611425565b9050600061175782611535565b60405190935061ffff909116915060005b8281101561181857600061177f8c8a8a8a896119b1565b909550905060008190036117bf576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b89811461180857896000036117d657809950611808565b6040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060208201604052600101611768565b506118238588611c3c565b985050505050505050915091565b600080808080602061184460418861246a565b61184e919061246a565b611858903661247d565b80359350905061186960038261247d565b62ffffff9390931696923563ffffffff169550919350505050565b600081516002036118db576002826001815181106118a4576118a461230a565b6020026020010151836000815181106118bf576118bf61230a565b60200260200101516118d1919061246a565b61073f91906124ef565b8151600003611916576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61191f82611d64565b60006002835161192f91906124ef565b90506002835161193f9190612503565b60000361199f57600083828151811061195a5761195a61230a565b602002602001015184600184611970919061247d565b815181106119805761198061230a565b6020026020010151611992919061246a565b90506115d16002826124ef565b8281815181106114155761141561230a565b60008060008060006119c286611831565b909250905060008060608180600d6119db60208861246a565b6119e590896124a9565b6119ef919061246a565b915060006119fe60688d61246a565b611a08903661247d565b9050600083611a1860418f61246a565b611a22919061246a565b611a2c903661247d565b9050611a388482611a4b565b9450836020860120955081359250611a6f565b60408051838152602081850181019092526000910183838237601f19019392505050565b8265ffffffffffff169a50611a908660418f611a8b919061246a565b611db2565b9650611a9b87610734565b60ff16995050505050505050604e86611ab4919061246a565b955060008060005b84811015611c29576020611ad0858b61246a565b611ada919061246a565b9850611ae68985611f2c565b909350915060005b8d51811015611c20578d8181518110611b0957611b0961230a565b60200260200101518403611c185760008c8281518110611b2b57611b2b61230a565b60200260200101519050611b4481896001901b16151590565b158015611b6d5750600a60ff168e8381518110611b6357611b6361230a565b6020026020010151105b15611c1257838c8381518110611b8557611b8561230a565b60200260200101518f8481518110611b9f57611b9f61230a565b602002602001015181518110611bb757611bb761230a565b6020026020010181815250508d8281518110611bd557611bd561230a565b602002602001018051809190611bea90612368565b9052506001881b81178d8381518110611c0557611c0561230a565b6020026020010181815250505b50611c20565b600101611aee565b50600101611abc565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff811115611c5a57611c5a611f98565b604051908082528060200260200182016040528015611c83578160200160208202803683370190505b509050600a60005b8551811015611d5a5781858281518110611ca757611ca761230a565b60200260200101511015611d0d57848181518110611cc757611cc761230a565b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401610c1c929190918252602082015260400190565b6000611d31878381518110611d2457611d2461230a565b6020026020010151610ffc565b905080848381518110611d4657611d4661230a565b602090810291909101015250600101611c8b565b5090949350505050565b8051602082016020820281019150805b82811015611dac57815b81811015611da3578151815180821015611d99578084528183525b5050602001611d7e565b50602001611d74565b50505050565b60003682900380359060208101359060400135831a601b8114801590611ddc575060ff8116601c14155b15611e16576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610c1c565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611e73576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610c1c565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015611ec6573d6000803e3d6000fd5b5050604051601f19015194505073ffffffffffffffffffffffffffffffffffffffff8416611f23576040517f666b7cba00000000000000000000000000000000000000000000000000000000815260048101879052602401610c1c565b50505092915050565b60008080611f3a853661247d565b9050803592506020810135915060218410611f84576040517fc000fc4200000000000000000000000000000000000000000000000000000000815260048101859052602401610c1c565b8360200360080282901c9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ff057611ff0611f98565b604052919050565b600067ffffffffffffffff82111561201257612012611f98565b5060051b60200190565b6000602080838503121561202f57600080fd5b823567ffffffffffffffff81111561204657600080fd5b8301601f8101851361205757600080fd5b803561206a61206582611ff8565b611fc7565b81815260059190911b8201830190838101908783111561208957600080fd5b928401925b828410156120a75783358252928401929084019061208e565b979650505050505050565b6000815180845260005b818110156120d8576020818501810151868301820152016120bc565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b838110156121285781518752958201959082019060010161210c565b509495945050505050565b6000602080835260608301845160408386015281815180845260808701915060808160051b8801019350848301925060005b818110156121b1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8088860301835261219f8585516120b2565b94509285019291850191600101612165565b5050505090840151838203601f19016040850152906121d081836120f8565b95945050505050565b6000602082840312156121eb57600080fd5b5035919050565b60208152600061072d60208301846120f8565b60006020828403121561221757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461072d57600080fd5b600081516040845261225060408501826120b2565b602093840151949093019390935250919050565b60208152600061072d602083018461223b565b60208152600061072d60208301846120b2565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156122fd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526122eb85835161223b565b945092850192908501906001016122b1565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361239957612399612339565b5060010190565b6020808252825182820181905260009190848201906040850190845b818110156123d8578351835292840192918401916001016123bc565b50909695505050505050565b600060208083850312156123f757600080fd5b825167ffffffffffffffff81111561240e57600080fd5b8301601f8101851361241f57600080fd5b805161242d61206582611ff8565b81815260059190911b8201830190838101908783111561244c57600080fd5b928401925b828410156120a757835182529284019290840190612451565b8082018082111561073f5761073f612339565b8181038181111561073f5761073f612339565b6000602082840312156124a257600080fd5b5051919050565b808202811582820484141761073f5761073f612339565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826124fe576124fe6124c0565b500490565b600082612512576125126124c0565b50069056fea2646970667358221220c4897ab41358d4eb3d2a70fa10093975dc0a6cc10f5b51ea4dd57ea7839338cd64736f6c63430008110033";

type SampleStorageProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SampleStorageProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SampleStorageProxy__factory extends ContractFactory {
  constructor(...args: SampleStorageProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SampleStorageProxy> {
    return super.deploy(overrides || {}) as Promise<SampleStorageProxy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SampleStorageProxy {
    return super.attach(address) as SampleStorageProxy;
  }
  override connect(signer: Signer): SampleStorageProxy__factory {
    return super.connect(signer) as SampleStorageProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleStorageProxyInterface {
    return new utils.Interface(_abi) as SampleStorageProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SampleStorageProxy {
    return new Contract(address, _abi, signerOrProvider) as SampleStorageProxy;
  }
}
