/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SampleRedstoneConsumerNumericMock,
  SampleRedstoneConsumerNumericMockInterface,
} from "../../../contracts/samples/SampleRedstoneConsumerNumericMock";

const _abi = [
  {
    inputs: [],
    name: "CalldataMustHaveValidPayload",
    type: "error",
  },
  {
    inputs: [],
    name: "CalldataOverOrUnderFlow",
    type: "error",
  },
  {
    inputs: [],
    name: "CanNotPickMedianOfEmptyArray",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampMustNotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [],
    name: "DataTimestampCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "EachSignerMustProvideTheSameValue",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyCalldataPointersArr",
    type: "error",
  },
  {
    inputs: [],
    name: "GetDataServiceIdNotImplemented",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectUnsignedMetadataSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedSignersCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredSignersCount",
        type: "uint256",
      },
    ],
    name: "InsufficientNumberOfUniqueSigners",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCalldataPointer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "signedHash",
        type: "bytes32",
      },
    ],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "SignerNotAuthorised",
    type: "error",
  },
  {
    inputs: [],
    name: "TimestampIsNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "TimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "valueByteSize",
        type: "uint256",
      },
    ],
    name: "TooLargeValueByteSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "aggregateValues",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "extractTimestampFromRedstonePayload",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "extractTimestampsAndAssertAllAreEqual",
    outputs: [
      {
        internalType: "uint256",
        name: "extractedTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAllMockAuthorised",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAllMockExceptLastOneAuthorised",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAuthorisedMockSignerIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAuthorisedSignerIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataServiceId",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUniqueSignersThreshold",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataFeedId",
        type: "bytes32",
      },
    ],
    name: "getValueForDataFeedId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataFeedId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "mockArg1",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "mockArg2",
        type: "string",
      },
      {
        internalType: "string",
        name: "mockArg3",
        type: "string",
      },
      {
        internalType: "string",
        name: "mockArg4",
        type: "string",
      },
      {
        internalType: "string",
        name: "mockArg5",
        type: "string",
      },
      {
        internalType: "string",
        name: "mockArg6",
        type: "string",
      },
    ],
    name: "getValueManyParams",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "dataFeedIds",
        type: "bytes32[]",
      },
    ],
    name: "getValuesForDataFeedIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestSavedValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "returnMsgValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "revertWithTestMessage",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "revertWithoutMessage",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataFeedId",
        type: "bytes32",
      },
    ],
    name: "saveOracleValueInContractStorage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampMilliseconds",
        type: "uint256",
      },
    ],
    name: "validateTimestamp",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611bf3806100206000396000f3fe6080604052600436106101295760003560e01c80638e7a4120116100a5578063c274583a11610074578063d6a454c511610059578063d6a454c5146102ff578063f50b2efe14610314578063f90c49241461033457600080fd5b8063c274583a146102bd578063d22158fa146102df57600080fd5b80638e7a41201461026257806395262d9f14610268578063b24ebfcc14610288578063c06a97cb146102a857600080fd5b8063429989f0116100fc57806355a547d5116100e157806355a547d5146102175780635ddf81ba1461022c5780637a1202c81461024257600080fd5b8063429989f0146101ca5780634f178e44146101ea57600080fd5b8063351d31ab1461012e5780633c154daf146101615780633ce142f5146101785780633d60fee3146101aa575b600080fd5b34801561013a57600080fd5b5061014e610149366004611813565b610348565b6040519081526020015b60405180910390f35b34801561016d57600080fd5b5061017661035f565b005b34801561018457600080fd5b506101986101933660046118f8565b6103c6565b60405160ff9091168152602001610158565b3480156101b657600080fd5b506101766101c536600461192e565b6103d7565b3480156101d657600080fd5b506101986101e53660046118f8565b6103e6565b3480156101f657600080fd5b5061020a61020536600461196b565b6108a6565b6040516101589190611a01565b34801561022357600080fd5b5061014e6108b1565b34801561023857600080fd5b5061014e60005481565b34801561024e57600080fd5b5061014e61025d36600461192e565b610a0a565b3461014e565b34801561027457600080fd5b506101986102833660046118f8565b610a15565b34801561029457600080fd5b5061014e6102a336600461196b565b610a20565b3480156102b457600080fd5b50610176600080fd5b3480156102c957600080fd5b506102d2610a2b565b6040516101589190611a45565b3480156102eb57600080fd5b506101986102fa3660046118f8565b610a5f565b34801561030b57600080fd5b5061014e610ae5565b34801561032057600080fd5b5061017661032f36600461192e565b610af4565b34801561034057600080fd5b50600a610198565b600061035388610b37565b98975050505050505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f54657374206d657373616765000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006103d182610a15565b92915050565b6103e081610b37565b60005550565b600073ffffffffffffffffffffffffffffffffffffffff821673f39fd6e51aad88f6f4ce6ab8827279cfffb922660361042157506000919050565b73ffffffffffffffffffffffffffffffffffffffff82167370997970c51812dc3a010c7d01b50e0d17dc79c80361045a57506001919050565b73ffffffffffffffffffffffffffffffffffffffff8216733c44cdddb6a900fa2b585dd299e03d12fa4293bc0361049357506002919050565b73ffffffffffffffffffffffffffffffffffffffff82167390f79bf6eb2c4f870365e785982e1f101e93b906036104cc57506003919050565b73ffffffffffffffffffffffffffffffffffffffff82167315d34aaf54267db7d7c367839aaf71a00a2c6a650361050557506004919050565b73ffffffffffffffffffffffffffffffffffffffff8216739965507d1a55bcc2695c58ba16fb37d819b0a4dc0361053e57506005919050565b73ffffffffffffffffffffffffffffffffffffffff821673976ea74026e726554db657fa54763abd0c3a0aa90361057757506006919050565b73ffffffffffffffffffffffffffffffffffffffff82167314dc79964da2c08b23698b3d3cc7ca32193d9955036105b057506007919050565b73ffffffffffffffffffffffffffffffffffffffff82167323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f036105e957506008919050565b73ffffffffffffffffffffffffffffffffffffffff821673a0ee7a142d267c1f36714e4a8f75612f20a797200361062257506009919050565b73ffffffffffffffffffffffffffffffffffffffff821673bcd4042de499d14e55001ccbb24a551f3b9540960361065b5750600a919050565b73ffffffffffffffffffffffffffffffffffffffff82167371be63f3384f5fb98995898a86b02fb2426c5788036106945750600b919050565b73ffffffffffffffffffffffffffffffffffffffff821673fabb0ac9d68b0b445fb7357272ff202c5651694a036106cd5750600c919050565b73ffffffffffffffffffffffffffffffffffffffff8216731cbd3b2770909d4e10f157cabc84c7264073c9ec036107065750600d919050565b73ffffffffffffffffffffffffffffffffffffffff821673df3e18d64bc6a983f673ab319ccae4f1a57c70970361073f5750600e919050565b73ffffffffffffffffffffffffffffffffffffffff821673cd3b766ccdd6ae721141f452c550ca635964ce71036107785750600f919050565b73ffffffffffffffffffffffffffffffffffffffff8216732546bcd3c84621e976d8185a91a922ae77ecec30036107b157506010919050565b73ffffffffffffffffffffffffffffffffffffffff821673bda5747bfd65f08deb54cb465eb87d40e51b197e036107ea57506011919050565b73ffffffffffffffffffffffffffffffffffffffff821673dd2fd4581271e230360230f9337d5c0430bf44c00361082357506012919050565b73ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c11990361085c57506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016103bd565b60606103d182610ba7565b6000806108bc610bc9565b905060006108c982610ce0565b925061ffff169050600081900361090c576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610a0457600061092284610d48565b9050600080610932606887611ac2565b905060006109408236611ad5565b9050803592508265ffffffffffff16600003610988576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876000036109a0578265ffffffffffff1697506109e1565b878365ffffffffffff16146109e1576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109eb8488611ac2565b96505050505080806109fc90611ae8565b91505061090f565b50505090565b60006103d182610b37565b60006103d182610a5f565b60006103d182610d84565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff8216738626f6940e2eb28930efb4cef49b2d1f2c9c119903610adc576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016103bd565b6103d1826103e6565b6000610aef6108b1565b905090565b6501812f2590c0811015610b34576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b604080516001808252818301909252600091829190602080830190803683370190505090508281600081518110610b7057610b70611b20565b602002602001018181525050610b8581610ba7565b600081518110610b9757610b97611b20565b6020026020010151915050919050565b6060600080610bb584610d8f565b91509150610bc281610af4565b5092915050565b60006602ed57011e0000601f1936013581161480610c13576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610c50576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610c89600362ffffff8516611ac2565b610c939190611ac2565b905036610ca1600283611ac2565b1115610cd9576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b60008080610cef602085611ac2565b905036811115610d2b576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3681900335925082610d3e600286611ac2565b9250925050915091565b6000806000610d5684610fdc565b9092509050604e610d68826020611ac2565b610d729084611b4f565b610d7c9190611ac2565b949350505050565b60006103d18261102f565b6060600080835167ffffffffffffffff811115610dae57610dae611743565b604051908082528060200260200182016040528015610dd7578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610df657610df6611743565b604051908082528060200260200182016040528015610e1f578160200160208202803683370190505b5090506000855167ffffffffffffffff811115610e3e57610e3e611743565b604051908082528060200260200182016040528015610e7157816020015b6060815260200190600190039081610e5c5790505b509050600a60005b8751811015610eea578167ffffffffffffffff811115610e9b57610e9b611743565b604051908082528060200260200182016040528015610ec4578160200160208202803683370190505b50838281518110610ed757610ed7611b20565b6020908102919091010152600101610e79565b506000610ef5610bc9565b90506000610f0282610ce0565b60405190935061ffff909116915060005b82811015610fc3576000610f2a8c8a8a8a8961115c565b90955090506000819003610f6a576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b898114610fb35789600003610f8157809950610fb3565b6040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060208201604052600101610f13565b50610fce85886113e7565b985050505050505050915091565b6000808080806020610fef604188611ac2565b610ff99190611ac2565b6110039036611ad5565b803593509050611014600382611ad5565b62ffffff9390931696923563ffffffff169550919350505050565b600081516002036110865760028260018151811061104f5761104f611b20565b60200260200101518360008151811061106a5761106a611b20565b602002602001015161107c9190611ac2565b6103d19190611b95565b81516000036110c1576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110ca8261150f565b6000600283516110da9190611b95565b9050600283516110ea9190611ba9565b60000361114a57600083828151811061110557611105611b20565b60200260200101518460018461111b9190611ad5565b8151811061112b5761112b611b20565b602002602001015161113d9190611ac2565b9050610d7c600282611b95565b828181518110610b9757610b97611b20565b600080600080600061116d86610fdc565b909250905060008060608180600d611186602088611ac2565b6111909089611b4f565b61119a9190611ac2565b915060006111a960688d611ac2565b6111b39036611ad5565b90506000836111c360418f611ac2565b6111cd9190611ac2565b6111d79036611ad5565b90506111e384826111f6565b945083602086012095508135925061121a565b60408051838152602081850181019092526000910183838237601f19019392505050565b8265ffffffffffff169a5061123b8660418f6112369190611ac2565b61155d565b9650611246876103c6565b60ff16995050505050505050604e8661125f9190611ac2565b955060008060005b848110156113d457602061127b858b611ac2565b6112859190611ac2565b985061129189856116d7565b909350915060005b8d518110156113cb578d81815181106112b4576112b4611b20565b602002602001015184036113c35760008c82815181106112d6576112d6611b20565b602002602001015190506112ef81896001901b16151590565b1580156113185750600a60ff168e838151811061130e5761130e611b20565b6020026020010151105b156113bd57838c838151811061133057611330611b20565b60200260200101518f848151811061134a5761134a611b20565b60200260200101518151811061136257611362611b20565b6020026020010181815250508d828151811061138057611380611b20565b60200260200101805180919061139590611ae8565b9052506001881b81178d83815181106113b0576113b0611b20565b6020026020010181815250505b506113cb565b600101611299565b50600101611267565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff81111561140557611405611743565b60405190808252806020026020018201604052801561142e578160200160208202803683370190505b509050600a60005b8551811015611505578185828151811061145257611452611b20565b602002602001015110156114b85784818151811061147257611472611b20565b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016103bd929190918252602082015260400190565b60006114dc8783815181106114cf576114cf611b20565b6020026020010151610a20565b9050808483815181106114f1576114f1611b20565b602090810291909101015250600101611436565b5090949350505050565b8051602082016020820281019150805b8281101561155757815b8181101561154e578151815180821015611544578084528183525b5050602001611529565b5060200161151f565b50505050565b60003682900380359060208101359060400135831a601b8114801590611587575060ff8116601c14155b156115c1576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016103bd565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561161e576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016103bd565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015611671573d6000803e3d6000fd5b5050604051601f19015194505073ffffffffffffffffffffffffffffffffffffffff84166116ce576040517f666b7cba000000000000000000000000000000000000000000000000000000008152600481018790526024016103bd565b50505092915050565b600080806116e58536611ad5565b905080359250602081013591506021841061172f576040517fc000fc42000000000000000000000000000000000000000000000000000000008152600481018590526024016103bd565b8360200360080282901c9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561179b5761179b611743565b604052919050565b600082601f8301126117b457600080fd5b813567ffffffffffffffff8111156117ce576117ce611743565b6117e16020601f19601f84011601611772565b8181528460208386010111156117f657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060e0888a03121561182e57600080fd5b8735965060208801359550604088013567ffffffffffffffff8082111561185457600080fd5b6118608b838c016117a3565b965060608a013591508082111561187657600080fd5b6118828b838c016117a3565b955060808a013591508082111561189857600080fd5b6118a48b838c016117a3565b945060a08a01359150808211156118ba57600080fd5b6118c68b838c016117a3565b935060c08a01359150808211156118dc57600080fd5b506118e98a828b016117a3565b91505092959891949750929550565b60006020828403121561190a57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610cd957600080fd5b60006020828403121561194057600080fd5b5035919050565b600067ffffffffffffffff82111561196157611961611743565b5060051b60200190565b6000602080838503121561197e57600080fd5b823567ffffffffffffffff81111561199557600080fd5b8301601f810185136119a657600080fd5b80356119b96119b482611947565b611772565b81815260059190911b820183019083810190878311156119d857600080fd5b928401925b828410156119f6578335825292840192908401906119dd565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611a3957835183529284019291840191600101611a1d565b50909695505050505050565b600060208083528351808285015260005b81811015611a7257858101830151858201604001528201611a56565b506000604082860101526040601f19601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156103d1576103d1611a93565b818103818111156103d1576103d1611a93565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b1957611b19611a93565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820281158282048414176103d1576103d1611a93565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611ba457611ba4611b66565b500490565b600082611bb857611bb8611b66565b50069056fea26469706673582212205f786c0963530e12610964a20f0bd88e0f3de38a3db48ff3200dc576c21cb51464736f6c63430008110033";

type SampleRedstoneConsumerNumericMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SampleRedstoneConsumerNumericMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SampleRedstoneConsumerNumericMock__factory extends ContractFactory {
  constructor(...args: SampleRedstoneConsumerNumericMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SampleRedstoneConsumerNumericMock> {
    return super.deploy(
      overrides || {}
    ) as Promise<SampleRedstoneConsumerNumericMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SampleRedstoneConsumerNumericMock {
    return super.attach(address) as SampleRedstoneConsumerNumericMock;
  }
  override connect(signer: Signer): SampleRedstoneConsumerNumericMock__factory {
    return super.connect(signer) as SampleRedstoneConsumerNumericMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleRedstoneConsumerNumericMockInterface {
    return new utils.Interface(
      _abi
    ) as SampleRedstoneConsumerNumericMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SampleRedstoneConsumerNumericMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SampleRedstoneConsumerNumericMock;
  }
}
