"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumericDataPoint = exports.getNumericDataPointDecimals = void 0;
const redstone_constants_1 = require("../common/redstone-constants");
const utils_1 = require("../common/utils");
const DataPoint_1 = require("./DataPoint");
const getNumericDataPointDecimals = (dataPoint) => dataPoint.decimals ?? redstone_constants_1.DEFAULT_NUM_VALUE_DECIMALS;
exports.getNumericDataPointDecimals = getNumericDataPointDecimals;
class NumericDataPoint extends DataPoint_1.DataPoint {
    numericDataPointArgs;
    constructor(numericDataPointArgs) {
        const decimals = (0, utils_1.useDefaultIfUndefined)(numericDataPointArgs.decimals, redstone_constants_1.DEFAULT_NUM_VALUE_DECIMALS);
        const valueByteSize = (0, utils_1.useDefaultIfUndefined)(numericDataPointArgs.valueByteSize, redstone_constants_1.DEFAULT_NUM_VALUE_BS);
        (0, utils_1.assert)(valueByteSize <= redstone_constants_1.MAX_NUM_VALUE_BS, `The byte size of the numeric value cannot be greater than ${redstone_constants_1.MAX_NUM_VALUE_BS}`);
        const valueBytes = (0, utils_1.convertNumberToBytes)(numericDataPointArgs.value, decimals, valueByteSize);
        super(numericDataPointArgs.dataFeedId, valueBytes, numericDataPointArgs.metadata);
        this.numericDataPointArgs = numericDataPointArgs;
    }
    toObj() {
        return {
            ...this.numericDataPointArgs,
        };
    }
}
exports.NumericDataPoint = NumericDataPoint;
//# sourceMappingURL=NumericDataPoint.js.map