import { Serializable } from "../common/Serializable";
import { ConvertibleToBytes32 } from "../common/utils";
import { INumericDataPoint } from "./NumericDataPoint";
export interface IStandardDataPoint {
    dataFeedId: ConvertibleToBytes32;
    value: string;
    metadata?: Metadata;
}
export type DataPointPlainObj = IStandardDataPoint | INumericDataPoint;
export type Metadata = Record<string, unknown>;
export declare class DataPoint extends Serializable {
    readonly dataFeedId: ConvertibleToBytes32;
    readonly value: Uint8Array;
    readonly metadata?: Metadata | undefined;
    constructor(dataFeedId: ConvertibleToBytes32, value: Uint8Array, metadata?: Metadata | undefined);
    serializeDataFeedId(): Uint8Array;
    toObj(): DataPointPlainObj;
    getValueByteSize(): number;
    toBytes(): Uint8Array;
}
//# sourceMappingURL=DataPoint.d.ts.map