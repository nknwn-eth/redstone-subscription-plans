import { Serializable } from "../common/Serializable";
import { DataPoint, DataPointPlainObj } from "../data-point/DataPoint";
import { SignedDataPackage } from "./SignedDataPackage";
export interface DataPackagePlainObj {
    dataPoints: DataPointPlainObj[];
    timestampMilliseconds: number;
    dataPackageId: string;
}
export declare class DataPackage extends Serializable {
    readonly dataPoints: DataPoint[];
    readonly timestampMilliseconds: number;
    readonly dataPackageId: string;
    constructor(dataPoints: DataPoint[], timestampMilliseconds: number, dataPackageId: string);
    getEachDataPointByteSize(): number;
    toBytes(): Uint8Array;
    toObj(): DataPackagePlainObj;
    static fromObj(plainObject: DataPackagePlainObj): DataPackage;
    getSignableHash(): Uint8Array;
    sign(privateKey: string): SignedDataPackage;
    protected serializeDataPoints(): Uint8Array;
    protected serializeTimestamp(): Uint8Array;
    protected serializeDataPointsCount(): Uint8Array;
    protected serializeDefaultDataPointByteSize(): Uint8Array;
}
//# sourceMappingURL=DataPackage.d.ts.map