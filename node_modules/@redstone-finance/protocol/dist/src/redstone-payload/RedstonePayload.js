"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedstonePayload = void 0;
const utils_1 = require("ethers/lib/utils");
const Serializable_1 = require("../common/Serializable");
const redstone_constants_1 = require("../common/redstone-constants");
const utils_2 = require("../common/utils");
const RedstonePayloadParser_1 = require("./RedstonePayloadParser");
class RedstonePayload extends Serializable_1.Serializable {
    signedDataPackages;
    unsignedMetadata;
    constructor(signedDataPackages, unsignedMetadata) {
        super();
        this.signedDataPackages = signedDataPackages;
        this.unsignedMetadata = unsignedMetadata;
    }
    static prepare(signedDataPackages, unsignedMetadata) {
        return new RedstonePayload(signedDataPackages, unsignedMetadata).toBytesHexWithout0xPrefix();
    }
    toObj() {
        return {
            signedDataPackages: this.signedDataPackages.map((signedDataPackage) => signedDataPackage.toObj()),
            unsignedMetadata: this.unsignedMetadata,
        };
    }
    toBytes() {
        return (0, utils_1.concat)([
            this.serializeSignedDataPackages(),
            this.serializeUnsignedMetadata(),
            redstone_constants_1.REDSTONE_MARKER_HEX,
        ]);
    }
    serializeUnsignedMetadata() {
        const unsignedMetadataBytes = (0, utils_1.isBytes)(this.unsignedMetadata)
            ? this.unsignedMetadata
            : (0, utils_1.toUtf8Bytes)(this.unsignedMetadata);
        const unsignedMetadataByteSizeBytes = (0, utils_2.convertIntegerNumberToBytes)(unsignedMetadataBytes.length, redstone_constants_1.UNSIGNED_METADATA_BYTE_SIZE_BS);
        return (0, utils_1.concat)([unsignedMetadataBytes, unsignedMetadataByteSizeBytes]);
    }
    serializeSignedDataPackages() {
        return (0, utils_1.concat)([
            ...this.signedDataPackages.map((signedDataPackage) => signedDataPackage.toBytes()),
            (0, utils_2.convertIntegerNumberToBytes)(this.signedDataPackages.length, redstone_constants_1.DATA_PACKAGES_COUNT_BS),
        ]);
    }
    static parse(bytesWithRedstonePayloadInTheEnd) {
        return new RedstonePayloadParser_1.RedstonePayloadParser(bytesWithRedstonePayloadInTheEnd).parse();
    }
}
exports.RedstonePayload = RedstonePayload;
//# sourceMappingURL=RedstonePayload.js.map